dac2e593342fed6197532243f2d47b17
"use strict";
/**
 * Interface utilisateur pour le Service de Gestion des Projets (C04)
 *
 * Définit la structure standardisée des données utilisateur extraites des tokens JWT.
 * Cette interface assure la cohérence des informations utilisateur à travers l'application
 * et facilite l'intégration avec le service d'authentification (C03).
 *
 * @fileoverview Interface principale pour les données utilisateur
 * @version 1.0.0
 * @since 2025-01-28
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserRole = void 0;
exports.hasRole = hasRole;
exports.hasAnyRole = hasAnyRole;
exports.hasAllRoles = hasAllRoles;
exports.isAdmin = isAdmin;
exports.isPremium = isPremium;
exports.createUser = createUser;
exports.isValidUser = isValidUser;
exports.isExtendedUser = isExtendedUser;
exports.createDefaultPreferences = createDefaultPreferences;
exports.createExtendedUser = createExtendedUser;
exports.hasVerifiedEmail = hasVerifiedEmail;
exports.isActiveUser = isActiveUser;
exports.getDisplayName = getDisplayName;
exports.getUserPreferences = getUserPreferences;
/**
 * Énumération des rôles utilisateur disponibles dans le système
 *
 * @enum {string}
 */
var UserRole;
(function (UserRole) {
    /** Utilisateur standard avec accès aux fonctionnalités de base */
    UserRole["USER"] = "user";
    /** Administrateur avec accès aux fonctionnalités d'administration */
    UserRole["ADMIN"] = "admin";
    /** Utilisateur premium avec accès aux fonctionnalités avancées */
    UserRole["PREMIUM"] = "premium";
})(UserRole || (exports.UserRole = UserRole = {}));
/**
 * Fonction utilitaire pour vérifier si un utilisateur possède un rôle spécifique
 *
 * @param user - L'utilisateur à vérifier
 * @param role - Le rôle à rechercher
 * @returns true si l'utilisateur possède le rôle, false sinon
 *
 * @example
 * ```typescript
 * const user: User = { id: '123', email: 'user@example.com', roles: ['user', 'premium'] };
 *
 * if (hasRole(user, UserRole.PREMIUM)) {
 *   // L'utilisateur a accès aux fonctionnalités premium
 * }
 * ```
 */
function hasRole(user, role) {
    return user.roles.includes(role);
}
/**
 * Fonction utilitaire pour vérifier si un utilisateur possède l'un des rôles spécifiés
 *
 * @param user - L'utilisateur à vérifier
 * @param roles - Les rôles à rechercher
 * @returns true si l'utilisateur possède au moins un des rôles, false sinon
 *
 * @example
 * ```typescript
 * const user: User = { id: '123', email: 'user@example.com', roles: ['user'] };
 *
 * if (hasAnyRole(user, [UserRole.ADMIN, UserRole.PREMIUM])) {
 *   // L'utilisateur a des privilèges élevés
 * }
 * ```
 */
function hasAnyRole(user, roles) {
    return roles.some(role => user.roles.includes(role));
}
/**
 * Fonction utilitaire pour vérifier si un utilisateur possède tous les rôles spécifiés
 *
 * @param user - L'utilisateur à vérifier
 * @param roles - Les rôles requis
 * @returns true si l'utilisateur possède tous les rôles, false sinon
 *
 * @example
 * ```typescript
 * const user: User = { id: '123', email: 'user@example.com', roles: ['user', 'premium'] };
 *
 * if (hasAllRoles(user, [UserRole.USER, UserRole.PREMIUM])) {
 *   // L'utilisateur possède tous les rôles requis
 * }
 * ```
 */
function hasAllRoles(user, roles) {
    return roles.every(role => user.roles.includes(role));
}
/**
 * Fonction utilitaire pour vérifier si un utilisateur est administrateur
 *
 * @param user - L'utilisateur à vérifier
 * @returns true si l'utilisateur est administrateur, false sinon
 *
 * @example
 * ```typescript
 * const user: User = { id: '123', email: 'admin@example.com', roles: ['user', 'admin'] };
 *
 * if (isAdmin(user)) {
 *   // L'utilisateur a des privilèges d'administration
 * }
 * ```
 */
function isAdmin(user) {
    return hasRole(user, UserRole.ADMIN);
}
/**
 * Fonction utilitaire pour vérifier si un utilisateur est premium
 *
 * @param user - L'utilisateur à vérifier
 * @returns true si l'utilisateur est premium, false sinon
 *
 * @example
 * ```typescript
 * const user: User = { id: '123', email: 'premium@example.com', roles: ['user', 'premium'] };
 *
 * if (isPremium(user)) {
 *   // L'utilisateur a accès aux fonctionnalités premium
 * }
 * ```
 */
function isPremium(user) {
    return hasRole(user, UserRole.PREMIUM);
}
/**
 * Fonction utilitaire pour créer un utilisateur avec des rôles par défaut
 *
 * Assure qu'un utilisateur a toujours au minimum le rôle 'user'.
 *
 * @param id - L'identifiant de l'utilisateur
 * @param email - L'email de l'utilisateur
 * @param roles - Les rôles additionnels (optionnel)
 * @returns Un utilisateur avec les rôles appropriés
 *
 * @example
 * ```typescript
 * const user = createUser('123', 'user@example.com', [UserRole.PREMIUM]);
 * // Résultat: { id: '123', email: 'user@example.com', roles: ['user', 'premium'] }
 * ```
 */
function createUser(id, email, roles = []) {
    const defaultRoles = [UserRole.USER];
    const allRoles = [...new Set([...defaultRoles, ...roles])]; // Supprime les doublons
    return {
        id,
        email,
        roles: allRoles,
    };
}
/**
 * Fonction utilitaire pour vérifier si un objet est un utilisateur valide
 *
 * @param obj - L'objet à vérifier
 * @returns true si l'objet est un utilisateur valide, false sinon
 *
 * @example
 * ```typescript
 * const data: unknown = { id: '123', email: 'user@example.com', roles: ['user'] };
 *
 * if (isValidUser(data)) {
 *   // TypeScript sait maintenant que data est de type User
 *   console.log(data.email);
 * }
 * ```
 */
function isValidUser(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }
    const user = obj;
    // Validation d'email améliorée
    const isValidEmail = (email) => {
        if (email.length === 0)
            return false;
        const atIndex = email.indexOf('@');
        if (atIndex <= 0 || atIndex === email.length - 1)
            return false; // @ doit être au milieu
        const localPart = email.substring(0, atIndex);
        const domainPart = email.substring(atIndex + 1);
        // Vérifications basiques
        if (localPart.length === 0 || domainPart.length === 0)
            return false;
        if (domainPart.startsWith('.') || domainPart.endsWith('.'))
            return false;
        if (!domainPart.includes('.'))
            return false; // Doit avoir au moins un point dans le domaine
        return true;
    };
    return (typeof user.id === 'string' &&
        user.id.length > 0 &&
        typeof user.email === 'string' &&
        isValidEmail(user.email) &&
        Array.isArray(user.roles) &&
        user.roles.every(role => typeof role === 'string'));
}
/**
 * Type guard pour vérifier si un utilisateur est un ExtendedUser
 *
 * @param user - L'utilisateur à vérifier
 * @returns true si l'utilisateur est étendu, false sinon
 *
 * @example
 * ```typescript
 * if (isExtendedUser(user)) {
 *   // Accès aux propriétés étendues
 *   console.log(user.name, user.avatar);
 * }
 * ```
 */
function isExtendedUser(user) {
    const extended = user;
    return ((extended.name !== undefined && extended.name.trim().length > 0) ||
        (extended.avatar !== undefined && extended.avatar.length > 0) ||
        extended.createdAt !== undefined ||
        extended.lastLoginAt !== undefined ||
        extended.preferences !== undefined ||
        extended.status !== undefined ||
        extended.emailVerified !== undefined);
}
/**
 * Fonction utilitaire pour créer des préférences utilisateur par défaut
 *
 * @param overrides - Préférences à surcharger
 * @returns Préférences utilisateur avec valeurs par défaut
 *
 * @example
 * ```typescript
 * const prefs = createDefaultPreferences({ theme: 'dark' });
 * // Résultat: { language: 'en', theme: 'dark', notifications: true, ... }
 * ```
 */
function createDefaultPreferences(overrides = {}) {
    return {
        language: 'en',
        timezone: 'UTC',
        theme: 'light',
        notifications: true,
        dateFormat: 'DD/MM/YYYY',
        itemsPerPage: 10,
        ...overrides,
    };
}
/**
 * Fonction utilitaire pour créer un utilisateur étendu
 *
 * @param baseUser - Utilisateur de base
 * @param extensions - Propriétés étendues à ajouter
 * @returns Utilisateur étendu
 *
 * @example
 * ```typescript
 * const user = createUser('123', 'user@example.com');
 * const extendedUser = createExtendedUser(user, {
 *   name: 'John Doe',
 *   avatar: 'https://example.com/avatar.jpg'
 * });
 * ```
 */
function createExtendedUser(baseUser, extensions = {}) {
    return {
        ...baseUser,
        ...extensions,
    };
}
/**
 * Fonction utilitaire pour vérifier si un utilisateur a un email vérifié
 *
 * @param user - L'utilisateur à vérifier
 * @returns true si l'email est vérifié, false sinon ou si l'info n'est pas disponible
 *
 * @example
 * ```typescript
 * if (hasVerifiedEmail(user)) {
 *   // L'utilisateur peut accéder aux fonctionnalités nécessitant un email vérifié
 * }
 * ```
 */
function hasVerifiedEmail(user) {
    if (isExtendedUser(user)) {
        // Conversion truthy/falsy en boolean strict
        return Boolean(user.emailVerified);
    }
    return false; // Considéré comme non vérifié si l'info n'est pas disponible
}
/**
 * Fonction utilitaire pour vérifier si un compte utilisateur est actif
 *
 * @param user - L'utilisateur à vérifier
 * @returns true si le compte est actif, false sinon
 *
 * @example
 * ```typescript
 * if (isActiveUser(user)) {
 *   // L'utilisateur peut utiliser la plateforme normalement
 * } else {
 *   // Rediriger vers la page de suspension/vérification
 * }
 * ```
 */
function isActiveUser(user) {
    if (isExtendedUser(user)) {
        return user.status === 'active' || user.status === undefined; // undefined = actif par défaut
    }
    return true; // User de base considéré comme actif
}
/**
 * Fonction utilitaire pour obtenir le nom d'affichage d'un utilisateur
 *
 * @param user - L'utilisateur
 * @returns Le nom d'affichage (name si disponible, sinon email)
 *
 * @example
 * ```typescript
 * const displayName = getDisplayName(user);
 * // "John Doe" ou "user@example.com" si pas de nom
 * ```
 */
function getDisplayName(user) {
    if (isExtendedUser(user) && user.name) {
        // Vérifier que le nom contient des caractères visibles
        const trimmedName = user.name.trim();
        // Supprimer les caractères de contrôle et invisibles
        const visibleName = trimmedName.replace(/[\u0000-\u001f\u007f-\u009f\u200b-\u200f\u2028-\u202f\u205f-\u206f]/g, '');
        if (visibleName.length > 0) {
            return user.name;
        }
    }
    return user.email;
}
/**
 * Fonction utilitaire pour obtenir les préférences avec fallback
 *
 * @param user - L'utilisateur
 * @returns Les préférences utilisateur ou les préférences par défaut
 *
 * @example
 * ```typescript
 * const prefs = getUserPreferences(user);
 * console.log(prefs.theme); // Toujours défini, avec fallback sur 'light'
 * ```
 */
function getUserPreferences(user) {
    const defaultPrefs = createDefaultPreferences();
    if (isExtendedUser(user) && user.preferences) {
        // Merge en préservant les propriétés supplémentaires mais validant les types de base
        const result = { ...defaultPrefs, ...user.preferences };
        // Correction des types incorrects pour les propriétés essentielles
        if (typeof result.theme !== 'string' || !['light', 'dark'].includes(result.theme)) {
            result.theme = defaultPrefs.theme;
        }
        if (typeof result.language !== 'string') {
            result.language = defaultPrefs.language;
        }
        if (typeof result.notifications !== 'boolean') {
            result.notifications = defaultPrefs.notifications;
        }
        if (typeof result.itemsPerPage !== 'number' || result.itemsPerPage < 1) {
            result.itemsPerPage = defaultPrefs.itemsPerPage;
        }
        if (typeof result.timezone !== 'string') {
            result.timezone = defaultPrefs.timezone;
        }
        if (typeof result.dateFormat !== 'string') {
            result.dateFormat = defaultPrefs.dateFormat;
        }
        return result;
    }
    return defaultPrefs;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,