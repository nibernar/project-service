19a0c3126a25998657f5f3369a60019e
"use strict";
// test/unit/common/guards/auth.guard.security.spec.ts
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
const axios_1 = require("axios");
const crypto = require("crypto");
const auth_guard_1 = require("../../../../src/common/guards/auth.guard");
describe('AuthGuard - Security Tests', () => {
    let authGuard;
    let configService;
    let cacheService;
    let httpService;
    // ============================================================================
    // HELPERS DE TEST SÉCURISÉS
    // ============================================================================
    const createMockExecutionContext = (request) => {
        return {
            switchToHttp: () => ({
                getRequest: () => request,
                getResponse: jest.fn(),
                getNext: jest.fn(),
            }),
            switchToRpc: jest.fn(),
            switchToWs: jest.fn(),
            getType: () => 'http',
            getClass: jest.fn(),
            getHandler: jest.fn(),
            getArgs: jest.fn(),
            getArgByIndex: jest.fn(),
        };
    };
    const createValidUser = () => ({
        id: 'user-123',
        email: 'test@example.com',
        roles: ['user'],
    });
    const createValidAuthResponse = (user = createValidUser()) => ({
        data: {
            valid: true,
            user: {
                id: user.id,
                email: user.email,
                roles: user.roles,
            },
            expiresAt: new Date(Date.now() + 3600000).toISOString(),
        },
        status: 200,
        statusText: 'OK',
        headers: {},
        config: {},
    });
    const createSecureToken = () => {
        // Générer un token JWT-like sécurisé pour les tests
        const header = Buffer.from('{"alg":"HS256","typ":"JWT"}').toString('base64url');
        const payload = Buffer.from(JSON.stringify({
            sub: 'user-123',
            email: 'test@example.com',
            roles: ['user'],
            iat: Math.floor(Date.now() / 1000),
            exp: Math.floor(Date.now() / 1000) + 3600,
        })).toString('base64url');
        const signature = crypto.randomBytes(32).toString('base64url');
        return `${header}.${payload}.${signature}`;
    };
    const measureExecutionTime = async (fn) => {
        const start = process.hrtime.bigint();
        try {
            await fn();
        }
        catch (error) {
            // Mesurer même en cas d'erreur
        }
        const end = process.hrtime.bigint();
        return Number(end - start) / 1000000; // Convert to milliseconds
    };
    // ============================================================================
    // SETUP ET TEARDOWN
    // ============================================================================
    beforeEach(() => {
        configService = {
            get: jest.fn(),
        };
        cacheService = {
            get: jest.fn(),
            set: jest.fn(),
            del: jest.fn(),
        };
        httpService = {
            post: jest.fn(),
        };
        // Configuration sécurisée par défaut
        configService.get.mockImplementation((key) => {
            switch (key) {
                case 'AUTH_SERVICE_URL':
                    return 'https://secure-auth-service.internal'; // HTTPS pour la sécurité
                case 'AUTH_SERVICE_TIMEOUT':
                    return '5000';
                default:
                    return undefined;
            }
        });
        process.env.AUTH_SERVICE_URL = 'https://secure-auth-service.internal';
        process.env.AUTH_SERVICE_TIMEOUT = '5000';
        authGuard = new auth_guard_1.AuthGuard(configService, cacheService, httpService);
    });
    afterEach(() => {
        jest.clearAllMocks();
        jest.restoreAllMocks();
    });
    // ============================================================================
    // TESTS - PROTECTION CONTRE LES TIMING ATTACKS
    // ============================================================================
    describe('Protection contre les timing attacks', () => {
        it('should have consistent response times for different token lengths', async () => {
            // Arrange
            const tokens = [
                'short',
                'medium-length-token',
                'very-long-token-that-could-reveal-information-through-timing',
                'x'.repeat(1000), // Very long token
            ];
            const responseTimes = [];
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_1.AxiosError('Invalid token', '401')));
            // Act - Mesurer les temps de réponse
            for (const token of tokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                const responseTime = await measureExecutionTime(async () => {
                    try {
                        await authGuard.canActivate(context);
                    }
                    catch (error) {
                        // Expected to fail
                    }
                });
                responseTimes.push(responseTime);
            }
            // Assert - Les temps ne doivent pas varier significativement
            const avgTime = responseTimes.reduce((a, b) => a + b) / responseTimes.length;
            const maxDeviation = Math.max(...responseTimes.map(time => Math.abs(time - avgTime)));
            expect(maxDeviation).toBeLessThan(avgTime * 0.5); // Max 50% de variation
        });
        it('should have consistent response times for valid vs invalid tokens', async () => {
            // Arrange
            const validToken = createSecureToken();
            const invalidToken = 'invalid.token.signature';
            const responseTimes = { valid: [], invalid: [] };
            // Mesurer les tokens valides
            for (let i = 0; i < 10; i++) {
                const request = { headers: { authorization: `Bearer ${validToken}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse()));
                const time = await measureExecutionTime(() => authGuard.canActivate(context));
                responseTimes.valid.push(time);
            }
            // Mesurer les tokens invalides
            for (let i = 0; i < 10; i++) {
                const request = { headers: { authorization: `Bearer ${invalidToken}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_1.AxiosError('Invalid token', '401')));
                const time = await measureExecutionTime(async () => {
                    try {
                        await authGuard.canActivate(context);
                    }
                    catch (error) {
                        // Expected to fail
                    }
                });
                responseTimes.invalid.push(time);
            }
            // Assert - Les temps moyens ne doivent pas révéler d'informations
            const avgValidTime = responseTimes.valid.reduce((a, b) => a + b) / responseTimes.valid.length;
            const avgInvalidTime = responseTimes.invalid.reduce((a, b) => a + b) / responseTimes.invalid.length;
            const timeDifference = Math.abs(avgValidTime - avgInvalidTime);
            expect(timeDifference).toBeLessThan(Math.max(avgValidTime, avgInvalidTime) * 0.3); // Max 30% de différence
        });
        it('should not leak information through cache hit/miss timing', async () => {
            // Arrange
            const token = createSecureToken();
            const user = createValidUser();
            const request = { headers: { authorization: `Bearer ${token}` } };
            const cacheHitTimes = [];
            const cacheMissTimes = [];
            // Mesurer cache hits
            for (let i = 0; i < 10; i++) {
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(user); // Cache hit
                const time = await measureExecutionTime(() => authGuard.canActivate(context));
                cacheHitTimes.push(time);
            }
            // Mesurer cache misses
            for (let i = 0; i < 10; i++) {
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null); // Cache miss
                httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
                const time = await measureExecutionTime(() => authGuard.canActivate(context));
                cacheMissTimes.push(time);
            }
            // Assert - Bien que les cache hits soient plus rapides, 
            // la différence ne doit pas être exploitable pour des attaques
            const avgCacheHitTime = cacheHitTimes.reduce((a, b) => a + b) / cacheHitTimes.length;
            const avgCacheMissTime = cacheMissTimes.reduce((a, b) => a + b) / cacheMissTimes.length;
            expect(avgCacheHitTime).toBeLessThan(avgCacheMissTime); // Normal que cache soit plus rapide
            expect(avgCacheHitTime).toBeGreaterThan(0.1); // Mais pas trop rapide pour éviter timing attacks
        });
    });
    // ============================================================================
    // TESTS - PROTECTION CONTRE CACHE POISONING
    // ============================================================================
    describe('Protection contre cache poisoning', () => {
        it('should use secure hash for cache keys', async () => {
            // Arrange
            const token = createSecureToken();
            const user = createValidUser();
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            await authGuard.canActivate(context);
            // Assert - Vérifier que la clé de cache est hashée de manière sécurisée
            expect(cacheService.set).toHaveBeenCalledWith(expect.stringMatching(/^auth:token:[a-f0-9]{64}$/), // SHA-256 hash (64 hex chars)
            user, expect.any(Number));
            // Vérifier que le token original n'apparaît pas dans la clé
            const cacheKey = cacheService.set.mock.calls[0][0];
            expect(cacheKey).not.toContain(token);
        });
        it('should prevent cache key collisions', async () => {
            // Arrange
            const similarTokens = [
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.payload1.signature1',
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.payload2.signature2',
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.payload3.signature3',
            ];
            const cacheKeys = [];
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            for (const token of similarTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                await authGuard.canActivate(context);
                cacheKeys.push(cacheService.set.mock.calls[cacheService.set.mock.calls.length - 1][0]);
            }
            // Assert - Toutes les clés doivent être uniques
            const uniqueKeys = new Set(cacheKeys);
            expect(uniqueKeys.size).toBe(cacheKeys.length);
        });
        it('should validate cached data integrity', async () => {
            // Arrange
            const token = createSecureToken();
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            // Cache contenant des données malveillantes
            const maliciousData = {
                id: 'hacker-123',
                email: 'hacker@evil.com',
                roles: ['admin', 'super-admin'],
                __proto__: { isAdmin: true },
                maliciousMethod: () => 'hacked',
            };
            cacheService.get.mockResolvedValue(maliciousData);
            // Act & Assert - Le guard doit rejeter les données malveillantes
            // et faire appel au service d'authentification
            const validUser = createValidUser();
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(validUser)));
            const result = await authGuard.canActivate(context);
            expect(result).toBe(true);
            expect(httpService.post).toHaveBeenCalled(); // Fallback au service
        });
        it('should prevent cache overflow attacks', async () => {
            // Arrange
            const tokens = Array.from({ length: 1000 }, (_, i) => `token-${i}.unique.signature`);
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            cacheService.set.mockResolvedValue();
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act - Tenter de surcharger le cache
            const promises = tokens.map(async (token) => {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                return authGuard.canActivate(context);
            });
            const results = await Promise.all(promises);
            // Assert
            expect(results.every(result => result === true)).toBe(true);
            expect(cacheService.set).toHaveBeenCalledTimes(1000);
            // Le guard ne doit pas limiter les appels (c'est le rôle du cache/rate limiter)
        });
    });
    // ============================================================================
    // TESTS - PROTECTION CONTRE LES FUITES D'INFORMATIONS
    // ============================================================================
    describe('Protection contre les fuites d\'informations', () => {
        it('should not leak tokens in error messages', async () => {
            // Arrange
            const sensitiveToken = 'secret-token-with-sensitive-information-in-payload';
            const request = { headers: { authorization: `Bearer ${sensitiveToken}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new Error('Authentication failed')));
            // Act & Assert
            try {
                await authGuard.canActivate(context);
                fail('Should have thrown an error');
            }
            catch (error) {
                expect(error.message).not.toContain(sensitiveToken);
                expect(error.message).not.toContain('secret-token');
                expect(error.message).not.toContain('sensitive-information');
                expect(error.stack || '').not.toContain(sensitiveToken);
            }
        });
        it('should not leak user information in cache errors', async () => {
            // Arrange
            const token = createSecureToken();
            const sensitiveUser = {
                id: 'admin-user-123',
                email: 'admin@sensitive-company.com',
                roles: ['admin', 'super-admin'],
                sensitiveData: 'classified-information',
            };
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            cacheService.set.mockRejectedValue(new Error('Cache error with user data'));
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(sensitiveUser)));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true); // Should succeed despite cache error
            // Vérifier qu'aucune information sensible n'est loggée
            // (Dans un vrai test, on vérifierait les logs)
        });
        it('should not expose internal service URLs in errors', async () => {
            // Arrange
            const token = createSecureToken();
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            const networkError = {
                code: 'ECONNREFUSED',
                isAxiosError: true,
                name: 'AxiosError',
                message: 'connect ECONNREFUSED https://internal-auth-service.private:3001/validate',
                config: {},
                toJSON: () => ({}),
            };
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => networkError));
            // Act & Assert
            try {
                await authGuard.canActivate(context);
                fail('Should have thrown an error');
            }
            catch (error) {
                expect(error.message).not.toContain('internal-auth-service.private');
                expect(error.message).not.toContain(':3001');
                expect(error.message).toBe('Authentication service unavailable');
            }
        });
        it('should sanitize headers to prevent injection', async () => {
            // Arrange
            const maliciousHeaders = {
                authorization: 'Bearer valid-token',
                'user-agent': '<script>alert("xss")</script>',
                'x-forwarded-for': '127.0.0.1; DROP TABLE users; --',
                'x-real-ip': '$(rm -rf /)',
                'custom-header': '\r\nSet-Cookie: admin=true',
            };
            const request = { headers: maliciousHeaders };
            const context = createMockExecutionContext(request);
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            // Vérifier que seuls les headers sécurisés sont utilisés
            expect(httpService.post).toHaveBeenCalledWith(expect.any(String), expect.any(Object), expect.objectContaining({
                headers: expect.objectContaining({
                    'Content-Type': 'application/json',
                    'User-Agent': 'project-service/1.0.0', // Header sanitisé
                }),
            }));
        });
        it('should prevent information disclosure through response timing', async () => {
            // Arrange
            const token = createSecureToken();
            const request = { headers: { authorization: `Bearer ${token}` } };
            // Test avec différents types d'erreurs
            const errorScenarios = [
                { name: 'invalid_token', error: new axios_1.AxiosError('Invalid token', '401') },
                { name: 'expired_token', error: new axios_1.AxiosError('Token expired', '401') },
                { name: 'malformed_token', error: new axios_1.AxiosError('Malformed token', '400') },
                { name: 'service_error', error: new axios_1.AxiosError('Internal error', '500') },
            ];
            const timings = {};
            // Act - Mesurer les temps pour chaque type d'erreur
            for (const scenario of errorScenarios) {
                timings[scenario.name] = [];
                for (let i = 0; i < 5; i++) {
                    const context = createMockExecutionContext(request);
                    cacheService.get.mockResolvedValue(null);
                    httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => scenario.error));
                    const time = await measureExecutionTime(async () => {
                        try {
                            await authGuard.canActivate(context);
                        }
                        catch (error) {
                            // Expected to fail
                        }
                    });
                    timings[scenario.name].push(time);
                }
            }
            // Assert - Les temps ne doivent pas révéler le type d'erreur
            const avgTimings = Object.entries(timings).map(([name, times]) => ({
                name,
                avg: times.reduce((a, b) => a + b) / times.length,
            }));
            const maxTiming = Math.max(...avgTimings.map(t => t.avg));
            const minTiming = Math.min(...avgTimings.map(t => t.avg));
            const variation = (maxTiming - minTiming) / maxTiming;
            expect(variation).toBeLessThan(0.5); // Max 50% de variation
        });
    });
    // ============================================================================
    // TESTS - PROTECTION CONTRE LES INJECTIONS
    // ============================================================================
    describe('Protection contre les injections', () => {
        it('should prevent header injection attacks', async () => {
            // Arrange
            const injectionPayloads = [
                'Bearer token\r\nSet-Cookie: admin=true',
                'Bearer token\nX-Admin: true',
                'Bearer token\r\n\r\nHTTP/1.1 200 OK\r\nContent-Length: 0',
                'Bearer token\x00admin',
                'Bearer token\u000aX-Inject: true',
            ];
            for (const payload of injectionPayloads) {
                const request = { headers: { authorization: payload } };
                const context = createMockExecutionContext(request);
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            }
        });
        it('should prevent JSON injection in auth service requests', async () => {
            // Arrange
            const maliciousToken = '{"valid":true,"user":{"id":"hacker","roles":["admin"]}}';
            const request = { headers: { authorization: `Bearer ${maliciousToken}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_1.AxiosError('Invalid token', '400')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow();
            // Vérifier que le payload envoyé est correct
            expect(httpService.post).toHaveBeenCalledWith(expect.any(String), { token: maliciousToken }, // Token encapsulé proprement dans l'objet
            expect.any(Object));
        });
        it('should prevent cache key injection', async () => {
            // Arrange
            const maliciousTokens = [
                'token\x00admin',
                'token\r\nmalicious',
                'token\u0000hack',
                '../../../etc/passwd',
                '..\\..\\windows\\system32',
            ];
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            for (const maliciousToken of maliciousTokens) {
                const request = { headers: { authorization: `Bearer ${maliciousToken}` } };
                const context = createMockExecutionContext(request);
                // Act
                await authGuard.canActivate(context);
                // Assert - Vérifier que la clé de cache est sécurisée
                const cacheKey = cacheService.set.mock.calls[cacheService.set.mock.calls.length - 1][0];
                expect(cacheKey).toMatch(/^auth:token:[a-f0-9]{64}$/); // Hash sécurisé
                expect(cacheKey).not.toContain('\x00');
                expect(cacheKey).not.toContain('\r');
                expect(cacheKey).not.toContain('\n');
                expect(cacheKey).not.toContain('..');
            }
        });
        it('should prevent prototype pollution in user data', async () => {
            // Arrange
            const token = createSecureToken();
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            // Réponse avec tentative de pollution de prototype
            const maliciousResponse = {
                data: {
                    valid: true,
                    user: {
                        id: 'user-123',
                        email: 'test@example.com',
                        roles: ['user'],
                        '__proto__': { isAdmin: true },
                        'constructor': { prototype: { polluted: true } },
                    },
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            };
            httpService.post.mockReturnValue((0, rxjs_1.of)(maliciousResponse));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            // Vérifier que l'objet global n'est pas pollué
            expect(Object.prototype.isAdmin).toBeUndefined();
            expect(Object.prototype.polluted).toBeUndefined();
            // Vérifier que l'utilisateur injecté est propre
            const injectedUser = request.user;
            expect(injectedUser).toBeDefined();
            expect(injectedUser.__proto__).toBe(Object.prototype); // Prototype normal
        });
    });
    // ============================================================================
    // TESTS - AUDIT ET LOGGING SÉCURISÉ
    // ============================================================================
    describe('Audit et logging sécurisé', () => {
        let consoleSpy;
        beforeEach(() => {
            consoleSpy = jest.spyOn(console, 'log').mockImplementation();
        });
        afterEach(() => {
            consoleSpy.mockRestore();
        });
        it('should log authentication attempts without exposing sensitive data', async () => {
            // Arrange
            const sensitiveToken = 'eyJhbGciOiJIUzI1NiJ9.sensitive-payload-with-secrets.signature';
            const request = { headers: { authorization: `Bearer ${sensitiveToken}` } };
            const context = createMockExecutionContext(request);
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            await authGuard.canActivate(context);
            // Assert - Vérifier que les logs ne contiennent pas de données sensibles
            const logCalls = consoleSpy.mock.calls.flat();
            const allLogs = logCalls.join(' ');
            expect(allLogs).not.toContain(sensitiveToken);
            expect(allLogs).not.toContain('sensitive-payload');
            expect(allLogs).not.toContain('signature');
            // Mais devrait contenir des informations d'audit appropriées
            expect(allLogs).toContain('Authentication successful');
            expect(allLogs).toContain(user.email);
        });
        it('should log failed attempts with appropriate detail level', async () => {
            // Arrange
            const invalidToken = 'invalid-token-should-not-appear-in-logs';
            const request = { headers: { authorization: `Bearer ${invalidToken}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_1.AxiosError('Invalid token', '401')));
            // Act
            try {
                await authGuard.canActivate(context);
            }
            catch (error) {
                // Expected to fail
            }
            // Assert
            const logCalls = consoleSpy.mock.calls.flat();
            const allLogs = logCalls.join(' ');
            expect(allLogs).not.toContain(invalidToken);
            expect(allLogs).toContain('Authentication failed');
            expect(allLogs).toContain('Invalid token'); // Error message ok
        });
        it('should include security-relevant metadata in audit logs', async () => {
            // Arrange
            const token = createSecureToken();
            const request = {
                headers: {
                    authorization: `Bearer ${token}`,
                    'user-agent': 'Mozilla/5.0 Test Browser',
                    'x-forwarded-for': '192.168.1.100',
                },
                ip: '127.0.0.1',
                method: 'POST',
                url: '/api/sensitive-endpoint',
            };
            const context = createMockExecutionContext(request);
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            await authGuard.canActivate(context);
            // Assert - Vérifier que les métadonnées de sécurité sont loggées
            // (Dans un vrai test, on vérifierait les appels à un service d'audit)
            expect(consoleSpy).toHaveBeenCalled();
        });
        it('should rate limit audit logs to prevent spam', async () => {
            // Arrange
            const token = 'spam-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_1.AxiosError('Invalid token', '401')));
            // Act - Faire beaucoup de tentatives rapidement
            const promises = Array.from({ length: 100 }, async () => {
                const context = createMockExecutionContext(request);
                try {
                    await authGuard.canActivate(context);
                }
                catch (error) {
                    // Expected to fail
                }
            });
            await Promise.all(promises);
            // Assert - Les logs ne devraient pas être spammés
            // (Dans une vraie implémentation, il y aurait un rate limiting des logs)
            expect(consoleSpy.mock.calls.length).toBeLessThan(200); // Pas un log par tentative
        });
    });
    // ============================================================================
    // TESTS - ISOLATION DES CONTEXTES
    // ============================================================================
    describe('Isolation des contextes', () => {
        it('should isolate user data between concurrent requests', async () => {
            // Arrange
            const users = [
                { id: 'user-1', email: 'user1@example.com', roles: ['user'] },
                { id: 'user-2', email: 'user2@example.com', roles: ['admin'] },
                { id: 'user-3', email: 'user3@example.com', roles: ['moderator'] },
            ];
            const tokens = users.map((_, i) => `token-${i}-unique-signature`);
            cacheService.get.mockResolvedValue(null);
            // Act - Exécuter des requêtes concurrentes
            const results = await Promise.all(tokens.map(async (token, i) => {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                httpService.post.mockReturnValueOnce((0, rxjs_1.of)(createValidAuthResponse(users[i])));
                const success = await authGuard.canActivate(context);
                return { success, user: request.user };
            }));
            // Assert - Chaque contexte doit avoir le bon utilisateur
            expect(results).toHaveLength(3);
            results.forEach((result, i) => {
                expect(result.success).toBe(true);
                expect(result.user).toEqual(users[i]);
                expect(result.user.id).toBe(`user-${i + 1}`);
            });
        });
        it('should prevent cross-context data leakage', async () => {
            // Arrange
            const adminUser = { id: 'admin', email: 'admin@example.com', roles: ['admin'] };
            const regularUser = { id: 'user', email: 'user@example.com', roles: ['user'] };
            const adminToken = 'admin-token';
            const userToken = 'user-token';
            // Première requête admin
            const adminRequest = { headers: { authorization: `Bearer ${adminToken}` } };
            const adminContext = createMockExecutionContext(adminRequest);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValueOnce((0, rxjs_1.of)(createValidAuthResponse(adminUser)));
            await authGuard.canActivate(adminContext);
            // Deuxième requête utilisateur normal
            const userRequest = { headers: { authorization: `Bearer ${userToken}` } };
            const userContext = createMockExecutionContext(userRequest);
            httpService.post.mockReturnValueOnce((0, rxjs_1.of)(createValidAuthResponse(regularUser)));
            await authGuard.canActivate(userContext);
            // Assert - L'utilisateur normal ne doit pas avoir les privilèges admin
            expect(adminRequest.user).toEqual(adminUser);
            expect(userRequest.user).toEqual(regularUser);
            expect(userRequest.user.roles).not.toContain('admin');
        });
        it('should handle request context pollution attempts', async () => {
            // Arrange
            const token = createSecureToken();
            const maliciousRequest = {
                headers: { authorization: `Bearer ${token}` },
                // Tentative de pollution du contexte
                user: { id: 'fake-admin', roles: ['admin'] },
                isAuthenticated: true,
                permissions: ['all'],
            };
            const context = createMockExecutionContext(maliciousRequest);
            const realUser = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(realUser)));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            expect(maliciousRequest.user).toEqual(realUser); // Doit être écrasé
            expect(maliciousRequest.user.id).not.toBe('fake-admin');
            expect(maliciousRequest.user.roles).not.toContain('admin');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,