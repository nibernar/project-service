6abb648a16c4fa55c7a3edb30760f40a
"use strict";
// test/unit/common/guards/auth.guard.edge-cases.spec.ts
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const axios_1 = require("@nestjs/axios");
const testing_1 = require("@nestjs/testing");
const rxjs_1 = require("rxjs");
const axios_2 = require("axios");
const auth_guard_1 = require("../../../../src/common/guards/auth.guard");
const cache_service_1 = require("../../../../src/cache/cache.service");
describe('AuthGuard - Edge Cases', () => {
    let authGuard;
    let configService;
    let cacheService;
    let httpService;
    // ============================================================================
    // HELPERS SPÉCIALISÉS POUR LES CAS LIMITES
    // ============================================================================
    const createMockExecutionContext = (request) => {
        return {
            switchToHttp: () => ({
                getRequest: () => request,
                getResponse: jest.fn(),
                getNext: jest.fn(),
            }),
            switchToRpc: jest.fn(),
            switchToWs: jest.fn(),
            getType: () => 'http',
            getClass: jest.fn(),
            getHandler: jest.fn(),
            getArgs: jest.fn(),
            getArgByIndex: jest.fn(),
        };
    };
    const createExtremeUser = (type) => {
        switch (type) {
            case 'minimal':
                return {
                    id: 'a',
                    email: 'a@b.c',
                    roles: ['r'],
                };
            case 'maximal':
                return {
                    id: 'user-' + 'x'.repeat(1000),
                    email: 'very-long-email-address-' + 'x'.repeat(200) + '@very-long-domain-name-' + 'x'.repeat(100) + '.example.com',
                    roles: Array.from({ length: 100 }, (_, i) => `role-${i}-${'x'.repeat(50)}`),
                };
            case 'unicode':
                return {
                    id: '用户-123-αβγ-🚀',
                    email: 'тест@пример.рф',
                    roles: ['用户', 'διαχειριστής', '🔐-admin'],
                };
            case 'numeric':
                return {
                    id: '123456789',
                    email: '123@456.789',
                    roles: ['0', '1', '2'],
                };
            default:
                throw new Error('Unknown user type');
        }
    };
    const createMalformedTokens = () => [
        '', // Empty
        ' ', // Space only
        '\t', // Tab
        '\n', // Newline
        'token with spaces',
        'token\nwith\nnewlines',
        'token\twith\ttabs',
        'token.with.only.two.parts',
        'token.with.too.many.parts.here.and.here',
        'toke123',
        '......',
        'Bearer token', // Double Bearer
        'a'.repeat(10000), // Très long
        '\u0000token\u0000', // Null bytes
        'token🚀with🔐emojis',
        'token-with-unicode-αβγ-characters',
    ];
    const createBoundaryValues = () => ({
        largeNumbers: [
            Number.MAX_SAFE_INTEGER,
            Number.MIN_SAFE_INTEGER,
            Number.MAX_VALUE,
            Number.MIN_VALUE,
            Infinity,
            -Infinity,
        ],
        specialStrings: [
            '',
            ' ',
            '  ',
            '\n',
            '\r',
            '\t',
            '\r\n',
            '\0',
            String.fromCharCode(0),
            String.fromCharCode(65535),
            '\\',
            '/',
            '"',
            "'",
            '`',
            '$',
            '%',
            '&',
            '<script>',
            'SELECT * FROM users',
            '../../../etc/passwd',
            'C:\\Windows\\System32',
        ],
        edgeDates: [
            new Date(0), // Unix epoch
            new Date('1970-01-01T00:00:00.000Z'),
            new Date('2038-01-19T03:14:07.000Z'), // 32-bit timestamp limit
            new Date('9999-12-31T23:59:59.999Z'),
            new Date('Invalid Date'),
        ],
    });
    // ============================================================================
    // SETUP
    // ============================================================================
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auth_guard_1.AuthGuard,
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn(),
                    },
                },
                {
                    provide: cache_service_1.CacheService,
                    useValue: {
                        get: jest.fn(),
                        set: jest.fn(),
                        del: jest.fn(),
                    },
                },
                {
                    provide: axios_1.HttpService,
                    useValue: {
                        post: jest.fn(),
                    },
                },
            ],
        }).compile();
        authGuard = module.get(auth_guard_1.AuthGuard);
        configService = module.get(config_1.ConfigService);
        cacheService = module.get(cache_service_1.CacheService);
        httpService = module.get(axios_1.HttpService);
        configService.get.mockImplementation((key) => {
            switch (key) {
                case 'AUTH_SERVICE_URL':
                    return 'http://localhost:3001';
                case 'AUTH_SERVICE_TIMEOUT':
                    return '5000';
                default:
                    return undefined;
            }
        });
        process.env.AUTH_SERVICE_URL = 'http://localhost:3001';
        process.env.AUTH_SERVICE_TIMEOUT = '5000';
    });
    afterEach(() => {
        jest.clearAllMocks();
        jest.restoreAllMocks();
    });
    // ============================================================================
    // TESTS - TOKENS EXTRÊMES
    // ============================================================================
    describe('Extreme Token Cases', () => {
        it('should handle empty and whitespace tokens', async () => {
            // Arrange
            const invalidTokens = ['', ' ', '\t', '\n', '\r\n', '   '];
            for (const token of invalidTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            }
        });
        it('should handle extremely long tokens', async () => {
            // Arrange
            const veryLongToken = 'a'.repeat(100000); // 100KB token
            const request = { headers: { authorization: `Bearer ${veryLongToken}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Request too large', '413')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow();
        });
        it('should handle tokens with special characters', async () => {
            // Arrange
            const specialTokens = createMalformedTokens();
            for (const token of specialTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Invalid token', '400')));
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow();
            }
        });
        it('should handle tokens with unicode characters', async () => {
            // Arrange
            const unicodeTokens = [
                'тест.токен.подпись',
                'テスト.トークン.署名',
                '测试.令牌.签名',
                'test.🚀.signature',
                'token.with.αβγ.characters',
            ];
            for (const token of unicodeTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Invalid token', '400')));
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow();
            }
        });
        it('should handle tokens with null bytes', async () => {
            // Arrange
            const nullByteTokens = [
                'token\x00with\x00nulls',
                '\x00token',
                'token\x00',
                'before\x00null\x00after',
            ];
            for (const token of nullByteTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            }
        });
        it('should handle malformed JWT structure', async () => {
            // Arrange
            const malformedJWTs = [
                'header', // Only one part
                'header.payload', // Only two parts
                'header.payload.signature.extra', // Too many parts
                '.payload.signature', // Empty header
                'header..signature', // Empty payload
                'header.payload.', // Empty signature
                '..', // All empty
                'header.payload.signature.', // Trailing dot
                '.header.payload.signature', // Leading dot
            ];
            for (const jwt of malformedJWTs) {
                const request = { headers: { authorization: `Bearer ${jwt}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Malformed JWT', '400')));
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow();
            }
        });
    });
    // ============================================================================
    // TESTS - HEADERS EXTRÊMES
    // ============================================================================
    describe('Extreme Header Cases', () => {
        it('should handle headers with different cases', async () => {
            // Arrange
            const headerVariations = [
                'authorization',
                'Authorization',
                'AUTHORIZATION',
                'AuThOrIzAtIoN',
            ];
            for (const headerName of headerVariations) {
                const headers = { [headerName]: 'Bearer valid-token' };
                const request = { headers };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Invalid', '401')));
                // Act & Assert
                // Le behavior peut varier selon l'implémentation
                // La plupart des serveurs normalisent les headers
                await expect(authGuard.canActivate(context)).rejects.toThrow();
            }
        });
        it('should handle multiple authorization headers', async () => {
            // Arrange
            const request = {
                headers: {
                    authorization: ['Bearer token1', 'Bearer token2'],
                },
            };
            const context = createMockExecutionContext(request);
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
        });
        it('should handle extremely large headers', async () => {
            // Arrange
            const largeToken = 'token' + 'x'.repeat(50000);
            const request = {
                headers: {
                    authorization: 'Bearer token1', // Une seule valeur au lieu d'un array
                },
            };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new Error('Headers too large')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow();
        });
        it('should handle headers with special characters', async () => {
            // Arrange
            const request = {
                headers: {
                    authorization: 'Bearer valid-token',
                    'x-special': 'value\r\nInjected: header',
                    'x-unicode': 'тест-значение-🚀',
                    'x-null': 'value\x00with\x00nulls',
                },
            };
            const context = createMockExecutionContext(request);
            const user = createExtremeUser('minimal');
            cacheService.get.mockResolvedValue(user);
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            // Le guard doit sanitizer les headers avant de les utiliser
        });
    });
    // ============================================================================
    // TESTS - RÉPONSES DU SERVICE D'AUTH EXTRÊMES
    // ============================================================================
    describe('Extreme Auth Service Responses', () => {
        it('should handle extremely large user objects', async () => {
            // Arrange
            const token = 'valid-token';
            const largeUser = createExtremeUser('maximal');
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: {
                    valid: true,
                    user: largeUser,
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            expect(request.user).toEqual(largeUser);
            expect(cacheService.set).toHaveBeenCalledWith(expect.any(String), largeUser, expect.any(Number));
        });
        it('should handle user with unicode data', async () => {
            // Arrange
            const token = 'valid-token';
            const unicodeUser = createExtremeUser('unicode');
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: {
                    valid: true,
                    user: unicodeUser,
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            expect(request.user).toEqual(unicodeUser);
        });
        it('should handle auth service returning non-JSON data', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: 'This is not JSON',
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
        });
        it('should handle auth service returning null data', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: null,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
        });
        it('should handle auth service returning undefined data', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: undefined,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
        });
        it('should handle auth service returning circular JSON', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            const circularData = { valid: true };
            circularData.self = circularData;
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: circularData,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow();
        });
        it('should handle auth service with non-standard HTTP status', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            // Statuts HTTP non-standard
            const unusualStatuses = [299, 418, 451, 599];
            for (const status of unusualStatuses) {
                httpService.post.mockReturnValue((0, rxjs_1.of)({
                    data: { valid: true, user: createExtremeUser('minimal') },
                    status,
                    statusText: `Unusual Status ${status}`,
                    headers: {},
                    config: {},
                }));
                // Act
                if (status >= 200 && status < 300) {
                    const result = await authGuard.canActivate(context);
                    expect(result).toBe(true);
                }
                else {
                    // Pour les status non-2xx, s'attendre à une erreur
                    await expect(authGuard.canActivate(context)).rejects.toThrow();
                }
            }
        });
    });
    // ============================================================================
    // TESTS - CACHE EXTRÊME
    // ============================================================================
    describe('Extreme Cache Cases', () => {
        it('should handle cache returning corrupted data', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            const corruptedData = {
                id: null,
                email: undefined,
                roles: 'not-an-array',
                __proto__: { malicious: true },
            };
            cacheService.get.mockResolvedValue(corruptedData);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: {
                    valid: true,
                    user: createExtremeUser('minimal'),
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            // Le guard doit ignorer les données corrompues et faire appel au service
            expect(httpService.post).toHaveBeenCalled();
        });
        it('should handle cache returning extremely large objects', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            const hugeUser = createExtremeUser('maximal');
            cacheService.get.mockResolvedValue(hugeUser);
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            expect(request.user).toEqual(hugeUser);
            expect(httpService.post).not.toHaveBeenCalled();
        });
        it('should handle cache timeouts gracefully', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            // Simuler un timeout de cache (promise qui ne se résout jamais)
            cacheService.get.mockReturnValue(new Promise(() => { })); // Never resolves
            const user = createExtremeUser('minimal');
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: {
                    valid: true,
                    user,
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act - Avec un timeout pour le test
            const result = await Promise.race([
                authGuard.canActivate(context),
                new Promise((_, reject) => setTimeout(() => reject(new Error('Test timeout')), 1000)),
            ]).catch(() => {
                // En cas de timeout, on teste le fallback
                cacheService.get.mockResolvedValue(null);
                return authGuard.canActivate(context);
            });
            // Assert
            expect(result).toBe(true);
        });
        it('should handle cache returning functions or objects with methods', async () => {
            // Arrange
            const token = 'valid-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            const maliciousObject = {
                id: 'user-123',
                email: 'test@example.com',
                roles: ['user'],
                maliciousMethod: () => 'hacked',
                valueOf: () => 'evil',
                toString: () => 'malicious',
            };
            cacheService.get.mockResolvedValue(maliciousObject);
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            // Vérifier que les méthodes malicieuses ne sont pas exécutées
            const injectedUser = request.user;
            expect(typeof injectedUser.maliciousMethod).toBe('function');
            // Mais l'utilisateur ne devrait pas être en mesure de les exécuter dans le contexte sécurisé
        });
    });
    // ============================================================================
    // TESTS - CONCURRENCE EXTRÊME
    // ============================================================================
    describe('Extreme Concurrency Cases', () => {
        it('should handle simultaneous requests with same token gracefully', async () => {
            // Arrange
            const token = 'concurrent-token';
            const user = createExtremeUser('minimal');
            let authServiceCallCount = 0;
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockImplementation(() => {
                authServiceCallCount++;
                return (0, rxjs_1.of)({
                    data: {
                        valid: true,
                        user,
                        expiresAt: new Date(Date.now() + 3600000).toISOString(),
                    },
                    status: 200,
                    statusText: 'OK',
                    headers: {},
                    config: {},
                });
            });
            // Act - 1000 requêtes simultanées avec le même token
            const promises = Array.from({ length: 1000 }, async () => {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                return authGuard.canActivate(context);
            });
            const results = await Promise.all(promises);
            // Assert
            expect(results.every(result => result === true)).toBe(true);
            // Sans déduplication, chaque requête fait un appel
            // Dans une vraie implémentation, on pourrait optimiser cela
            expect(authServiceCallCount).toBe(1000);
        });
        it('should handle race conditions between cache operations', async () => {
            // Arrange
            const token = 'race-token';
            const user = createExtremeUser('minimal');
            let cacheGetCallCount = 0;
            let cacheSetCallCount = 0;
            cacheService.get.mockImplementation(() => {
                cacheGetCallCount++;
                // Simuler une race condition
                if (cacheGetCallCount === 1) {
                    return Promise.resolve(null); // Premier appel: cache miss
                }
                return Promise.resolve(user); // Appels suivants: cache hit
            });
            cacheService.set.mockImplementation(() => {
                cacheSetCallCount++;
                return Promise.resolve();
            });
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: {
                    valid: true,
                    user,
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act - Plusieurs requêtes rapides
            const promises = Array.from({ length: 10 }, async () => {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                return authGuard.canActivate(context);
            });
            const results = await Promise.all(promises);
            // Assert
            expect(results.every(result => result === true)).toBe(true);
            expect(cacheGetCallCount).toBeGreaterThanOrEqual(10);
        });
        it('should handle memory pressure during high concurrency', async () => {
            // Arrange
            const user = createExtremeUser('maximal'); // Large user object
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)({
                data: {
                    valid: true,
                    user,
                    expiresAt: new Date(Date.now() + 3600000).toISOString(),
                },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: {},
            }));
            // Act - Beaucoup de requêtes avec de gros objets
            const promises = Array.from({ length: 100 }, async (_, i) => {
                const token = `memory-pressure-token-${i}`;
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                return authGuard.canActivate(context);
            });
            const results = await Promise.all(promises);
            // Assert
            expect(results.every(result => result === true)).toBe(true);
            expect(cacheService.set).toHaveBeenCalledTimes(100);
        });
    });
    // ============================================================================
    // TESTS - ÉCHECS SYSTÈME EXTRÊMES
    // ============================================================================
    describe('Extreme System Failures', () => {
        it('should handle complete system resource exhaustion', async () => {
            // Arrange
            const token = 'resource-exhaustion-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            // Simuler épuisement des ressources
            cacheService.get.mockRejectedValue(new Error('Out of memory'));
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new Error('No file descriptors available')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow();
        });
        it('should handle network partitioning', async () => {
            // Arrange
            const token = 'network-partition-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new Error('Network is unreachable')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.ServiceUnavailableException);
        });
        it('should handle DNS resolution failures', async () => {
            // Arrange
            const token = 'dns-failure-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new Error('getaddrinfo ENOTFOUND')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.ServiceUnavailableException);
        });
        it('should handle TLS/SSL certificate errors', async () => {
            // Arrange
            const token = 'ssl-error-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new Error('certificate verify failed')));
            // Act & Assert
            await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.ServiceUnavailableException);
        });
        it('should handle unexpected Observable behaviors', async () => {
            // Arrange
            const token = 'observable-edge-token';
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            // Test différents comportements d'Observable
            const observableCases = [
                rxjs_1.EMPTY, // Observable qui complete immédiatement sans émettre
                rxjs_1.NEVER, // Observable qui ne complete jamais
                (0, rxjs_1.throwError)(() => new Error('Immediate error')),
            ];
            for (const obs of observableCases) {
                httpService.post.mockReturnValue(obs);
                // Act & Assert
                await expect(authGuard.canActivate(context)).rejects.toThrow();
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,