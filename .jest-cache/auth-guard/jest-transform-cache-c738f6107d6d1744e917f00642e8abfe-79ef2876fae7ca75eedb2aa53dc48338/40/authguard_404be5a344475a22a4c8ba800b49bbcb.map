{"version":3,"names":["cov_1egijtk2j1","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","common_1","require","config_1","axios_1","crypto_1","rxjs_1","user_interface_1","cache_service_1","DEFAULT_CONFIG","cachePrefix","cacheTTL","validationTimeout","retryAttempts","retryDelay","logLevel","AuthGuard","AuthGuard_1","configService","cacheService","httpService","logger","Logger","AUTH_SERVICE_URL","CACHE_TTL","VALIDATION_TIMEOUT","constructor","get","process","env","parseInt","AUTH_SERVICE_TIMEOUT","log","canActivate","context","startTime","Date","now","user","tokenHash","cacheHit","request","getRequest","token","extractTokenFromRequest","auditAccessAttempt","Error","UnauthorizedException","hashToken","getCachedValidation","debug","substring","validateTokenWithAuthService","cacheValidation","email","injectUserIntoContext","error","handleAuthError","contextType","getType","switchToHttp","switchToWs","getClient","handshake","InternalServerErrorException","authHeader","headers","authorization","parts","split","length","warn","message","cacheKey","buildCacheKey","cachedData","isValidUser","validationUrl","response$","post","timeout","pipe","catchError","response","status","code","includes","ServiceUnavailableException","firstValueFrom","data","valid","id","roles","expiresAt","timeUntilExpiry","Math","floor","getTime","ttl","min","max","set","success","duration","auditData","event","timestamp","toISOString","userId","cachehit","validationDuration","auditError","createHash","update","digest","exports","__decorate","Injectable","ConfigService","CacheService","HttpService"],"sources":["/Users/nicolasbernard/Desktop/project-service/src/common/guards/auth.guard.ts"],"sourcesContent":["/**\n * Guard d'authentification JWT pour le Service de Gestion des Projets (C04)\n * \n * Ce guard assure la validation des tokens JWT pour toutes les routes protégées,\n * intègre un cache Redis pour optimiser les performances, et maintient un audit\n * trail complet des tentatives d'accès.\n * \n * Responsabilités :\n * - Validation des tokens JWT via le Service d'Authentification (C03)\n * - Cache intelligent des validations pour améliorer les performances\n * - Injection des informations utilisateur dans le contexte de requête\n * - Audit de sécurité et logging structuré\n * - Gestion gracieuse des erreurs et timeouts\n * \n * @fileoverview Guard principal d'authentification JWT\n * @version 1.0.0\n * @since 2025-01-28\n */\n\nimport {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n  ServiceUnavailableException,\n  InternalServerErrorException,\n  Logger,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HttpService } from '@nestjs/axios';\nimport { FastifyRequest } from 'fastify';\nimport { createHash } from 'crypto';\nimport { firstValueFrom, timeout, catchError } from 'rxjs';\nimport { AxiosError } from 'axios';\n\nimport { User, isValidUser } from '../interfaces/user.interface';\nimport { CacheService } from '../../cache/cache.service';\n\n/**\n * Interface pour la réponse du service d'authentification\n */\ninterface AuthValidationResponse {\n  valid: boolean;\n  user: {\n    id: string;\n    email: string;\n    roles: string[];\n  };\n  expiresAt: string;\n}\n\n/**\n * Interface pour les métriques d'audit\n */\ninterface AuthAuditMetrics {\n  event: 'auth_attempt';\n  success: boolean;\n  userId?: string;\n  tokenHash: string;\n  timestamp: string;\n  requestId?: string;\n  error?: string;\n  cachehit?: boolean;\n  validationDuration?: number;\n}\n\n/**\n * Configuration par défaut du guard\n */\nconst DEFAULT_CONFIG = {\n  cachePrefix: 'auth:token:',\n  cacheTTL: 300, // 5 minutes\n  validationTimeout: 5000, // 5 secondes\n  retryAttempts: 3,\n  retryDelay: 1000, // 1 seconde\n  logLevel: 'info',\n} as const;\n\n/**\n * Guard d'authentification JWT\n * \n * Implémente la validation sécurisée des tokens JWT avec cache Redis\n * pour optimiser les performances et audit complet des accès.\n */\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private readonly logger = new Logger(AuthGuard.name);\n  private readonly AUTH_SERVICE_URL: string;\n  private readonly CACHE_TTL: number;\n  private readonly VALIDATION_TIMEOUT: number;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly cacheService: CacheService,\n    private readonly httpService: HttpService,\n  ) {\n    // Utiliser ConfigService avec fallback sur process.env\n    this.AUTH_SERVICE_URL = this.configService.get<string>('AUTH_SERVICE_URL') || \n                           process.env.AUTH_SERVICE_URL || \n                           'http://localhost:3001';\n    \n    this.VALIDATION_TIMEOUT = parseInt(\n      this.configService.get<string>('AUTH_SERVICE_TIMEOUT') || \n      process.env.AUTH_SERVICE_TIMEOUT || \n      '5000', \n      10\n    );\n    \n    this.CACHE_TTL = parseInt(\n      this.configService.get<string>('CACHE_TTL') || \n      process.env.CACHE_TTL || \n      '300', \n      10\n    );\n\n    this.logger.log(`AuthGuard initialized with service URL: ${this.AUTH_SERVICE_URL}`);\n  }\n\n  /**\n   * Point d'entrée principal du guard NestJS\n   * \n   * @param context - Contexte d'exécution de la requête\n   * @returns Promise<boolean> - true si authentification réussie\n   */\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const startTime = Date.now();\n    let user: User | undefined;\n    let tokenHash = '';\n    let cacheHit = false;\n\n    try {\n      // Extraction de la requête selon le contexte (HTTP, WebSocket, etc.)\n      const request = this.getRequest(context);\n      \n      // Extraction du token JWT\n      const token = this.extractTokenFromRequest(request);\n      if (!token) {\n        await this.auditAccessAttempt('', false, undefined, new Error('Token missing'), false, Date.now() - startTime);\n        throw new UnauthorizedException('No token provided');\n      }\n\n      // Génération du hash pour le cache et l'audit\n      tokenHash = this.hashToken(token);\n\n      // Vérification du cache\n      user = await this.getCachedValidation(token);\n      if (user) {\n        cacheHit = true;\n        this.logger.debug(`Cache hit for token ${tokenHash.substring(0, 8)}...`);\n      } else {\n        // Validation via le service d'authentification\n        user = await this.validateTokenWithAuthService(token);\n        \n        // Mise en cache de la validation réussie\n        await this.cacheValidation(token, user, new Date(Date.now() + this.CACHE_TTL * 1000));\n        this.logger.debug(`Token validated and cached for ${user.email}`);\n      }\n\n      // Injection de l'utilisateur dans le contexte\n      this.injectUserIntoContext(context, user);\n\n      // Audit de la tentative réussie\n      await this.auditAccessAttempt(tokenHash, true, user, undefined, cacheHit, Date.now() - startTime);\n\n      return true;\n\n    } catch (error) {\n      // Audit de la tentative échouée\n      await this.auditAccessAttempt(tokenHash, false, user, error as Error, cacheHit, Date.now() - startTime);\n      \n      // Gestion des erreurs\n      this.handleAuthError(error, 'canActivate');\n      return false;\n    }\n  }\n\n  /**\n   * Extraction de l'objet request selon le type de contexte\n   * \n   * @param context - Contexte d'exécution\n   * @returns L'objet request\n   */\n  private getRequest(context: ExecutionContext): FastifyRequest {\n    const contextType = context.getType<'http' | 'ws'>();\n    \n    switch (contextType) {\n      case 'http':\n        return context.switchToHttp().getRequest<FastifyRequest>();\n      case 'ws':\n        // Support WebSocket si nécessaire dans le futur\n        return context.switchToWs().getClient().handshake;\n      default:\n        throw new InternalServerErrorException('Unsupported context type');\n    }\n  }\n\n  /**\n   * Extraction du token JWT depuis les headers de requête\n   * \n   * @param request - Requête Fastify\n   * @returns Token JWT ou null si absent/invalide\n   */\n  private extractTokenFromRequest(request: FastifyRequest): string | null {\n    try {\n      const authHeader = request.headers.authorization;\n      \n      if (!authHeader) {\n        return null;\n      }\n\n      // Vérification du format \"Bearer <token>\"\n      const parts = authHeader.split(' ');\n      if (parts.length !== 2 || parts[0] !== 'Bearer') {\n        this.logger.warn('Invalid authorization header format');\n        throw new Error('Invalid token format');\n      }\n\n      const token = parts[1];\n      \n      // Validation basique du token (non vide, longueur minimale)\n      if (!token || token.length < 10) {\n        this.logger.warn('Token too short or empty');\n        throw new Error('Invalid token format');\n      }\n\n      return token;\n\n    } catch (error) {\n      if (error.message === 'Invalid token format') {\n        throw error; // Propager l'erreur pour que canActivate puisse la capturer\n      }\n      this.logger.error('Error extracting token from request', error);\n      return null;\n    }\n  }\n\n  /**\n   * Recherche d'une validation en cache\n   * \n   * @param token - Token JWT à vérifier\n   * @returns Utilisateur si trouvé en cache, undefined sinon\n   */\n  private async getCachedValidation(token: string): Promise<User | undefined> {\n    try {\n      const cacheKey = this.buildCacheKey(token);\n      const cachedData = await this.cacheService.get<User>(cacheKey);\n      \n      if (cachedData && isValidUser(cachedData)) {\n        return cachedData;\n      }\n      \n      return undefined;\n\n    } catch (error) {\n      this.logger.warn('Cache retrieval failed, falling back to service validation', error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Validation du token via le Service d'Authentification (C03)\n   * \n   * @param token - Token JWT à valider\n   * @returns Utilisateur validé\n   */\n  private async validateTokenWithAuthService(token: string): Promise<User> {\n    try {\n      // URL corrigée pour correspondre aux tests\n      const validationUrl = `${this.AUTH_SERVICE_URL}/auth/validate`;\n      \n      const response$ = this.httpService.post<AuthValidationResponse>(\n        validationUrl,\n        { token },\n        {\n          timeout: this.VALIDATION_TIMEOUT,\n          headers: {\n            'Content-Type': 'application/json',\n            'User-Agent': 'project-service/1.0.0',\n          },\n        }\n      ).pipe(\n        timeout(this.VALIDATION_TIMEOUT),\n        catchError((error: AxiosError) => {\n          if (error.response?.status === 401) {\n            throw new UnauthorizedException('Invalid or expired token');\n          }\n          \n          // Améliorer la détection des erreurs de connexion et timeout\n          if (error.code === 'ECONNREFUSED' || \n              error.code === 'ENOTFOUND' || \n              error.message?.includes('timeout') ||\n              error.name === 'TimeoutError') {\n            throw new ServiceUnavailableException('Authentication service unavailable');\n          }\n          \n          // Pour les erreurs 400 (malformed), garder UnauthorizedException\n          if (error.response?.status === 400) {\n            throw new UnauthorizedException('Invalid token format');\n          }\n          \n          throw new InternalServerErrorException('Authentication service error');\n        })\n      );\n\n      const response = await firstValueFrom(response$);\n      const data = response.data;\n\n      // Validation de la réponse\n      if (!data.valid || !data.user) {\n        throw new UnauthorizedException('Token validation failed');\n      }\n\n      // Construction de l'objet User\n      const user: User = {\n        id: data.user.id,\n        email: data.user.email,\n        roles: data.user.roles || [],\n      };\n\n      // Validation finale de l'objet User - changer le type d'exception\n      if (!isValidUser(user)) {\n        throw new UnauthorizedException('Invalid user data received from auth service');\n      }\n\n      return user;\n\n    } catch (error) {\n      if (error instanceof UnauthorizedException || \n          error instanceof ServiceUnavailableException || \n          error instanceof InternalServerErrorException) {\n        throw error;\n      }\n      \n      this.logger.error('Unexpected error during token validation', error);\n      throw new UnauthorizedException('Authentication failed');\n    }\n  }\n\n  /**\n   * Mise en cache de la validation réussie\n   * \n   * @param token - Token JWT\n   * @param user - Utilisateur validé\n   * @param expiresAt - Date d'expiration du token\n   */\n  private async cacheValidation(token: string, user: User, expiresAt: Date): Promise<void> {\n    try {\n      const cacheKey = this.buildCacheKey(token);\n      \n      // Calcul du TTL intelligent basé sur l'expiration du token\n      const timeUntilExpiry = Math.floor((expiresAt.getTime() - Date.now()) / 1000);\n      const ttl = Math.min(this.CACHE_TTL, Math.max(timeUntilExpiry, 60)); // Min 1 minute\n\n      await this.cacheService.set(cacheKey, user, ttl);\n      \n    } catch (error) {\n      // Cache non critique - on log mais on ne bloque pas\n      this.logger.warn('Failed to cache token validation', error);\n    }\n  }\n\n  /**\n   * Injection de l'utilisateur dans le contexte de requête\n   * \n   * @param context - Contexte d'exécution\n   * @param user - Utilisateur à injecter\n   */\n  private injectUserIntoContext(context: ExecutionContext, user: User): void {\n    try {\n      const request = this.getRequest(context);\n      \n      // Injection pour utilisation par le décorateur @CurrentUser()\n      (request as any).user = user;\n      \n    } catch (error) {\n      this.logger.error('Failed to inject user into context', error);\n      throw new InternalServerErrorException('Context injection failed');\n    }\n  }\n\n  /**\n   * Audit des tentatives d'accès pour la sécurité et le monitoring\n   * \n   * @param tokenHash - Hash du token (pour la sécurité)\n   * @param success - Succès ou échec de l'authentification\n   * @param user - Utilisateur (si authentification réussie)\n   * @param error - Erreur (si authentification échouée)\n   * @param cacheHit - Indicateur de cache hit\n   * @param duration - Durée de validation en ms\n   */\n  private async auditAccessAttempt(\n    tokenHash: string,\n    success: boolean,\n    user?: User,\n    error?: Error,\n    cacheHit?: boolean,\n    duration?: number\n  ): Promise<void> {\n    try {\n      const auditData: AuthAuditMetrics = {\n        event: 'auth_attempt',\n        success,\n        tokenHash: tokenHash.substring(0, 16), // Premiers 16 caractères pour l'audit\n        timestamp: new Date().toISOString(),\n        userId: user?.id,\n        error: error?.message,\n        cachehit: cacheHit,\n        validationDuration: duration,\n      };\n\n      if (success) {\n        this.logger.log(`✅ Authentication successful for user ${user?.email}`, auditData);\n      } else {\n        this.logger.warn(`❌ Authentication failed: ${error?.message}`, auditData);\n      }\n\n      // TODO: Optionnellement envoyer vers un service d'audit externe\n      // await this.auditService.logSecurityEvent(auditData);\n\n    } catch (auditError) {\n      // L'audit ne doit jamais bloquer l'authentification\n      this.logger.error('Audit logging failed', auditError);\n    }\n  }\n\n  /**\n   * Gestion centralisée des erreurs d'authentification\n   * \n   * @param error - Erreur à traiter\n   * @param context - Contexte où l'erreur s'est produite\n   */\n  private handleAuthError(error: any, context: string): never {\n    // Gestion spéciale pour les erreurs de format de token\n    if (error.message === 'Invalid token format') {\n      throw new UnauthorizedException('Invalid token format');\n    }\n\n    // Classification et transformation des erreurs\n    if (error instanceof UnauthorizedException || \n        error instanceof ServiceUnavailableException || \n        error instanceof InternalServerErrorException) {\n      throw error;\n    }\n\n    // Erreurs inattendues\n    this.logger.error(`Unexpected authentication error in ${context}`, error);\n    \n    // Ne pas leak d'informations sensibles\n    throw new UnauthorizedException('Authentication failed');\n  }\n\n  /**\n   * Construction de la clé de cache sécurisée\n   * \n   * @param token - Token JWT\n   * @returns Clé de cache hashée\n   */\n  private buildCacheKey(token: string): string {\n    const hash = this.hashToken(token);\n    return `${DEFAULT_CONFIG.cachePrefix}${hash}`;\n  }\n\n  /**\n   * Génération d'un hash SHA-256 du token pour la sécurité\n   * \n   * @param token - Token à hasher\n   * @returns Hash SHA-256 en hexadécimal\n   */\n  private hashToken(token: string): string {\n    return createHash('sha256').update(token).digest('hex');\n  }\n}"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;AAAA;AAAA,SAAAA,ecAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAA5B,IAAA;EAAA;EAAA,IAAA6B,QAAA,GAAA5B,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAA0B,QAAA,CAAA9B,IAAA,KAAA8B,QAAA,CAAA9B,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAA6B,QAAA,CAAA9B,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAA0B,cAAA,GAAAD,QAAA,CAAA9B,IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAAgC,QAAA;AAAA;AAAA,CAAAjC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AASA,MAAAC,QAAA;AAAA;AAAA,CAAAnC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AACA,MAAAE,OAAA;AAAA;AAAA,CAAApC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AAEA,MAAAG,QAAA;AAAA;AAAA,CAAArC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AACA,MAAAI,MAAA;AAAA;AAAA,CAAAtC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AAGA,MAAAK,gBAAA;AAAA;AAAA,CAAAvC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AACA,MAAAM,eAAA;AAAA;AAAA,CAAAxC,cAAA,GAAAoB,CAAA,QAAAc,OAAA;AA8BA;;;AAGA,MAAMO,cAAc;AAAA;AAAA,CAAAzC,cAAA,GAAAoB,CAAA,QAAG;EACrBsB,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,GAAG;EAAE;EACfC,iBAAiB,EAAE,IAAI;EAAE;EACzBC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE,IAAI;EAAE;EAClBC,QAAQ,EAAE;CACF;AAEV;;;;;;AAOO,IAAMC,SAAS;AAAA;AAAA,CAAAhD,cAAA,GAAAoB,CAAA,QAAA6B,WAAA,GAAf,MAAMD,SAAS;EAODE,aAAA;EACAC,YAAA;EACAC,WAAA;EARFC,MAAM;EAAA;EAAA,CAAArD,cAAA,GAAAoB,CAAA,QAAG,IAAIa,QAAA,CAAAqB,MAAM,CAACL,WAAS,CAACpC,IAAI,CAAC;EACnC0C,gBAAgB;EAChBC,SAAS;EACTC,kBAAkB;EAEnCC,YACmBR,aAA4B,EAC5BC,YAA0B,EAC1BC,WAAwB;IAAA;IAAApD,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAFxB,KAAA8B,aAAa,GAAbA,aAAa;IAAe;IAAAlD,cAAA,GAAAoB,CAAA;IAC5B,KAAA+B,YAAY,GAAZA,YAAY;IAAc;IAAAnD,cAAA,GAAAoB,CAAA;IAC1B,KAAAgC,WAAW,GAAXA,WAAW;IAE5B;IAAA;IAAApD,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACmC,gBAAgB;IAAG;IAAA,CAAAvD,cAAA,GAAAsB,CAAA,eAAI,CAAC4B,aAAa,CAACS,GAAG,CAAS,kBAAkB,CAAC;IAAA;IAAA,CAAA3D,cAAA,GAAAsB,CAAA,WACnDsC,OAAO,CAACC,GAAG,CAACN,gBAAgB;IAAA;IAAA,CAAAvD,cAAA,GAAAsB,CAAA,WAC5B,uBAAuB;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAE/C,IAAI,CAACqC,kBAAkB,GAAGK,QAAQ;IAChC;IAAA,CAAA9D,cAAA,GAAAsB,CAAA,eAAI,CAAC4B,aAAa,CAACS,GAAG,CAAS,sBAAsB,CAAC;IAAA;IAAA,CAAA3D,cAAA,GAAAsB,CAAA,WACtDsC,OAAO,CAACC,GAAG,CAACE,oBAAoB;IAAA;IAAA,CAAA/D,cAAA,GAAAsB,CAAA,WAChC,MAAM,GACN,EAAE,CACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAEF,IAAI,CAACoC,SAAS,GAAGM,QAAQ;IACvB;IAAA,CAAA9D,cAAA,GAAAsB,CAAA,eAAI,CAAC4B,aAAa,CAACS,GAAG,CAAS,WAAW,CAAC;IAAA;IAAA,CAAA3D,cAAA,GAAAsB,CAAA,WAC3CsC,OAAO,CAACC,GAAG,CAACL,SAAS;IAAA;IAAA,CAAAxD,cAAA,GAAAsB,CAAA,WACrB,KAAK,GACL,EAAE,CACH;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAEF,IAAI,CAACiC,MAAM,CAACW,GAAG,CAAC,2CAA2C,IAAI,CAACT,gBAAgB,EAAE,CAAC;EACrF;EAEA;;;;;;EAMA,MAAMU,WAAWA,CAACC,OAAyB;IAAA;IAAAlE,cAAA,GAAAqB,CAAA;IACzC,MAAM8C,SAAS;IAAA;IAAA,CAAAnE,cAAA,GAAAoB,CAAA,QAAGgD,IAAI,CAACC,GAAG,EAAE;IAC5B,IAAIC,IAAsB;IAC1B,IAAIC,SAAS;IAAA;IAAA,CAAAvE,cAAA,GAAAoB,CAAA,QAAG,EAAE;IAClB,IAAIoD,QAAQ;IAAA;IAAA,CAAAxE,cAAA,GAAAoB,CAAA,QAAG,KAAK;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAErB,IAAI;MACF;MACA,MAAMqD,OAAO;MAAA;MAAA,CAAAzE,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACsD,UAAU,CAACR,OAAO,CAAC;MAExC;MACA,MAAMS,KAAK;MAAA;MAAA,CAAA3E,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACwD,uBAAuB,CAACH,OAAO,CAAC;MAAC;MAAAzE,cAAA,GAAAoB,CAAA;MACpD,IAAI,CAACuD,KAAK,EAAE;QAAA;QAAA3E,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACV,MAAM,IAAI,CAACyD,kBAAkB,CAAC,EAAE,EAAE,KAAK,EAAE1D,SAAS,EAAE,IAAI2D,KAAK,CAAC,eAAe,CAAC,EAAE,KAAK,EAAEV,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS,CAAC;QAAC;QAAAnE,cAAA,GAAAoB,CAAA;QAC/G,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,mBAAmB,CAAC;MACtD,CAAC;MAAA;MAAA;QAAA/E,cAAA,GAAAsB,CAAA;MAAA;MAED;MAAAtB,cAAA,GAAAoB,CAAA;MACAmD,SAAS,GAAG,IAAI,CAACS,SAAS,CAACL,KAAK,CAAC;MAEjC;MAAA;MAAA3E,cAAA,GAAAoB,CAAA;MACAkD,IAAI,GAAG,MAAM,IAAI,CAACW,mBAAmB,CAACN,KAAK,CAAC;MAAC;MAAA3E,cAAA,GAAAoB,CAAA;MAC7C,IAAIkD,IAAI,EAAE;QAAA;QAAAtE,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACRoD,QAAQ,GAAG,IAAI;QAAC;QAAAxE,cAAA,GAAAoB,CAAA;QAChB,IAAI,CAACiC,MAAM,CAAC6B,KAAK,CAAC,uBAAuBX,SAAS,CAACY,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;MAC1E,CAAC,MAAM;QAAA;QAAAnF,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACL;QACAkD,IAAI,GAAG,MAAM,IAAI,CAACc,4BAA4B,CAACT,KAAK,CAAC;QAErD;QAAA;QAAA3E,cAAA,GAAAoB,CAAA;QACA,MAAM,IAAI,CAACiE,eAAe,CAACV,KAAK,EAAEL,IAAI,EAAE,IAAIF,IAAI,CAACA,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACb,SAAS,GAAG,IAAI,CAAC,CAAC;QAAC;QAAAxD,cAAA,GAAAoB,CAAA;QACtF,IAAI,CAACiC,MAAM,CAAC6B,KAAK,CAAC,kCAAkCZ,IAAI,CAACgB,KAAK,EAAE,CAAC;MACnE;MAEA;MAAA;MAAAtF,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACmE,qBAAqB,CAACrB,OAAO,EAAEI,IAAI,CAAC;MAEzC;MAAA;MAAAtE,cAAA,GAAAoB,CAAA;MACA,MAAM,IAAI,CAACyD,kBAAkB,CAACN,SAAS,EAAE,IAAI,EAAED,IAAI,EAAEnD,SAAS,EAAEqD,QAAQ,EAAEJ,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS,CAAC;MAAC;MAAAnE,cAAA,GAAAoB,CAAA;MAElG,OAAO,IAAI;IAEb,CAAC,CAAC,OAAOoE,KAAK,EAAE;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MACd;MACA,MAAM,IAAI,CAACyD,kBAAkB,CAACN,SAAS,EAAE,KAAK,EAAED,IAAI,EAAEkB,KAAc,EAAEhB,QAAQ,EAAEJ,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS,CAAC;MAEvG;MAAA;MAAAnE,cAAA,GAAAoB,CAAA;MACA,IAAI,CAACqE,eAAe,CAACD,KAAK,EAAE,aAAa,CAAC;MAAC;MAAAxF,cAAA,GAAAoB,CAAA;MAC3C,OAAO,KAAK;IACd;EACF;EAEA;;;;;;EAMQsD,UAAUA,CAACR,OAAyB;IAAA;IAAAlE,cAAA,GAAAqB,CAAA;IAC1C,MAAMqE,WAAW;IAAA;IAAA,CAAA1F,cAAA,GAAAoB,CAAA,QAAG8C,OAAO,CAACyB,OAAO,EAAiB;IAAC;IAAA3F,cAAA,GAAAoB,CAAA;IAErD,QAAQsE,WAAW;MACjB,KAAK,MAAM;QAAA;QAAA1F,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACT,OAAO8C,OAAO,CAAC0B,YAAY,EAAE,CAAClB,UAAU,EAAkB;MAC5D,KAAK,IAAI;QAAA;QAAA1E,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACP;QACA,OAAO8C,OAAO,CAAC2B,UAAU,EAAE,CAACC,SAAS,EAAE,CAACC,SAAS;MACnD;QAAA;QAAA/F,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACE,MAAM,IAAIa,QAAA,CAAA+D,4BAA4B,CAAC,0BAA0B,CAAC;IACtE;EACF;EAEA;;;;;;EAMQpB,uBAAuBA,CAACH,OAAuB;IAAA;IAAAzE,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACrD,IAAI;MACF,MAAM6E,UAAU;MAAA;MAAA,CAAAjG,cAAA,GAAAoB,CAAA,QAAGqD,OAAO,CAACyB,OAAO,CAACC,aAAa;MAAC;MAAAnG,cAAA,GAAAoB,CAAA;MAEjD,IAAI,CAAC6E,UAAU,EAAE;QAAA;QAAAjG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACf,OAAO,IAAI;MACb,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAM8E,KAAK;MAAA;MAAA,CAAApG,cAAA,GAAAoB,CAAA,QAAG6E,UAAU,CAACI,KAAK,CAAC,GAAG,CAAC;MAAC;MAAArG,cAAA,GAAAoB,CAAA;MACpC;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAA8E,KAAK,CAACE,MAAM,KAAK,CAAC;MAAA;MAAA,CAAAtG,cAAA,GAAAsB,CAAA,WAAI8E,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAE;QAAA;QAAApG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC/C,IAAI,CAACiC,MAAM,CAACkD,IAAI,CAAC,qCAAqC,CAAC;QAAC;QAAAvG,cAAA,GAAAoB,CAAA;QACxD,MAAM,IAAI0D,KAAK,CAAC,sBAAsB,CAAC;MACzC,CAAC;MAAA;MAAA;QAAA9E,cAAA,GAAAsB,CAAA;MAAA;MAED,MAAMqD,KAAK;MAAA;MAAA,CAAA3E,cAAA,GAAAoB,CAAA,QAAGgF,KAAK,CAAC,CAAC,CAAC;MAEtB;MAAA;MAAApG,cAAA,GAAAoB,CAAA;MACA;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,YAACqD,KAAK;MAAA;MAAA,CAAA3E,cAAA,GAAAsB,CAAA,WAAIqD,KAAK,CAAC2B,MAAM,GAAG,EAAE,GAAE;QAAA;QAAAtG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC/B,IAAI,CAACiC,MAAM,CAACkD,IAAI,CAAC,0BAA0B,CAAC;QAAC;QAAAvG,cAAA,GAAAoB,CAAA;QAC7C,MAAM,IAAI0D,KAAK,CAAC,sBAAsB,CAAC;MACzC,CAAC;MAAA;MAAA;QAAA9E,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAED,OAAOuD,KAAK;IAEd,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MACd,IAAIoE,KAAK,CAACgB,OAAO,KAAK,sBAAsB,EAAE;QAAA;QAAAxG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC5C,MAAMoE,KAAK,CAAC,CAAC;MACf,CAAC;MAAA;MAAA;QAAAxF,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACD,IAAI,CAACiC,MAAM,CAACmC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAAC;MAAAxF,cAAA,GAAAoB,CAAA;MAChE,OAAO,IAAI;IACb;EACF;EAEA;;;;;;EAMQ,MAAM6D,mBAAmBA,CAACN,KAAa;IAAA;IAAA3E,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC7C,IAAI;MACF,MAAMqF,QAAQ;MAAA;MAAA,CAAAzG,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACsF,aAAa,CAAC/B,KAAK,CAAC;MAC1C,MAAMgC,UAAU;MAAA;MAAA,CAAA3G,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAI,CAAC+B,YAAY,CAACQ,GAAG,CAAO8C,QAAQ,CAAC;MAAC;MAAAzG,cAAA,GAAAoB,CAAA;MAE/D;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAqF,UAAU;MAAA;MAAA,CAAA3G,cAAA,GAAAsB,CAAA,WAAI,IAAAiB,gBAAA,CAAAqE,WAAW,EAACD,UAAU,CAAC,GAAE;QAAA;QAAA3G,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACzC,OAAOuF,UAAU;MACnB,CAAC;MAAA;MAAA;QAAA3G,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAED,OAAOD,SAAS;IAElB,CAAC,CAAC,OAAOqE,KAAK,EAAE;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MACd,IAAI,CAACiC,MAAM,CAACkD,IAAI,CAAC,4DAA4D,EAAEf,KAAK,CAAC;MAAC;MAAAxF,cAAA,GAAAoB,CAAA;MACtF,OAAOD,SAAS;IAClB;EACF;EAEA;;;;;;EAMQ,MAAMiE,4BAA4BA,CAACT,KAAa;IAAA;IAAA3E,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACtD,IAAI;MACF;MACA,MAAMyF,aAAa;MAAA;MAAA,CAAA7G,cAAA,GAAAoB,CAAA,QAAG,GAAG,IAAI,CAACmC,gBAAgB,gBAAgB;MAE9D,MAAMuD,SAAS;MAAA;MAAA,CAAA9G,cAAA,GAAAoB,CAAA,QAAG,IAAI,CAACgC,WAAW,CAAC2D,IAAI,CACrCF,aAAa,EACb;QAAElC;MAAK,CAAE,EACT;QACEqC,OAAO,EAAE,IAAI,CAACvD,kBAAkB;QAChCyC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,YAAY,EAAE;;OAEjB,CACF,CAACe,IAAI,CACJ,IAAA3E,MAAA,CAAA0E,OAAO,EAAC,IAAI,CAACvD,kBAAkB,CAAC,EAChC,IAAAnB,MAAA,CAAA4E,UAAU,EAAE1B,KAAiB,IAAI;QAAA;QAAAxF,cAAA,GAAAqB,CAAA;QAAArB,cAAA,GAAAoB,CAAA;QAC/B,IAAIoE,KAAK,CAAC2B,QAAQ,EAAEC,MAAM,KAAK,GAAG,EAAE;UAAA;UAAApH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAClC,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,0BAA0B,CAAC;QAC7D,CAAC;QAAA;QAAA;UAAA/E,cAAA,GAAAsB,CAAA;QAAA;QAED;QAAAtB,cAAA,GAAAoB,CAAA;QACA;QAAI;QAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAkE,KAAK,CAAC6B,IAAI,KAAK,cAAc;QAAA;QAAA,CAAArH,cAAA,GAAAsB,CAAA,WAC7BkE,KAAK,CAAC6B,IAAI,KAAK,WAAW;QAAA;QAAA,CAAArH,cAAA,GAAAsB,CAAA,WAC1BkE,KAAK,CAACgB,OAAO,EAAEc,QAAQ,CAAC,SAAS,CAAC;QAAA;QAAA,CAAAtH,cAAA,GAAAsB,CAAA,WAClCkE,KAAK,CAAC3E,IAAI,KAAK,cAAc,GAAE;UAAA;UAAAb,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UACjC,MAAM,IAAIa,QAAA,CAAAsF,2BAA2B,CAAC,oCAAoC,CAAC;QAC7E,CAAC;QAAA;QAAA;UAAAvH,cAAA,GAAAsB,CAAA;QAAA;QAED;QAAAtB,cAAA,GAAAoB,CAAA;QACA,IAAIoE,KAAK,CAAC2B,QAAQ,EAAEC,MAAM,KAAK,GAAG,EAAE;UAAA;UAAApH,cAAA,GAAAsB,CAAA;UAAAtB,cAAA,GAAAoB,CAAA;UAClC,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,sBAAsB,CAAC;QACzD,CAAC;QAAA;QAAA;UAAA/E,cAAA,GAAAsB,CAAA;QAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAED,MAAM,IAAIa,QAAA,CAAA+D,4BAA4B,CAAC,8BAA8B,CAAC;MACxE,CAAC,CAAC,CACH;MAED,MAAMmB,QAAQ;MAAA;MAAA,CAAAnH,cAAA,GAAAoB,CAAA,QAAG,MAAM,IAAAkB,MAAA,CAAAkF,cAAc,EAACV,SAAS,CAAC;MAChD,MAAMW,IAAI;MAAA;MAAA,CAAAzH,cAAA,GAAAoB,CAAA,QAAG+F,QAAQ,CAACM,IAAI;MAE1B;MAAA;MAAAzH,cAAA,GAAAoB,CAAA;MACA;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,YAACmG,IAAI,CAACC,KAAK;MAAA;MAAA,CAAA1H,cAAA,GAAAsB,CAAA,WAAI,CAACmG,IAAI,CAACnD,IAAI,GAAE;QAAA;QAAAtE,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QAC7B,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,yBAAyB,CAAC;MAC5D,CAAC;MAAA;MAAA;QAAA/E,cAAA,GAAAsB,CAAA;MAAA;MAED;MACA,MAAMgD,IAAI;MAAA;MAAA,CAAAtE,cAAA,GAAAoB,CAAA,QAAS;QACjBuG,EAAE,EAAEF,IAAI,CAACnD,IAAI,CAACqD,EAAE;QAChBrC,KAAK,EAAEmC,IAAI,CAACnD,IAAI,CAACgB,KAAK;QACtBsC,KAAK;QAAE;QAAA,CAAA5H,cAAA,GAAAsB,CAAA,WAAAmG,IAAI,CAACnD,IAAI,CAACsD,KAAK;QAAA;QAAA,CAAA5H,cAAA,GAAAsB,CAAA,WAAI,EAAE;OAC7B;MAED;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACA,IAAI,CAAC,IAAAmB,gBAAA,CAAAqE,WAAW,EAACtC,IAAI,CAAC,EAAE;QAAA;QAAAtE,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACtB,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,8CAA8C,CAAC;MACjF,CAAC;MAAA;MAAA;QAAA/E,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAED,OAAOkD,IAAI;IAEb,CAAC,CAAC,OAAOkB,KAAK,EAAE;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MACd;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAkE,KAAK,YAAYvD,QAAA,CAAA8C,qBAAqB;MAAA;MAAA,CAAA/E,cAAA,GAAAsB,CAAA,WACtCkE,KAAK,YAAYvD,QAAA,CAAAsF,2BAA2B;MAAA;MAAA,CAAAvH,cAAA,GAAAsB,CAAA,WAC5CkE,KAAK,YAAYvD,QAAA,CAAA+D,4BAA4B,GAAE;QAAA;QAAAhG,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACjD,MAAMoE,KAAK;MACb,CAAC;MAAA;MAAA;QAAAxF,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAED,IAAI,CAACiC,MAAM,CAACmC,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAAC;MAAAxF,cAAA,GAAAoB,CAAA;MACrE,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,uBAAuB,CAAC;IAC1D;EACF;EAEA;;;;;;;EAOQ,MAAMM,eAAeA,CAACV,KAAa,EAAEL,IAAU,EAAEuD,SAAe;IAAA;IAAA7H,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACtE,IAAI;MACF,MAAMqF,QAAQ;MAAA;MAAA,CAAAzG,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACsF,aAAa,CAAC/B,KAAK,CAAC;MAE1C;MACA,MAAMmD,eAAe;MAAA;MAAA,CAAA9H,cAAA,GAAAoB,CAAA,SAAG2G,IAAI,CAACC,KAAK,CAAC,CAACH,SAAS,CAACI,OAAO,EAAE,GAAG7D,IAAI,CAACC,GAAG,EAAE,IAAI,IAAI,CAAC;MAC7E,MAAM6D,GAAG;MAAA;MAAA,CAAAlI,cAAA,GAAAoB,CAAA,SAAG2G,IAAI,CAACI,GAAG,CAAC,IAAI,CAAC3E,SAAS,EAAEuE,IAAI,CAACK,GAAG,CAACN,eAAe,EAAE,EAAE,CAAC,CAAC,EAAC,CAAC;MAAA;MAAA9H,cAAA,GAAAoB,CAAA;MAErE,MAAM,IAAI,CAAC+B,YAAY,CAACkF,GAAG,CAAC5B,QAAQ,EAAEnC,IAAI,EAAE4D,GAAG,CAAC;IAElD,CAAC,CAAC,OAAO1C,KAAK,EAAE;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MACd;MACA,IAAI,CAACiC,MAAM,CAACkD,IAAI,CAAC,kCAAkC,EAAEf,KAAK,CAAC;IAC7D;EACF;EAEA;;;;;;EAMQD,qBAAqBA,CAACrB,OAAyB,EAAEI,IAAU;IAAA;IAAAtE,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjE,IAAI;MACF,MAAMqD,OAAO;MAAA;MAAA,CAAAzE,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAACsD,UAAU,CAACR,OAAO,CAAC;MAExC;MAAA;MAAAlE,cAAA,GAAAoB,CAAA;MACCqD,OAAe,CAACH,IAAI,GAAGA,IAAI;IAE9B,CAAC,CAAC,OAAOkB,KAAK,EAAE;MAAA;MAAAxF,cAAA,GAAAoB,CAAA;MACd,IAAI,CAACiC,MAAM,CAACmC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAAC;MAAAxF,cAAA,GAAAoB,CAAA;MAC/D,MAAM,IAAIa,QAAA,CAAA+D,4BAA4B,CAAC,0BAA0B,CAAC;IACpE;EACF;EAEA;;;;;;;;;;EAUQ,MAAMnB,kBAAkBA,CAC9BN,SAAiB,EACjB+D,OAAgB,EAChBhE,IAAW,EACXkB,KAAa,EACbhB,QAAkB,EAClB+D,QAAiB;IAAA;IAAAvI,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAEjB,IAAI;MACF,MAAMoH,SAAS;MAAA;MAAA,CAAAxI,cAAA,GAAAoB,CAAA,SAAqB;QAClCqH,KAAK,EAAE,cAAc;QACrBH,OAAO;QACP/D,SAAS,EAAEA,SAAS,CAACY,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QAAE;QACvCuD,SAAS,EAAE,IAAItE,IAAI,EAAE,CAACuE,WAAW,EAAE;QACnCC,MAAM,EAAEtE,IAAI,EAAEqD,EAAE;QAChBnC,KAAK,EAAEA,KAAK,EAAEgB,OAAO;QACrBqC,QAAQ,EAAErE,QAAQ;QAClBsE,kBAAkB,EAAEP;OACrB;MAAC;MAAAvI,cAAA,GAAAoB,CAAA;MAEF,IAAIkH,OAAO,EAAE;QAAA;QAAAtI,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACX,IAAI,CAACiC,MAAM,CAACW,GAAG,CAAC,wCAAwCM,IAAI,EAAEgB,KAAK,EAAE,EAAEkD,SAAS,CAAC;MACnF,CAAC,MAAM;QAAA;QAAAxI,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACL,IAAI,CAACiC,MAAM,CAACkD,IAAI,CAAC,4BAA4Bf,KAAK,EAAEgB,OAAO,EAAE,EAAEgC,SAAS,CAAC;MAC3E;MAEA;MACA;IAEF,CAAC,CAAC,OAAOO,UAAU,EAAE;MAAA;MAAA/I,cAAA,GAAAoB,CAAA;MACnB;MACA,IAAI,CAACiC,MAAM,CAACmC,KAAK,CAAC,sBAAsB,EAAEuD,UAAU,CAAC;IACvD;EACF;EAEA;;;;;;EAMQtD,eAAeA,CAACD,KAAU,EAAEtB,OAAe;IAAA;IAAAlE,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IACjD;IACA,IAAIoE,KAAK,CAACgB,OAAO,KAAK,sBAAsB,EAAE;MAAA;MAAAxG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC5C,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,sBAAsB,CAAC;IACzD,CAAC;IAAA;IAAA;MAAA/E,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA;IAAI;IAAA,CAAApB,cAAA,GAAAsB,CAAA,WAAAkE,KAAK,YAAYvD,QAAA,CAAA8C,qBAAqB;IAAA;IAAA,CAAA/E,cAAA,GAAAsB,CAAA,WACtCkE,KAAK,YAAYvD,QAAA,CAAAsF,2BAA2B;IAAA;IAAA,CAAAvH,cAAA,GAAAsB,CAAA,WAC5CkE,KAAK,YAAYvD,QAAA,CAAA+D,4BAA4B,GAAE;MAAA;MAAAhG,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MACjD,MAAMoE,KAAK;IACb,CAAC;IAAA;IAAA;MAAAxF,cAAA,GAAAsB,CAAA;IAAA;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACA,IAAI,CAACiC,MAAM,CAACmC,KAAK,CAAC,sCAAsCtB,OAAO,EAAE,EAAEsB,KAAK,CAAC;IAEzE;IAAA;IAAAxF,cAAA,GAAAoB,CAAA;IACA,MAAM,IAAIa,QAAA,CAAA8C,qBAAqB,CAAC,uBAAuB,CAAC;EAC1D;EAEA;;;;;;EAMQ2B,aAAaA,CAAC/B,KAAa;IAAA;IAAA3E,cAAA,GAAAqB,CAAA;IACjC,MAAMnB,IAAI;IAAA;IAAA,CAAAF,cAAA,GAAAoB,CAAA,SAAG,IAAI,CAAC4D,SAAS,CAACL,KAAK,CAAC;IAAC;IAAA3E,cAAA,GAAAoB,CAAA;IACnC,OAAO,GAAGqB,cAAc,CAACC,WAAW,GAAGxC,IAAI,EAAE;EAC/C;EAEA;;;;;;EAMQ8E,SAASA,CAACL,KAAa;IAAA;IAAA3E,cAAA,GAAAqB,CAAA;IAAArB,cAAA,GAAAoB,CAAA;IAC7B,OAAO,IAAAiB,QAAA,CAAA2G,UAAU,EAAC,QAAQ,CAAC,CAACC,MAAM,CAACtE,KAAK,CAAC,CAACuE,MAAM,CAAC,KAAK,CAAC;EACzD;CACD;AAAA;AAAAlJ,cAAA,GAAAoB,CAAA;AAlYY+H,OAAA,CAAAnG,SAAA,GAAAA,SAAA;AAAS;AAAAhD,cAAA,GAAAoB,CAAA;oBAAT4B,SAAS,GAAAC,WAAA,GAAAmG,UAAA,EADrB,IAAAnH,QAAA,CAAAoH,UAAU,GAAE,E,iCAQuBlH,QAAA,CAAAmH,aAAa,EACd9G,eAAA,CAAA+G,YAAY,EACbnH,OAAA,CAAAoH,WAAW,G,EAThCxG,SAAS,CAkYrB","ignoreList":[]}