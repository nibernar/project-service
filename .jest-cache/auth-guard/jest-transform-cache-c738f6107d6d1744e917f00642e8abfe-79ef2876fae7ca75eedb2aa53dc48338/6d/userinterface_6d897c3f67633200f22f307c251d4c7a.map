{"file":"/Users/nicolasbernard/Desktop/project-service/src/common/interfaces/user.interface.ts","mappings":"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","names":[],"sources":["/Users/nicolasbernard/Desktop/project-service/src/common/interfaces/user.interface.ts"],"sourcesContent":["/**\n * Interface utilisateur pour le Service de Gestion des Projets (C04)\n * \n * Définit la structure standardisée des données utilisateur extraites des tokens JWT.\n * Cette interface assure la cohérence des informations utilisateur à travers l'application\n * et facilite l'intégration avec le service d'authentification (C03).\n * \n * @fileoverview Interface principale pour les données utilisateur\n * @version 1.0.0\n * @since 2025-01-28\n */\n\n/**\n * Énumération des rôles utilisateur disponibles dans le système\n * \n * @enum {string}\n */\nexport enum UserRole {\n  /** Utilisateur standard avec accès aux fonctionnalités de base */\n  USER = 'user',\n  \n  /** Administrateur avec accès aux fonctionnalités d'administration */\n  ADMIN = 'admin',\n  \n  /** Utilisateur premium avec accès aux fonctionnalités avancées */\n  PREMIUM = 'premium',\n}\n\n/**\n * Interface principale représentant un utilisateur authentifié\n * \n * Cette interface contient les informations minimales nécessaires\n * pour identifier et autoriser un utilisateur dans le système.\n * \n * @interface User\n */\nexport interface User {\n  /**\n   * Identifiant unique de l'utilisateur (UUID)\n   * \n   * Utilisé comme clé primaire pour l'isolation des données\n   * et comme référence dans les entités Project (ownerId).\n   * \n   * @type {string}\n   * @format uuid\n   * @example \"123e4567-e89b-12d3-a456-426614174000\"\n   */\n  id: string;\n\n  /**\n   * Adresse email de l'utilisateur\n   * \n   * Sert d'identifiant humain pour l'affichage et l'audit.\n   * Doit être unique dans le système.\n   * \n   * @type {string}\n   * @format email\n   * @example \"user@example.com\"\n   */\n  email: string;\n\n  /**\n   * Liste des rôles attribués à l'utilisateur\n   * \n   * Utilisé pour le contrôle d'accès granulaire et la limitation\n   * des fonctionnalités selon l'abonnement.\n   * \n   * @type {string[]}\n   * @example [\"user\"] | [\"admin\"] | [\"user\", \"premium\"]\n   */\n  roles: string[];\n}\n\n/**\n * Type de garde pour un utilisateur avec un rôle spécifique\n * \n * Permet de créer des types plus stricts pour les fonctions\n * nécessitant des rôles particuliers.\n * \n * @template T - Le rôle requis\n */\nexport type UserWithRole<T extends UserRole> = User & {\n  roles: T[];\n};\n\n/**\n * Type pour un utilisateur administrateur\n * \n * @typedef {UserWithRole<UserRole.ADMIN>} AdminUser\n */\nexport type AdminUser = UserWithRole<UserRole.ADMIN>;\n\n/**\n * Type pour un utilisateur premium\n * \n * @typedef {UserWithRole<UserRole.PREMIUM>} PremiumUser\n */\nexport type PremiumUser = UserWithRole<UserRole.PREMIUM>;\n\n/**\n * Interface des préférences utilisateur\n * \n * Définit les préférences personnalisables par l'utilisateur\n * pour adapter l'expérience de la plateforme.\n * \n * @interface UserPreferences\n */\nexport interface UserPreferences {\n  /** \n   * Langue préférée de l'utilisateur (code ISO 639-1)\n   * @example \"fr\" | \"en\" | \"es\"\n   */\n  language?: string;\n  \n  /** \n   * Fuseau horaire de l'utilisateur (IANA timezone)\n   * @example \"Europe/Paris\" | \"America/New_York\"\n   */\n  timezone?: string;\n  \n  /** \n   * Thème d'interface préféré \n   * @example \"light\" | \"dark\"\n   */\n  theme?: 'light' | 'dark';\n  \n  /** \n   * Préférences de notifications par email\n   * @default true\n   */\n  notifications?: boolean;\n\n  /** \n   * Format de date préféré\n   * @example \"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY-MM-DD\"\n   */\n  dateFormat?: string;\n\n  /** \n   * Nombre d'éléments par page dans les listes\n   * @default 10\n   * @min 5\n   * @max 100\n   */\n  itemsPerPage?: number;\n}\n\n/**\n * Interface utilisateur étendue\n * \n * Extension de l'interface User avec des informations additionnelles\n * pour un affichage et une expérience utilisateur enrichis.\n * \n * @interface ExtendedUser\n * @extends User\n */\nexport interface ExtendedUser extends User {\n  /** \n   * Nom d'affichage de l'utilisateur\n   * @example \"John Doe\"\n   */\n  name?: string;\n  \n  /** \n   * URL de l'avatar utilisateur\n   * @example \"https://cdn.example.com/avatars/user123.jpg\"\n   */\n  avatar?: string;\n  \n  /** \n   * Date de création du compte utilisateur\n   * @example new Date(\"2024-01-15T10:30:00Z\")\n   */\n  createdAt?: Date;\n  \n  /** \n   * Date de dernière connexion\n   * @example new Date(\"2025-01-28T14:25:30Z\")\n   */\n  lastLoginAt?: Date;\n  \n  /** \n   * Préférences personnalisées de l'utilisateur\n   */\n  preferences?: UserPreferences;\n\n  /** \n   * Statut du compte utilisateur\n   * @example \"active\" | \"suspended\" | \"pending_verification\"\n   */\n  status?: 'active' | 'suspended' | 'pending_verification';\n\n  /** \n   * Indicateur de vérification de l'email\n   * @default false\n   */\n  emailVerified?: boolean;\n}\n\n/**\n * Fonction utilitaire pour vérifier si un utilisateur possède un rôle spécifique\n * \n * @param user - L'utilisateur à vérifier\n * @param role - Le rôle à rechercher\n * @returns true si l'utilisateur possède le rôle, false sinon\n * \n * @example\n * ```typescript\n * const user: User = { id: '123', email: 'user@example.com', roles: ['user', 'premium'] };\n * \n * if (hasRole(user, UserRole.PREMIUM)) {\n *   // L'utilisateur a accès aux fonctionnalités premium\n * }\n * ```\n */\nexport function hasRole(user: User, role: UserRole): boolean {\n  return user.roles.includes(role);\n}\n\n/**\n * Fonction utilitaire pour vérifier si un utilisateur possède l'un des rôles spécifiés\n * \n * @param user - L'utilisateur à vérifier\n * @param roles - Les rôles à rechercher\n * @returns true si l'utilisateur possède au moins un des rôles, false sinon\n * \n * @example\n * ```typescript\n * const user: User = { id: '123', email: 'user@example.com', roles: ['user'] };\n * \n * if (hasAnyRole(user, [UserRole.ADMIN, UserRole.PREMIUM])) {\n *   // L'utilisateur a des privilèges élevés\n * }\n * ```\n */\nexport function hasAnyRole(user: User, roles: UserRole[]): boolean {\n  return roles.some(role => user.roles.includes(role));\n}\n\n/**\n * Fonction utilitaire pour vérifier si un utilisateur possède tous les rôles spécifiés\n * \n * @param user - L'utilisateur à vérifier\n * @param roles - Les rôles requis\n * @returns true si l'utilisateur possède tous les rôles, false sinon\n * \n * @example\n * ```typescript\n * const user: User = { id: '123', email: 'user@example.com', roles: ['user', 'premium'] };\n * \n * if (hasAllRoles(user, [UserRole.USER, UserRole.PREMIUM])) {\n *   // L'utilisateur possède tous les rôles requis\n * }\n * ```\n */\nexport function hasAllRoles(user: User, roles: UserRole[]): boolean {\n  return roles.every(role => user.roles.includes(role));\n}\n\n/**\n * Fonction utilitaire pour vérifier si un utilisateur est administrateur\n * \n * @param user - L'utilisateur à vérifier\n * @returns true si l'utilisateur est administrateur, false sinon\n * \n * @example\n * ```typescript\n * const user: User = { id: '123', email: 'admin@example.com', roles: ['user', 'admin'] };\n * \n * if (isAdmin(user)) {\n *   // L'utilisateur a des privilèges d'administration\n * }\n * ```\n */\nexport function isAdmin(user: User): user is AdminUser {\n  return hasRole(user, UserRole.ADMIN);\n}\n\n/**\n * Fonction utilitaire pour vérifier si un utilisateur est premium\n * \n * @param user - L'utilisateur à vérifier\n * @returns true si l'utilisateur est premium, false sinon\n * \n * @example\n * ```typescript\n * const user: User = { id: '123', email: 'premium@example.com', roles: ['user', 'premium'] };\n * \n * if (isPremium(user)) {\n *   // L'utilisateur a accès aux fonctionnalités premium\n * }\n * ```\n */\nexport function isPremium(user: User): user is PremiumUser {\n  return hasRole(user, UserRole.PREMIUM);\n}\n\n/**\n * Fonction utilitaire pour créer un utilisateur avec des rôles par défaut\n * \n * Assure qu'un utilisateur a toujours au minimum le rôle 'user'.\n * \n * @param id - L'identifiant de l'utilisateur\n * @param email - L'email de l'utilisateur\n * @param roles - Les rôles additionnels (optionnel)\n * @returns Un utilisateur avec les rôles appropriés\n * \n * @example\n * ```typescript\n * const user = createUser('123', 'user@example.com', [UserRole.PREMIUM]);\n * // Résultat: { id: '123', email: 'user@example.com', roles: ['user', 'premium'] }\n * ```\n */\nexport function createUser(id: string, email: string, roles: UserRole[] = []): User {\n  const defaultRoles = [UserRole.USER];\n  const allRoles = [...new Set([...defaultRoles, ...roles])]; // Supprime les doublons\n  \n  return {\n    id,\n    email,\n    roles: allRoles,\n  };\n}\n\n/**\n * Fonction utilitaire pour vérifier si un objet est un utilisateur valide\n * \n * @param obj - L'objet à vérifier\n * @returns true si l'objet est un utilisateur valide, false sinon\n * \n * @example\n * ```typescript\n * const data: unknown = { id: '123', email: 'user@example.com', roles: ['user'] };\n * \n * if (isValidUser(data)) {\n *   // TypeScript sait maintenant que data est de type User\n *   console.log(data.email);\n * }\n * ```\n */\nexport function isValidUser(obj: unknown): obj is User {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  }\n  \n  const user = obj as Record<string, unknown>;\n  \n  // Validation d'email améliorée\n  const isValidEmail = (email: string): boolean => {\n    if (email.length === 0) return false;\n    \n    const atIndex = email.indexOf('@');\n    if (atIndex <= 0 || atIndex === email.length - 1) return false; // @ doit être au milieu\n    \n    const localPart = email.substring(0, atIndex);\n    const domainPart = email.substring(atIndex + 1);\n    \n    // Vérifications basiques\n    if (localPart.length === 0 || domainPart.length === 0) return false;\n    if (domainPart.startsWith('.') || domainPart.endsWith('.')) return false;\n    if (!domainPart.includes('.')) return false; // Doit avoir au moins un point dans le domaine\n    \n    return true;\n  };\n  \n  return (\n    typeof user.id === 'string' &&\n    user.id.length > 0 &&\n    typeof user.email === 'string' &&\n    isValidEmail(user.email) &&\n    Array.isArray(user.roles) &&\n    user.roles.every(role => typeof role === 'string')\n  );\n}\n\n/**\n * Type guard pour vérifier si un utilisateur est un ExtendedUser\n * \n * @param user - L'utilisateur à vérifier\n * @returns true si l'utilisateur est étendu, false sinon\n * \n * @example\n * ```typescript\n * if (isExtendedUser(user)) {\n *   // Accès aux propriétés étendues\n *   console.log(user.name, user.avatar);\n * }\n * ```\n */\nexport function isExtendedUser(user: User): user is ExtendedUser {\n  const extended = user as ExtendedUser;\n  return (\n    (extended.name !== undefined && extended.name.trim().length > 0) ||\n    (extended.avatar !== undefined && extended.avatar.length > 0) ||\n    extended.createdAt !== undefined ||\n    extended.lastLoginAt !== undefined ||\n    extended.preferences !== undefined ||\n    extended.status !== undefined ||\n    extended.emailVerified !== undefined\n  );\n}\n\n/**\n * Fonction utilitaire pour créer des préférences utilisateur par défaut\n * \n * @param overrides - Préférences à surcharger\n * @returns Préférences utilisateur avec valeurs par défaut\n * \n * @example\n * ```typescript\n * const prefs = createDefaultPreferences({ theme: 'dark' });\n * // Résultat: { language: 'en', theme: 'dark', notifications: true, ... }\n * ```\n */\nexport function createDefaultPreferences(overrides: Partial<UserPreferences> = {}): UserPreferences {\n  return {\n    language: 'en',\n    timezone: 'UTC',\n    theme: 'light',\n    notifications: true,\n    dateFormat: 'DD/MM/YYYY',\n    itemsPerPage: 10,\n    ...overrides,\n  };\n}\n\n/**\n * Fonction utilitaire pour créer un utilisateur étendu\n * \n * @param baseUser - Utilisateur de base\n * @param extensions - Propriétés étendues à ajouter\n * @returns Utilisateur étendu\n * \n * @example\n * ```typescript\n * const user = createUser('123', 'user@example.com');\n * const extendedUser = createExtendedUser(user, {\n *   name: 'John Doe',\n *   avatar: 'https://example.com/avatar.jpg'\n * });\n * ```\n */\nexport function createExtendedUser(\n  baseUser: User,\n  extensions: Partial<Omit<ExtendedUser, keyof User>> = {}\n): ExtendedUser {\n  return {\n    ...baseUser,\n    ...extensions,\n  };\n}\n\n/**\n * Fonction utilitaire pour vérifier si un utilisateur a un email vérifié\n * \n * @param user - L'utilisateur à vérifier\n * @returns true si l'email est vérifié, false sinon ou si l'info n'est pas disponible\n * \n * @example\n * ```typescript\n * if (hasVerifiedEmail(user)) {\n *   // L'utilisateur peut accéder aux fonctionnalités nécessitant un email vérifié\n * }\n * ```\n */\nexport function hasVerifiedEmail(user: User | ExtendedUser): boolean {\n  if (isExtendedUser(user)) {\n    // Conversion truthy/falsy en boolean strict\n    return Boolean(user.emailVerified);\n  }\n  return false; // Considéré comme non vérifié si l'info n'est pas disponible\n}\n\n/**\n * Fonction utilitaire pour vérifier si un compte utilisateur est actif\n * \n * @param user - L'utilisateur à vérifier\n * @returns true si le compte est actif, false sinon\n * \n * @example\n * ```typescript\n * if (isActiveUser(user)) {\n *   // L'utilisateur peut utiliser la plateforme normalement\n * } else {\n *   // Rediriger vers la page de suspension/vérification\n * }\n * ```\n */\nexport function isActiveUser(user: User | ExtendedUser): boolean {\n  if (isExtendedUser(user)) {\n    return user.status === 'active' || user.status === undefined; // undefined = actif par défaut\n  }\n  return true; // User de base considéré comme actif\n}\n\n/**\n * Fonction utilitaire pour obtenir le nom d'affichage d'un utilisateur\n * \n * @param user - L'utilisateur\n * @returns Le nom d'affichage (name si disponible, sinon email)\n * \n * @example\n * ```typescript\n * const displayName = getDisplayName(user);\n * // \"John Doe\" ou \"user@example.com\" si pas de nom\n * ```\n */\nexport function getDisplayName(user: User | ExtendedUser): string {\n  if (isExtendedUser(user) && user.name) {\n    // Vérifier que le nom contient des caractères visibles\n    const trimmedName = user.name.trim();\n    // Supprimer les caractères de contrôle et invisibles\n    const visibleName = trimmedName.replace(/[\\u0000-\\u001f\\u007f-\\u009f\\u200b-\\u200f\\u2028-\\u202f\\u205f-\\u206f]/g, '');\n    \n    if (visibleName.length > 0) {\n      return user.name;\n    }\n  }\n  return user.email;\n}\n\n/**\n * Fonction utilitaire pour obtenir les préférences avec fallback\n * \n * @param user - L'utilisateur\n * @returns Les préférences utilisateur ou les préférences par défaut\n * \n * @example\n * ```typescript\n * const prefs = getUserPreferences(user);\n * console.log(prefs.theme); // Toujours défini, avec fallback sur 'light'\n * ```\n */\nexport function getUserPreferences(user: User | ExtendedUser): UserPreferences {\n  const defaultPrefs = createDefaultPreferences();\n  \n  if (isExtendedUser(user) && user.preferences) {\n    // Merge en préservant les propriétés supplémentaires mais validant les types de base\n    const result = { ...defaultPrefs, ...user.preferences };\n    \n    // Correction des types incorrects pour les propriétés essentielles\n    if (typeof result.theme !== 'string' || !['light', 'dark'].includes(result.theme)) {\n      result.theme = defaultPrefs.theme;\n    }\n    if (typeof result.language !== 'string') {\n      result.language = defaultPrefs.language;\n    }\n    if (typeof result.notifications !== 'boolean') {\n      result.notifications = defaultPrefs.notifications;\n    }\n    if (typeof result.itemsPerPage !== 'number' || result.itemsPerPage < 1) {\n      result.itemsPerPage = defaultPrefs.itemsPerPage;\n    }\n    if (typeof result.timezone !== 'string') {\n      result.timezone = defaultPrefs.timezone;\n    }\n    if (typeof result.dateFormat !== 'string') {\n      result.dateFormat = defaultPrefs.dateFormat;\n    }\n    \n    return result;\n  }\n  \n  return defaultPrefs;\n}"],"version":3}