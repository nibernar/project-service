{"file":"/Users/nicolasbernard/Desktop/project-service/src/config/cache.config.ts","mappings":"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","names":[],"sources":["/Users/nicolasbernard/Desktop/project-service/src/config/cache.config.ts"],"sourcesContent":["// src/config/cache.config.ts\n\nimport { registerAs } from '@nestjs/config';\nimport type { RedisOptions } from 'ioredis';\n\n// ============================================================================\n// INTERFACES DE CONFIGURATION\n// ============================================================================\n\nexport interface CacheConnectionConfig {\n  host: string;\n  port: number;\n  password?: string;\n  username?: string;\n  db: number;\n  family: 4 | 6;\n  connectTimeout: number;\n  lazyConnect: boolean;\n  keepAlive: number;\n}\n\nexport interface CachePerformanceConfig {\n  defaultTtl: number;\n  maxConnections: number;\n  minConnections: number;\n  connectionTimeout: number;\n  responseTimeout: number;\n  commandTimeout: number;\n  acquireTimeout: number;\n  maxWaitingClients: number;\n}\n\nexport interface CacheRetryConfig {\n  enabled: boolean;\n  retryDelayOnFailover: number;\n  maxRetriesPerRequest: number;\n  retryDelayOnClusterDown: number;\n  maxRetriesPerRequestOnFailover: number;\n  enableReadyCheck: boolean;\n  maxRetriesPerRequestOnReadyCheck: number;\n}\n\nexport interface CacheSerializationConfig {\n  mode: 'json' | 'msgpack' | 'buffer';\n  compression: boolean;\n  compressionThreshold: number;\n  keyPrefix: string;\n  keyExpiration: boolean;\n  valueMaxSize: number;\n}\n\nexport interface CacheMonitoringConfig {\n  enabled: boolean;\n  collectCommandStats: boolean;\n  slowCommandThreshold: number;\n  healthCheckInterval: number;\n  healthCheckTimeout: number;\n  enableMetrics: boolean;\n  metricsInterval: number;\n}\n\nexport interface CacheSecurityConfig {\n  enableAuth: boolean;\n  enableTLS: boolean;\n  tlsRejectUnauthorized: boolean;\n  tlsCa?: string;\n  tlsCert?: string;\n  tlsKey?: string;\n  enableIPWhitelist: boolean;\n  allowedIPs: string[];\n}\n\nexport interface CacheClusterConfig {\n  enabled: boolean;\n  nodes: Array<{ host: string; port: number }>;\n  enableOfflineQueue: boolean;\n  redisOptions: Partial<RedisOptions>;\n  scaleReads: 'master' | 'slave' | 'all';\n  maxRedirections: number;\n}\n\nexport interface CacheFeaturesConfig {\n  enablePipelining: boolean;\n  enableTransactions: boolean;\n  enableStreams: boolean;\n  enablePubSub: boolean;\n  enableScripting: boolean;\n  enableCaching: boolean;\n  enableDistributedLock: boolean;\n}\n\nexport interface CacheConfig {\n  connection: CacheConnectionConfig;\n  performance: CachePerformanceConfig;\n  retry: CacheRetryConfig;\n  serialization: CacheSerializationConfig;\n  monitoring: CacheMonitoringConfig;\n  security: CacheSecurityConfig;\n  cluster: CacheClusterConfig;\n  features: CacheFeaturesConfig;\n}\n\nexport interface CacheLimits {\n  maxConnections: number;\n  recommendedConnections: number;\n  minConnections: number;\n  defaultTtl: number;\n  maxTtl: number;\n}\n\nexport interface EnvironmentCacheLimits {\n  development: CacheLimits;\n  test: CacheLimits;\n  staging: CacheLimits;\n  production: CacheLimits;\n}\n\n// ============================================================================\n// ERREURS PERSONNALISÉES\n// ============================================================================\n\nexport class CacheConfigurationError extends Error {\n  constructor(\n    message: string,\n    public readonly variable?: string,\n    public readonly value?: any\n  ) {\n    super(message);\n    this.name = 'CacheConfigurationError';\n  }\n}\n\nexport class CacheValidationError extends CacheConfigurationError {\n  constructor(\n    message: string,\n    variable: string,\n    value: any,\n    public readonly suggestion?: string\n  ) {\n    super(message, variable, value);\n    this.name = 'CacheValidationError';\n  }\n}\n\nexport class CacheConnectionError extends CacheConfigurationError {\n  constructor(\n    message: string,\n    public readonly originalError?: Error\n  ) {\n    super(message);\n    this.name = 'CacheConnectionError';\n  }\n}\n\n// ============================================================================\n// CONSTANTES ET VALEURS PAR DÉFAUT\n// ============================================================================\n\nexport const CACHE_LIMITS: EnvironmentCacheLimits = {\n  development: { \n    minConnections: 1, \n    maxConnections: 10, \n    recommendedConnections: 3, \n    defaultTtl: 300,\n    maxTtl: 3600\n  },\n  test: { \n    minConnections: 1, \n    maxConnections: 3, \n    recommendedConnections: 1, \n    defaultTtl: 30,\n    maxTtl: 300\n  },\n  staging: { \n    minConnections: 5, \n    maxConnections: 25, \n    recommendedConnections: 10, \n    defaultTtl: 600,\n    maxTtl: 7200\n  },\n  production: { \n    minConnections: 10, \n    maxConnections: 100, \n    recommendedConnections: 25, \n    defaultTtl: 900,\n    maxTtl: 14400\n  }\n};\n\nexport const CACHE_KEYS = {\n  PROJECT: (id: string) => `project:${id}`,\n  PROJECT_LIST: (userId: string, page: number, limit: number) => \n    `projects:${userId}:${page}:${limit}`,\n  PROJECT_STATISTICS: (projectId: string) => `stats:${projectId}`,\n  USER_PROJECTS_COUNT: (userId: string) => `count:projects:${userId}`,\n  PROJECT_SEARCH: (userId: string, query: string) => `search:${userId}:${query}`,\n  EXPORT_STATUS: (exportId: string) => `export:status:${exportId}`,\n  RATE_LIMIT: (userId: string, action: string) => `ratelimit:${userId}:${action}`,\n} as const;\n\nexport const CACHE_TTL = {\n  PROJECT: 300, // 5 minutes\n  PROJECT_LIST: 60, // 1 minute\n  PROJECT_STATISTICS: 600, // 10 minutes\n  USER_PROJECTS_COUNT: 120, // 2 minutes\n  PROJECT_SEARCH: 180, // 3 minutes\n  EXPORT_STATUS: 1800, // 30 minutes\n  RATE_LIMIT: 3600, // 1 hour\n} as const;\n\nexport const SERIALIZATION_MODES = ['json', 'msgpack', 'buffer'] as const;\nexport type SerializationMode = typeof SERIALIZATION_MODES[number];\n\nexport const ENVIRONMENT_MAPPINGS = {\n  REDIS_HOST: 'connection.host',\n  REDIS_PORT: 'connection.port',\n  REDIS_PASSWORD: 'connection.password',\n  REDIS_USERNAME: 'connection.username',\n  REDIS_DB: 'connection.db',\n  REDIS_CONNECT_TIMEOUT: 'connection.connectTimeout',\n  CACHE_TTL: 'performance.defaultTtl',\n  REDIS_MAX_CONNECTIONS: 'performance.maxConnections',\n  REDIS_MIN_CONNECTIONS: 'performance.minConnections',\n  REDIS_RESPONSE_TIMEOUT: 'performance.responseTimeout',\n  REDIS_RETRY_DELAY: 'retry.retryDelayOnFailover',\n  REDIS_MAX_RETRIES: 'retry.maxRetriesPerRequest',\n  REDIS_KEY_PREFIX: 'serialization.keyPrefix',\n  REDIS_COMPRESSION: 'serialization.compression',\n  REDIS_ENABLE_METRICS: 'monitoring.enabled',\n  REDIS_HEALTH_CHECK_INTERVAL: 'monitoring.healthCheckInterval',\n  REDIS_ENABLE_TLS: 'security.enableTLS',\n  REDIS_TLS_REJECT_UNAUTHORIZED: 'security.tlsRejectUnauthorized',\n  REDIS_CLUSTER_ENABLED: 'cluster.enabled',\n};\n\n// ============================================================================\n// CLASSES DE VALIDATION\n// ============================================================================\n\nexport class CacheConfigValidator {\n  /**\n   * Valide la configuration de connexion Redis\n   */\n  static validateConnectionConfig(config: CacheConnectionConfig): void {\n    if (!config.host) {\n      throw new CacheValidationError(\n        'Redis host is required',\n        'REDIS_HOST',\n        config.host,\n        'Use localhost for development or a valid hostname/IP'\n      );\n    }\n\n    if (config.port < 1 || config.port > 65535) {\n      throw new CacheValidationError(\n        'Redis port must be between 1 and 65535',\n        'REDIS_PORT',\n        config.port,\n        'Use 6379 for default Redis port'\n      );\n    }\n\n    if (config.db < 0 || config.db > 15) {\n      throw new CacheValidationError(\n        'Redis database number must be between 0 and 15',\n        'REDIS_DB',\n        config.db,\n        'Use 0 for default database'\n      );\n    }\n\n    if (config.connectTimeout <= 0) {\n      throw new CacheValidationError(\n        'Connection timeout must be greater than 0',\n        'REDIS_CONNECT_TIMEOUT',\n        config.connectTimeout,\n        'Use a positive number in milliseconds like 10000'\n      );\n    }\n  }\n\n  /**\n   * Valide la configuration de performance\n   */\n  static validatePerformanceConfig(config: CachePerformanceConfig): void {\n    if (config.maxConnections <= 0) {\n      throw new CacheValidationError(\n        'Maximum connections must be greater than 0',\n        'REDIS_MAX_CONNECTIONS',\n        config.maxConnections,\n        'Use a positive number like 10'\n      );\n    }\n\n    if (config.minConnections >= config.maxConnections) {\n      throw new CacheValidationError(\n        'Minimum connections must be less than maximum connections',\n        'REDIS_MIN_CONNECTIONS',\n        config.minConnections,\n        `Set REDIS_MIN_CONNECTIONS < ${config.maxConnections}`\n      );\n    }\n\n    if (config.defaultTtl <= 0) {\n      throw new CacheValidationError(\n        'Default TTL must be greater than 0',\n        'CACHE_TTL',\n        config.defaultTtl,\n        'Use a positive number in seconds like 300'\n      );\n    }\n\n    if (config.responseTimeout <= 0) {\n      throw new CacheValidationError(\n        'Response timeout must be greater than 0',\n        'REDIS_RESPONSE_TIMEOUT',\n        config.responseTimeout,\n        'Use a positive number in milliseconds like 5000'\n      );\n    }\n  }\n\n  /**\n   * Valide les variables d'environnement requises\n   */\n  static validateEnvironmentVariables(): void {\n    // Aucune variable n'est absolument requise car Redis peut fonctionner avec des défauts\n    // Mais on avertit sur les importantes\n    \n    const nodeEnv = process.env.NODE_ENV || 'development';\n    if (nodeEnv === 'production') {\n      const productionImportantVars = [\n        'REDIS_HOST',\n        'REDIS_PASSWORD',\n        'REDIS_MAX_CONNECTIONS'\n      ];\n\n      productionImportantVars.forEach(varName => {\n        if (!process.env[varName]) {\n          console.warn(`⚠️  Production environment variable not set: ${varName}`);\n        }\n      });\n    }\n\n    // Validation de l'URL Redis si fournie\n    if (process.env.REDIS_URL) {\n      try {\n        new URL(process.env.REDIS_URL);\n      } catch (error) {\n        throw new CacheValidationError(\n          'Invalid Redis URL format',\n          'REDIS_URL',\n          process.env.REDIS_URL,\n          'Format: redis://[:password@]host[:port][/database]'\n        );\n      }\n    }\n  }\n\n  /**\n   * Valide la cohérence de la configuration complète\n   */\n  static validateCompleteConfig(config: CacheConfig): void {\n    this.validateConnectionConfig(config.connection);\n    this.validatePerformanceConfig(config.performance);\n\n    // Validation de cohérence entre composants\n    if (config.cluster.enabled && config.cluster.nodes.length === 0) {\n      throw new CacheConfigurationError(\n        'Cluster mode enabled but no nodes configured'\n      );\n    }\n\n    if (config.security.enableTLS && !config.security.tlsRejectUnauthorized && \n        process.env.NODE_ENV === 'production') {\n      console.warn('⚠️  TLS enabled but certificate verification disabled in production');\n    }\n\n    if (config.serialization.compression && config.serialization.compressionThreshold <= 0) {\n      throw new CacheValidationError(\n        'Compression threshold must be greater than 0 when compression is enabled',\n        'REDIS_COMPRESSION_THRESHOLD',\n        config.serialization.compressionThreshold,\n        'Use a positive number in bytes like 1024'\n      );\n    }\n  }\n}\n\n// ============================================================================\n// FACTORY DE CONFIGURATION\n// ============================================================================\n\nexport class CacheConfigFactory {\n  /**\n   * Point d'entrée principal pour créer la configuration complète\n   */\n  static create(options: { strict?: boolean } = {}): CacheConfig {\n    try {\n      // Mode debug en développement\n      if (process.env.NODE_ENV === 'development' && process.env.DEBUG_CONFIG === 'true') {\n        this.debugEnvironmentVariables();\n      }\n\n      // Validation préliminaire\n      CacheConfigValidator.validateEnvironmentVariables();\n\n      const nodeEnv = process.env.NODE_ENV || 'development';\n      const config = this.createForEnvironment(nodeEnv);\n\n      // Validation complète si mode strict\n      if (options.strict !== false) {\n        CacheConfigValidator.validateCompleteConfig(config);\n      }\n\n      return config;\n    } catch (error) {\n      console.error('❌ Cache Configuration Error:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Crée une configuration spécifique à l'environnement\n   */\n  static createForEnvironment(env: string): CacheConfig {\n    const actualEnv = env || process.env.NODE_ENV || 'development';\n    switch (actualEnv) {\n      case 'development':\n        return this.createDevelopmentConfig();\n      case 'test':\n        return this.createTestConfig();\n      case 'staging':\n        return this.createStagingConfig();\n      case 'production':\n        return this.createProductionConfig();\n      default:\n        console.warn(`⚠️  Unknown environment \"${actualEnv}\", using development config`);\n        return this.createDevelopmentConfig();\n    }\n  }\n\n  /**\n   * Configuration optimisée pour le développement\n   */\n  static createDevelopmentConfig(): CacheConfig {\n    const limits = CACHE_LIMITS.development;\n    \n    return {\n      connection: this.createConnectionConfig('development'),\n      performance: this.createPerformanceConfig('development', limits),\n      retry: this.createRetryConfig('development'),\n      serialization: this.createSerializationConfig('development'),\n      monitoring: this.createMonitoringConfig('development'),\n      security: this.createSecurityConfig('development'),\n      cluster: this.createClusterConfig('development'),\n      features: this.createFeaturesConfig('development')\n    };\n  }\n\n  /**\n   * Configuration optimisée pour les tests\n   */\n  static createTestConfig(): CacheConfig {\n    const limits = CACHE_LIMITS.test;\n    \n    return {\n      connection: this.createConnectionConfig('test'),\n      performance: this.createPerformanceConfig('test', limits),\n      retry: this.createRetryConfig('test'),\n      serialization: this.createSerializationConfig('test'),\n      monitoring: this.createMonitoringConfig('test'),\n      security: this.createSecurityConfig('test'),\n      cluster: this.createClusterConfig('test'),\n      features: this.createFeaturesConfig('test')\n    };\n  }\n\n  /**\n   * Configuration optimisée pour le staging\n   */\n  static createStagingConfig(): CacheConfig {\n    const limits = CACHE_LIMITS.staging;\n    \n    return {\n      connection: this.createConnectionConfig('staging'),\n      performance: this.createPerformanceConfig('staging', limits),\n      retry: this.createRetryConfig('staging'),\n      serialization: this.createSerializationConfig('staging'),\n      monitoring: this.createMonitoringConfig('staging'),\n      security: this.createSecurityConfig('staging'),\n      cluster: this.createClusterConfig('staging'),\n      features: this.createFeaturesConfig('staging')\n    };\n  }\n\n  /**\n   * Configuration optimisée pour la production\n   */\n  static createProductionConfig(): CacheConfig {\n    const limits = CACHE_LIMITS.production;\n    \n    return {\n      connection: this.createConnectionConfig('production'),\n      performance: this.createPerformanceConfig('production', limits),\n      retry: this.createRetryConfig('production'),\n      serialization: this.createSerializationConfig('production'),\n      monitoring: this.createMonitoringConfig('production'),\n      security: this.createSecurityConfig('production'),\n      cluster: this.createClusterConfig('production'),\n      features: this.createFeaturesConfig('production')\n    };\n  }\n\n  /**\n   * Crée la configuration de connexion\n   */\n  static createConnectionConfig(env: string): CacheConnectionConfig {\n    // Parse Redis URL si fournie\n    const redisUrl = process.env.REDIS_URL;\n    if (redisUrl) {\n      return this.parseRedisUrl(redisUrl, env);\n    }\n\n    return {\n      host: process.env.REDIS_HOST || 'localhost',\n      port: this.parseInt(process.env.REDIS_PORT, 6379),\n      password: process.env.REDIS_PASSWORD,\n      username: process.env.REDIS_USERNAME,\n      db: this.parseInt(process.env.REDIS_DB, env === 'test' ? 1 : 0),\n      family: this.parseInt(process.env.REDIS_FAMILY, 4) as 4 | 6,\n      connectTimeout: this.parseInt(process.env.REDIS_CONNECT_TIMEOUT, \n        env === 'production' ? 10000 : 5000),\n      lazyConnect: this.parseBoolean(process.env.REDIS_LAZY_CONNECT, true),\n      keepAlive: this.parseInt(process.env.REDIS_KEEP_ALIVE, 30000)\n    };\n  }\n\n  /**\n   * Crée la configuration de performance\n   */\n  static createPerformanceConfig(env: string, limits: CacheLimits): CachePerformanceConfig {\n    return {\n      defaultTtl: this.parseInt(process.env.CACHE_TTL, limits.defaultTtl),\n      maxConnections: this.parseInt(process.env.REDIS_MAX_CONNECTIONS, limits.recommendedConnections),\n      minConnections: this.parseInt(process.env.REDIS_MIN_CONNECTIONS, limits.minConnections),\n      connectionTimeout: this.parseInt(process.env.REDIS_CONNECTION_TIMEOUT,\n        env === 'production' ? 15000 : 10000),\n      responseTimeout: this.parseInt(process.env.REDIS_RESPONSE_TIMEOUT,\n        env === 'production' ? 10000 : 5000),\n      commandTimeout: this.parseInt(process.env.REDIS_COMMAND_TIMEOUT,\n        env === 'production' ? 5000 : 3000),\n      acquireTimeout: this.parseInt(process.env.REDIS_ACQUIRE_TIMEOUT, 10000),\n      maxWaitingClients: this.parseInt(process.env.REDIS_MAX_WAITING_CLIENTS,\n        env === 'production' ? 100 : 50)\n    };\n  }\n\n  /**\n   * Crée la configuration de retry\n   */\n  static createRetryConfig(env: string): CacheRetryConfig {\n    return {\n      enabled: this.parseBoolean(process.env.REDIS_RETRIES_ENABLED, env !== 'test'),\n      retryDelayOnFailover: this.parseInt(process.env.REDIS_RETRY_DELAY, 100),\n      maxRetriesPerRequest: this.parseInt(process.env.REDIS_MAX_RETRIES,\n        env === 'production' ? 5 : 3),\n      retryDelayOnClusterDown: this.parseInt(process.env.REDIS_CLUSTER_RETRY_DELAY, 300),\n      maxRetriesPerRequestOnFailover: this.parseInt(process.env.REDIS_MAX_RETRIES_FAILOVER, 2),\n      enableReadyCheck: this.parseBoolean(process.env.REDIS_ENABLE_READY_CHECK, true),\n      maxRetriesPerRequestOnReadyCheck: this.parseInt(process.env.REDIS_MAX_RETRIES_READY, 1)\n    };\n  }\n\n  /**\n   * Crée la configuration de sérialisation\n   */\n  static createSerializationConfig(env: string): CacheSerializationConfig {\n    const mode = (process.env.REDIS_SERIALIZATION as SerializationMode) || 'json';\n    const validModes = SERIALIZATION_MODES;\n    \n    return {\n      mode: validModes.includes(mode) ? mode : 'json',\n      compression: this.parseBoolean(process.env.REDIS_COMPRESSION, \n        env === 'production'),\n      compressionThreshold: this.parseInt(process.env.REDIS_COMPRESSION_THRESHOLD, 1024),\n      keyPrefix: process.env.REDIS_KEY_PREFIX || \n        `coders:project-service:${env}:`,\n      keyExpiration: this.parseBoolean(process.env.REDIS_KEY_EXPIRATION, true),\n      valueMaxSize: this.parseInt(process.env.REDIS_VALUE_MAX_SIZE,\n        env === 'production' ? 10485760 : 1048576), // 10MB prod, 1MB autres\n    };\n  }\n\n  /**\n   * Crée la configuration de monitoring\n   */\n  static createMonitoringConfig(env: string): CacheMonitoringConfig {\n    return {\n      enabled: this.parseBoolean(process.env.REDIS_ENABLE_METRICS, env !== 'test'),\n      collectCommandStats: this.parseBoolean(process.env.REDIS_COLLECT_COMMAND_STATS,\n        env === 'development' || env === 'staging'),\n      slowCommandThreshold: this.parseInt(process.env.REDIS_SLOW_COMMAND_THRESHOLD,\n        env === 'production' ? 1000 : 500),\n      healthCheckInterval: this.parseInt(process.env.REDIS_HEALTH_CHECK_INTERVAL,\n        env === 'production' ? 30000 : 60000),\n      healthCheckTimeout: this.parseInt(process.env.REDIS_HEALTH_CHECK_TIMEOUT, 5000),\n      enableMetrics: this.parseBoolean(process.env.REDIS_ENABLE_METRICS, env !== 'test'),\n      metricsInterval: this.parseInt(process.env.REDIS_METRICS_INTERVAL, 60000)\n    };\n  }\n\n  /**\n   * Crée la configuration de sécurité\n   */\n  static createSecurityConfig(env: string): CacheSecurityConfig {\n    return {\n      enableAuth: this.parseBoolean(process.env.REDIS_ENABLE_AUTH, \n        env === 'production' || env === 'staging'),\n      enableTLS: this.parseBoolean(process.env.REDIS_ENABLE_TLS, \n        env === 'production'),\n      tlsRejectUnauthorized: this.parseBoolean(process.env.REDIS_TLS_REJECT_UNAUTHORIZED,\n        env === 'production'),\n      tlsCa: process.env.REDIS_TLS_CA,\n      tlsCert: process.env.REDIS_TLS_CERT,\n      tlsKey: process.env.REDIS_TLS_KEY,\n      enableIPWhitelist: this.parseBoolean(process.env.REDIS_ENABLE_IP_WHITELIST, false),\n      allowedIPs: this.parseArray(process.env.REDIS_ALLOWED_IPS)\n    };\n  }\n\n  /**\n   * Crée la configuration de cluster\n   */\n  static createClusterConfig(env: string): CacheClusterConfig {\n    const clusterEnabled = this.parseBoolean(process.env.REDIS_CLUSTER_ENABLED, false);\n    \n    let nodes: Array<{ host: string; port: number }> = [];\n    if (clusterEnabled) {\n      const nodesStr = process.env.REDIS_CLUSTER_NODES;\n      if (nodesStr) {\n        nodes = nodesStr.split(',').map(node => {\n          const [host, portStr] = node.trim().split(':');\n          return { host, port: parseInt(portStr) || 6379 };\n        });\n      }\n    }\n\n    return {\n      enabled: clusterEnabled,\n      nodes,\n      enableOfflineQueue: this.parseBoolean(process.env.REDIS_ENABLE_OFFLINE_QUEUE, false),\n      redisOptions: {\n        password: process.env.REDIS_PASSWORD,\n        connectTimeout: this.parseInt(process.env.REDIS_CONNECT_TIMEOUT, 10000)\n      },\n      scaleReads: (process.env.REDIS_SCALE_READS as 'master' | 'slave' | 'all') || 'slave',\n      maxRedirections: this.parseInt(process.env.REDIS_MAX_REDIRECTIONS, 16)\n    };\n  }\n\n  /**\n   * Crée la configuration des fonctionnalités\n   */\n  static createFeaturesConfig(env: string): CacheFeaturesConfig {\n    return {\n      enablePipelining: this.parseBoolean(process.env.REDIS_ENABLE_PIPELINING,\n        env === 'production'),\n      enableTransactions: this.parseBoolean(process.env.REDIS_ENABLE_TRANSACTIONS, true),\n      enableStreams: this.parseBoolean(process.env.REDIS_ENABLE_STREAMS, false),\n      enablePubSub: this.parseBoolean(process.env.REDIS_ENABLE_PUBSUB, \n        env !== 'test'),\n      enableScripting: this.parseBoolean(process.env.REDIS_ENABLE_SCRIPTING, true),\n      enableCaching: this.parseBoolean(process.env.REDIS_ENABLE_CACHING, \n        env !== 'test'),\n      enableDistributedLock: this.parseBoolean(process.env.REDIS_ENABLE_DISTRIBUTED_LOCK, \n        env === 'production' || env === 'staging')\n    };\n  }\n\n  // ============================================================================\n  // MÉTHODES UTILITAIRES\n  // ============================================================================\n\n  /**\n   * Parse une URL Redis complète\n   */\n  static parseRedisUrl(url: string, env: string): CacheConnectionConfig {\n    try {\n      const urlObj = new URL(url);\n      \n      return {\n        host: urlObj.hostname || 'localhost',\n        port: urlObj.port ? parseInt(urlObj.port) : 6379,\n        password: urlObj.password || undefined,\n        username: urlObj.username || undefined,\n        db: urlObj.pathname ? parseInt(urlObj.pathname.slice(1)) || 0 : 0,\n        family: 4,\n        connectTimeout: env === 'production' ? 10000 : 5000,\n        lazyConnect: true,\n        keepAlive: 30000\n      };\n    } catch (error) {\n      throw new CacheValidationError(\n        'Invalid Redis URL format',\n        'REDIS_URL',\n        url,\n        'Format: redis://[:password@]host[:port][/database]'\n      );\n    }\n  }\n\n  /**\n   * Méthode de debug pour comprendre les valeurs d'environnement\n   */\n  static debugEnvironmentVariables(): void {\n    console.log('🔍 Cache Environment Variables Debug:');\n    console.log('NODE_ENV:', process.env.NODE_ENV);\n    console.log('REDIS_HOST:', process.env.REDIS_HOST || '[DEFAULT: localhost]');\n    console.log('REDIS_PORT:', process.env.REDIS_PORT || '[DEFAULT: 6379]');\n    console.log('REDIS_URL:', process.env.REDIS_URL ? '[SET]' : '[NOT SET]');\n    console.log('REDIS_PASSWORD:', process.env.REDIS_PASSWORD ? '[SET]' : '[NOT SET]');\n    console.log('CACHE_TTL:', process.env.CACHE_TTL || '[DEFAULT: varies by env]');\n    console.log('REDIS_MAX_CONNECTIONS:', process.env.REDIS_MAX_CONNECTIONS || '[DEFAULT: varies by env]');\n    console.log('REDIS_ENABLE_METRICS:', process.env.REDIS_ENABLE_METRICS || '[DEFAULT: varies by env]');\n  }\n\n  /**\n   * Parse une variable d'environnement booléenne\n   */\n  static parseBoolean(value: string | undefined, defaultValue: boolean): boolean {\n    if (value === undefined || value === null) {\n      return defaultValue;\n    }\n    \n    const trimmedValue = value.toString().trim();\n    if (trimmedValue === '') {\n      return defaultValue;\n    }\n    \n    const lowerValue = trimmedValue.toLowerCase();\n    \n    if (['true', '1', 'yes', 'on'].includes(lowerValue)) return true;\n    if (['false', '0', 'no', 'off'].includes(lowerValue)) return false;\n    \n    console.warn(`⚠️  Invalid boolean value \"${value}\", using default: ${defaultValue}`);\n    return defaultValue;\n  }\n\n  /**\n   * Parse une variable d'environnement numérique\n   */\n  static parseInt(value: string | undefined, defaultValue: number): number {\n    if (value === undefined || value === null) {\n      return defaultValue;\n    }\n    \n    const trimmedValue = value.toString().trim();\n    if (trimmedValue === '') {\n      return defaultValue;\n    }\n    \n    const parsed = parseInt(trimmedValue, 10);\n    \n    if (isNaN(parsed) || parsed < 0) {\n      console.warn(`⚠️  Invalid number value \"${value}\", using default: ${defaultValue}`);\n      return defaultValue;\n    }\n    \n    return parsed;\n  }\n\n  /**\n   * Parse une variable d'environnement en tableau\n   */\n  static parseArray(value: string | undefined, delimiter = ','): string[] {\n    if (!value) return [];\n    \n    return value\n      .split(delimiter)\n      .map(item => item.trim())\n      .filter(item => item.length > 0);\n  }\n}\n\n// ============================================================================\n// UTILITAIRES D'INTÉGRATION\n// ============================================================================\n\n/**\n * Helper pour récupérer la config depuis ConfigService\n */\nexport function getCacheConfig(configService: any): CacheConfig {\n  return configService.get('cache');\n}\n\n/**\n * Calcule la taille optimale du pool de connexions\n */\nexport function calculateOptimalPoolSize(environment: string, availableMemory?: number): number {\n  const limits = CACHE_LIMITS[environment as keyof EnvironmentCacheLimits] || CACHE_LIMITS.development;\n  let baseSize = limits.recommendedConnections;\n  \n  if (availableMemory) {\n    // Estimation : ~128MB par connexion Redis (approximatif)\n    const memoryFactor = Math.floor(availableMemory / 128);\n    baseSize = Math.min(limits.maxConnections, baseSize + memoryFactor);\n  }\n  \n  return Math.max(limits.minConnections, Math.min(limits.maxConnections, baseSize));\n}\n\n// ============================================================================\n// EXPORT DE LA CONFIGURATION\n// ============================================================================\n\n/**\n * Configuration principale du cache Redis\n * Utilisable avec @Inject(cacheConfig.KEY) dans les services\n */\nexport const cacheConfig = registerAs('cache', () => {\n  try {\n    return CacheConfigFactory.create();\n  } catch (error) {\n    console.error('Failed to create cache configuration:', error.message);\n    throw error;\n  }\n});\n\n/**\n * Type pour l'injection de dépendance\n * Usage: @Inject(cacheConfig.KEY) private readonly config: ConfigType<typeof cacheConfig>\n */\nexport type CacheConfigType = ReturnType<typeof cacheConfig>;\n\n// ============================================================================\n// EXPORTS ADDITIONNELS POUR UTILISATION EXTERNE\n// ============================================================================\n\nexport {\n  CacheConfigFactory as CacheConfigurationFactory,\n  CacheConfigValidator as CacheValidator,\n  CACHE_LIMITS as CacheConnectionLimits,\n  ENVIRONMENT_MAPPINGS as CacheEnvironmentMappings,\n  CACHE_KEYS as CacheKeyPatterns,\n  CACHE_TTL as CacheTimeToLive\n};"],"version":3}