{"file":"/Users/nicolasbernard/Desktop/project-service/test/integration/common/guards/auth.guard.integration.spec.ts","mappings":"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","names":[],"sources":["/Users/nicolasbernard/Desktop/project-service/test/integration/common/guards/auth.guard.integration.spec.ts"],"sourcesContent":["// test/integration/common/guards/auth.guard.integration.spec.ts\n\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { HttpModule, HttpService } from '@nestjs/axios';\nimport { ExecutionContext, UnauthorizedException, ServiceUnavailableException, InternalServerErrorException } from '@nestjs/common';\nimport { of, throwError, delay } from 'rxjs';\nimport { AxiosResponse, AxiosError } from 'axios';\nimport Redis from 'ioredis-mock';\n\nimport { AuthGuard } from '../../../../src/common/guards/auth.guard';\nimport { CacheService } from '../../../../src/cache/cache.service';\nimport { CacheModule } from '../../../../src/cache/cache.module';\nimport { User } from '../../../../src/common/interfaces/user.interface';\n\ndescribe('AuthGuard - Integration Tests', () => {\n  let module: TestingModule;\n  let authGuard: AuthGuard;\n  let configService: ConfigService;\n  let cacheService: CacheService;\n  let httpService: HttpService;\n  let redisClient: InstanceType<typeof Redis>; // Fix: Utilisation du type correct\n\n  // ============================================================================\n  // HELPERS D'INTÉGRATION\n  // ============================================================================\n\n  const createMockExecutionContext = (request: any): ExecutionContext => {\n    return {\n      switchToHttp: () => ({\n        getRequest: () => request,\n        getResponse: jest.fn(),\n        getNext: jest.fn(),\n      }),\n      switchToRpc: jest.fn(),\n      switchToWs: jest.fn(),\n      getType: () => 'http',\n      getClass: jest.fn(),\n      getHandler: jest.fn(),\n      getArgs: jest.fn(),\n      getArgByIndex: jest.fn(),\n    } as ExecutionContext;\n  };\n\n  const createTestUser = (): User => ({\n    id: 'integration-user-123',\n    email: 'integration@example.com',\n    roles: ['user'],\n  });\n\n  const createAuthResponse = (user: User): AxiosResponse => ({\n    data: {\n      valid: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        roles: user.roles,\n      },\n      expiresAt: new Date(Date.now() + 3600000).toISOString(),\n    },\n    status: 200,\n    statusText: 'OK',\n    headers: {},\n    config: {} as any,\n  });\n\n  const waitForCache = (ms: number = 50): Promise<void> => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  };\n\n  // ============================================================================\n  // SETUP ET TEARDOWN\n  // ============================================================================\n\n  beforeAll(async () => {\n    // Setup Redis mock\n    redisClient = new Redis({\n      data: {},\n      lazyConnect: false,\n      enableOfflineQueue: true,\n    });\n\n    module = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          load: [\n            () => ({\n              AUTH_SERVICE_URL: 'http://localhost:3001',\n              AUTH_SERVICE_TIMEOUT: '5000',\n              AUTH_CACHE_TTL: '300',\n              REDIS_HOST: 'localhost',\n              REDIS_PORT: '6379',\n            }),\n          ],\n        }),\n        HttpModule.register({\n          timeout: 5000,\n          maxRedirects: 0,\n        }),\n      ],\n      providers: [\n        AuthGuard,\n        {\n          provide: CacheService,\n          useFactory: () => {\n            const mockCacheService = {\n              redis: redisClient,\n              async get(key: string) {\n                return redisClient.get(key).then((value: string | null) => value ? JSON.parse(value) : null); // Fix: Type explicite pour value\n              },\n              async set(key: string, value: any, ttl?: number) {\n                const serialized = JSON.stringify(value);\n                if (ttl) {\n                  return redisClient.setex(key, ttl, serialized);\n                }\n                return redisClient.set(key, serialized);\n              },\n              async del(key: string | string[]) {\n                return Array.isArray(key) ? redisClient.del(...key) : redisClient.del(key);\n              },\n            };\n            return mockCacheService;\n          },\n        },\n      ],\n    }).compile();\n\n    authGuard = module.get<AuthGuard>(AuthGuard);\n    configService = module.get<ConfigService>(ConfigService);\n    cacheService = module.get<CacheService>(CacheService);\n    httpService = module.get<HttpService>(HttpService);\n  });\n\n  afterAll(async () => {\n    try {\n      await redisClient.flushall();\n      await redisClient.quit();\n    } catch (error) {\n      // Ignore Redis mock cleanup errors\n    }\n    await module.close();\n  });\n\n  beforeEach(async () => {\n    // Clear cache before each test\n    try {\n      await redisClient.flushall();\n    } catch (error) {\n      // Ignore Redis mock connection errors\n    }\n    jest.clearAllMocks();\n  });\n\n  // ============================================================================\n  // TESTS D'INTÉGRATION - FLUX COMPLET\n  // ============================================================================\n\n  describe('Complete Authentication Flow', () => {\n    it('should perform complete cache miss -> auth service -> cache set flow', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.integration-test-token.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Mock HTTP service response\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n\n      // Verify cache was populated\n      await waitForCache();\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      const cachedUser = await cacheService.get(cacheKey);\n      expect(cachedUser).toEqual(user);\n    });\n\n    it('should perform complete cache hit flow without calling auth service', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.cached-token.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Pre-populate cache\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      await cacheService.set(cacheKey, user, 300);\n\n      // Mock HTTP service (should not be called)\n      const httpSpy = jest.spyOn(httpService, 'post');\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      expect(httpSpy).not.toHaveBeenCalled();\n    });\n\n    it('should handle cache failure and fallback to auth service', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.fallback-token.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Simulate cache failure\n      jest.spyOn(cacheService, 'get').mockRejectedValue(new Error('Redis connection lost'));\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      expect(httpService.post).toHaveBeenCalled();\n    });\n\n    it('should handle auth service failure with proper error propagation', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.invalid-token.signature';\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Mock auth service failure\n      jest.spyOn(httpService, 'post').mockReturnValue(\n        throwError(() => ({\n          response: { status: 401 },\n          message: 'Unauthorized'\n        }))\n      );\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n      await expect(authGuard.canActivate(context)).rejects.toThrow('Authentication failed');\n\n      // Verify no cache pollution\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      const cachedUser = await cacheService.get(cacheKey);\n      expect(cachedUser).toBeNull();\n    });\n  });\n\n  // ============================================================================\n  // TESTS D'INTÉGRATION - CONFIGURATION RÉELLE\n  // ============================================================================\n\n  describe('Real Configuration Integration', () => {\n    it('should use actual configuration values from ConfigService', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.config-test.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      let capturedUrl: string = '';\n      let capturedConfig: any = {};\n\n      // Mock HTTP service to capture actual call\n      jest.spyOn(httpService, 'post').mockImplementation((url, data, config) => {\n        capturedUrl = url;\n        capturedConfig = config;\n        return of(createAuthResponse(user));\n      });\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect(capturedUrl).toBe('http://localhost:3001/auth/validate');\n      expect(capturedConfig.timeout).toBe(5000);\n      expect(capturedConfig.headers).toEqual({\n        'Content-Type': 'application/json',\n        'User-Agent': expect.stringMatching(/project-service/),\n      });\n    });\n\n    it('should use configured cache TTL from ConfigService', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.ttl-test.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert - Check cache TTL\n      await waitForCache();\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      const ttl = await redisClient.ttl(cacheKey);\n      expect(ttl).toBeGreaterThan(250); // Should be close to 300 (5 minutes)\n      expect(ttl).toBeLessThanOrEqual(300);\n    });\n\n    it('should handle missing configuration gracefully', async () => {\n      // Arrange\n      const originalGet = configService.get.bind(configService);\n      jest.spyOn(configService, 'get').mockImplementation((key: string, defaultValue?: any) => { // Fix: Ajout du paramètre defaultValue\n        if (key === 'AUTH_SERVICE_URL') return undefined;\n        return originalGet(key, defaultValue); // Fix: Appel direct avec bind\n      });\n\n      const token = 'eyJhbGciOiJIUzI1NiJ9.missing-config.signature';\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow();\n    });\n  });\n\n  // ============================================================================\n  // TESTS D'INTÉGRATION - CONCURRENCE RÉELLE\n  // ============================================================================\n\n  describe('Real Concurrency Integration', () => {\n    it('should handle concurrent requests with real cache operations', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.concurrent-real.signature';\n      const user = createTestUser();\n\n      let authServiceCallCount = 0;\n      jest.spyOn(httpService, 'post').mockImplementation(() => {\n        authServiceCallCount++;\n        // Simulate network delay with delayed Observable\n        return of(createAuthResponse(user)).pipe(\n          delay(50)\n        );\n      });\n\n      // Act - 20 concurrent requests\n      const promises = Array.from({ length: 20 }, async (_, i) => {\n        const request = { headers: { authorization: `Bearer ${token}` } };\n        const context = createMockExecutionContext(request);\n        return authGuard.canActivate(context);\n      });\n\n      const results = await Promise.all(promises);\n\n      // Assert\n      expect(results.every(result => result === true)).toBe(true);\n      \n      // All requests should succeed even if auth service is called multiple times\n      expect(authServiceCallCount).toBeGreaterThan(0);\n      expect(authServiceCallCount).toBeLessThanOrEqual(20);\n\n      // Verify cache contains the user\n      await waitForCache(100);\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      const cachedUser = await cacheService.get(cacheKey);\n      expect(cachedUser).toEqual(user);\n    });\n\n    it('should handle mixed cache hits and misses in concurrent scenario', async () => {\n      // Arrange\n      const users = Array.from({ length: 5 }, (_, i) => ({\n        id: `concurrent-user-${i}`,\n        email: `user${i}@example.com`,\n        roles: ['user'],\n      }));\n\n      const tokens = users.map((_, i) => `eyJhbGciOiJIUzI1NiJ9.concurrent-${i}.signature`);\n\n      // Pre-populate cache for first 3 users\n      for (let i = 0; i < 3; i++) {\n        const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(tokens[i]).digest('hex')}`;\n        await cacheService.set(cacheKey, users[i], 300);\n      }\n\n      // Mock auth service for cache misses\n      jest.spyOn(httpService, 'post').mockImplementation(() => {\n        return of(createAuthResponse(users[0])); // Return any valid user\n      });\n\n      // Act - Concurrent requests with mix of cache hits and misses\n      const promises = tokens.flatMap(token => \n        Array.from({ length: 4 }, async () => {\n          const request = { headers: { authorization: `Bearer ${token}` } };\n          const context = createMockExecutionContext(request);\n          return authGuard.canActivate(context);\n        })\n      );\n\n      const results = await Promise.all(promises);\n\n      // Assert\n      expect(results.every(result => result === true)).toBe(true);\n      expect(results).toHaveLength(20); // 5 tokens × 4 requests each\n    });\n  });\n\n  // ============================================================================\n  // TESTS D'INTÉGRATION - RÉSILIENCE RÉSEAU\n  // ============================================================================\n\n  describe('Network Resilience Integration', () => {\n    it('should handle network timeouts with real HTTP client', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.timeout-test.signature';\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Mock a timeout error\n      jest.spyOn(httpService, 'post').mockReturnValue(\n        throwError(() => ({\n          code: 'ECONNABORTED',\n          message: 'timeout of 5000ms exceeded',\n          name: 'Error',\n        }))\n      );\n\n      await expect(authGuard.canActivate(context)).rejects.toThrow(ServiceUnavailableException);\n    });\n\n    it('should handle network connection errors', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.connection-error.signature';\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Mock connection error\n      jest.spyOn(httpService, 'post').mockReturnValue(\n        throwError(() => ({\n          code: 'ECONNREFUSED',\n          message: 'connect ECONNREFUSED 127.0.0.1:3001',\n          name: 'Error',\n        }))\n      );\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(ServiceUnavailableException);\n    });\n\n    it('should handle DNS resolution errors', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.dns-error.signature';\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Mock DNS error\n      jest.spyOn(httpService, 'post').mockReturnValue(\n        throwError(() => ({\n          code: 'ENOTFOUND',\n          message: 'getaddrinfo ENOTFOUND non-existent-auth-service.local',\n          name: 'Error',\n        }))\n      );\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(ServiceUnavailableException);\n    });\n\n    it('should recover after network issues are resolved', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.recovery-test.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      const httpSpy = jest.spyOn(httpService, 'post');\n\n      // First call fails\n      httpSpy.mockReturnValueOnce(\n        throwError(() => new Error('Network error'))\n      );\n\n      // Second call succeeds\n      httpSpy.mockReturnValueOnce(of(createAuthResponse(user)));\n\n      // Act - First call should fail\n      await expect(authGuard.canActivate(context)).rejects.toThrow(InternalServerErrorException);\n\n      // Second call should succeed\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n    });\n  });\n\n  // ============================================================================\n  // TESTS D'INTÉGRATION - CACHE REDIS RÉEL\n  // ============================================================================\n\n  describe('Real Redis Cache Integration', () => {\n    it('should perform actual Redis operations for cache management', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.redis-test.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert - Verify Redis operations\n      await waitForCache();\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      \n      // Check direct Redis operations\n      const exists = await redisClient.exists(cacheKey);\n      expect(exists).toBe(1);\n\n      const cachedValue = await redisClient.get(cacheKey);\n      expect(cachedValue).not.toBeNull();\n      expect(JSON.parse(cachedValue!)).toEqual(user);\n\n      const ttl = await redisClient.ttl(cacheKey);\n      expect(ttl).toBeGreaterThan(0);\n    });\n\n    it('should handle Redis connection failures gracefully', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.redis-failure.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Simulate Redis failure\n      jest.spyOn(cacheService, 'get').mockRejectedValue(new Error('Redis connection failed'));\n      jest.spyOn(cacheService, 'set').mockRejectedValue(new Error('Redis connection failed'));\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      // Should fallback to auth service when cache fails\n      expect(httpService.post).toHaveBeenCalled();\n    });\n\n    it('should handle cache key collisions properly', async () => {\n      // Arrange\n      const token1 = 'eyJhbGciOiJIUzI1NiJ9.collision-test-1.signature';\n      const token2 = 'eyJhbGciOiJIUzI1NiJ9.collision-test-2.signature';\n      \n      const user1 = { ...createTestUser(), id: 'user-1' };\n      const user2 = { ...createTestUser(), id: 'user-2' };\n\n      // Act - Cache both users\n      jest.spyOn(httpService, 'post')\n        .mockReturnValueOnce(of(createAuthResponse(user1)))\n        .mockReturnValueOnce(of(createAuthResponse(user2)));\n\n      const request1 = { headers: { authorization: `Bearer ${token1}` } };\n      const context1 = createMockExecutionContext(request1);\n      await authGuard.canActivate(context1);\n\n      const request2 = { headers: { authorization: `Bearer ${token2}` } };\n      const context2 = createMockExecutionContext(request2);\n      await authGuard.canActivate(context2);\n\n      // Assert - Verify both users are cached separately\n      await waitForCache();\n      \n      const cacheKey1 = `auth:token:${require('crypto').createHash('sha256').update(token1).digest('hex')}`;\n      const cacheKey2 = `auth:token:${require('crypto').createHash('sha256').update(token2).digest('hex')}`;\n\n      expect(cacheKey1).not.toBe(cacheKey2);\n\n      const cachedUser1 = await cacheService.get(cacheKey1);\n      const cachedUser2 = await cacheService.get(cacheKey2);\n\n      expect(cachedUser1).toEqual(user1);\n      expect(cachedUser2).toEqual(user2);\n    });\n\n    it('should handle cache eviction and expiration correctly', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.expiration-test.signature';\n      const user = createTestUser();\n\n      // Set with very short TTL\n      const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n      await cacheService.set(cacheKey, user, 1); // 1 second TTL\n\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      // Act - First call should hit cache\n      const result1 = await authGuard.canActivate(context);\n      expect(result1).toBe(true);\n\n      // Wait for expiration\n      await new Promise(resolve => setTimeout(resolve, 1100));\n\n      // Setup auth service for cache miss\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Second call should miss cache and hit auth service\n      const result2 = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result2).toBe(true);\n      expect(httpService.post).toHaveBeenCalled();\n    });\n  });\n\n  // ============================================================================\n  // TESTS D'INTÉGRATION - MONITORING ET OBSERVABILITÉ\n  // ============================================================================\n\n  describe('Monitoring and Observability Integration', () => {\n    it('should provide metrics for successful authentications', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.metrics-success.signature';\n      const user = createTestUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      // Mock metrics collection\n      const metricsCollected: any[] = [];\n      const originalConsoleLog = console.log;\n      console.log = (...args) => {\n        if (args[0]?.includes && args[0].includes('AUTH_SUCCESS')) {\n          metricsCollected.push(args);\n        }\n        originalConsoleLog(...args);\n      };\n\n      try {\n        // Act\n        await authGuard.canActivate(context);\n\n        // Assert\n        // In a real implementation, you would verify metrics were sent to your monitoring system\n        expect((request as any).user).toEqual(user);\n      } finally {\n        console.log = originalConsoleLog;\n      }\n    });\n\n    it('should provide metrics for authentication failures', async () => {\n      // Arrange\n      const token = 'eyJhbGciOiJIUzI1NiJ9.metrics-failure.signature';\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      jest.spyOn(httpService, 'post').mockReturnValue(\n        throwError(() => new AxiosError('Unauthorized', '401'))\n      );\n\n      // Mock metrics collection\n      const metricsCollected: any[] = [];\n      const originalConsoleError = console.error;\n      console.error = (...args) => {\n        if (args[0]?.includes && args[0].includes('AUTH_FAILURE')) {\n          metricsCollected.push(args);\n        }\n        originalConsoleError(...args);\n      };\n\n      try {\n        // Act & Assert\n        await expect(authGuard.canActivate(context)).rejects.toThrow(InternalServerErrorException);\n      } finally {\n        console.error = originalConsoleError;\n      }\n    });\n\n    it('should track cache hit/miss ratios', async () => {\n      // Arrange\n      const baseToken = 'eyJhbGciOiJIUzI1NiJ9.cache-metrics';\n      const user = createTestUser();\n\n      // Pre-populate cache for some tokens\n      const cachedTokens = Array.from({ length: 3 }, (_, i) => `${baseToken}-cached-${i}.signature`);\n      const uncachedTokens = Array.from({ length: 7 }, (_, i) => `${baseToken}-uncached-${i}.signature`);\n\n      for (const token of cachedTokens) {\n        const cacheKey = `auth:token:${require('crypto').createHash('sha256').update(token).digest('hex')}`;\n        await cacheService.set(cacheKey, user, 300);\n      }\n\n      jest.spyOn(httpService, 'post').mockReturnValue(of(createAuthResponse(user)));\n\n      let cacheHits = 0;\n      let cacheMisses = 0;\n\n      // Act - Test cache hits\n      for (const token of cachedTokens) {\n        const request = { headers: { authorization: `Bearer ${token}` } };\n        const context = createMockExecutionContext(request);\n        await authGuard.canActivate(context);\n        cacheHits++;\n      }\n\n      // Test cache misses\n      for (const token of uncachedTokens) {\n        const request = { headers: { authorization: `Bearer ${token}` } };\n        const context = createMockExecutionContext(request);\n        await authGuard.canActivate(context);\n        cacheMisses++;\n      }\n\n      // Assert\n      expect(cacheHits).toBe(3);\n      expect(cacheMisses).toBe(7);\n      expect(httpService.post).toHaveBeenCalledTimes(7); // Only cache misses call auth service\n    });\n  });\n});"],"version":3}