{"file":"/Users/nicolasbernard/Desktop/project-service/test/unit/common/guards/auth.guard.spec.ts","mappings":"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","names":[],"sources":["/Users/nicolasbernard/Desktop/project-service/test/unit/common/guards/auth.guard.spec.ts"],"sourcesContent":["// test/unit/common/guards/auth.guard.spec.ts\n\nimport { ExecutionContext, UnauthorizedException, ServiceUnavailableException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { HttpService } from '@nestjs/axios';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { of, throwError } from 'rxjs';\nimport { AxiosResponse, AxiosError } from 'axios';\n\nimport { AuthGuard } from '../../../../src/common/guards/auth.guard';\nimport { CacheService } from '../../../../src/cache/cache.service';\nimport { User } from '../../../../src/common/interfaces/user.interface';\n\ndescribe('AuthGuard - Unit Tests', () => {\n  let authGuard: AuthGuard;\n  let configService: jest.Mocked<ConfigService>;\n  let cacheService: jest.Mocked<CacheService>;\n  let httpService: jest.Mocked<HttpService>;\n\n  // ============================================================================\n  // HELPERS DE TEST\n  // ============================================================================\n\n  const createMockExecutionContext = (request: any): ExecutionContext => {\n    return {\n      switchToHttp: () => ({\n        getRequest: () => request,\n        getResponse: jest.fn(),\n        getNext: jest.fn(),\n      }),\n      switchToRpc: jest.fn(),\n      switchToWs: jest.fn(),\n      getType: () => 'http',\n      getClass: jest.fn(),\n      getHandler: jest.fn(),\n      getArgs: jest.fn(),\n      getArgByIndex: jest.fn(),\n    } as ExecutionContext;\n  };\n\n  const createValidUser = (): User => ({\n    id: 'user-123',\n    email: 'test@example.com',\n    roles: ['user'],\n  });\n\n  const createValidAuthResponse = (user: User = createValidUser()): AxiosResponse => ({\n    data: {\n      valid: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        roles: user.roles,\n      },\n      expiresAt: new Date(Date.now() + 3600000).toISOString(),\n    },\n    status: 200,\n    statusText: 'OK',\n    headers: {},\n    config: {} as any,\n  });\n\n  const createValidToken = (): string => {\n    return 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyLTEyMyIsImVtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsInJvbGVzIjpbInVzZXIiXSwiaWF0IjoxNjE2MjM5MDIyfQ.signature';\n  };\n\n  // ============================================================================\n  // SETUP ET TEARDOWN\n  // ============================================================================\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthGuard,\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn(),\n          },\n        },\n        {\n          provide: CacheService,\n          useValue: {\n            get: jest.fn(),\n            set: jest.fn(),\n            del: jest.fn(),\n          },\n        },\n        {\n          provide: HttpService,\n          useValue: {\n            post: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    authGuard = module.get<AuthGuard>(AuthGuard);\n    configService = module.get(ConfigService);\n    cacheService = module.get(CacheService);\n    httpService = module.get(HttpService);\n\n    // Configuration par défaut\n    configService.get.mockImplementation((key: string) => {\n      switch (key) {\n        case 'AUTH_SERVICE_URL':\n          return 'http://localhost:3001';\n        case 'AUTH_SERVICE_TIMEOUT':\n          return '5000';\n        default:\n          return undefined;\n      }\n    });\n\n    process.env.AUTH_SERVICE_URL = 'http://localhost:3001';\n    process.env.AUTH_SERVICE_TIMEOUT = '5000';\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.restoreAllMocks();\n  });\n\n  // ============================================================================\n  // TESTS UNITAIRES - FONCTIONNEMENT NORMAL\n  // ============================================================================\n\n  describe('canActivate', () => {\n    it('should be defined', () => {\n      expect(authGuard).toBeDefined();\n      expect(authGuard.canActivate).toBeDefined();\n    });\n\n    it('should return true for valid cached user', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(user);\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      expect(cacheService.get).toHaveBeenCalledWith(expect.stringMatching(/^auth:token:/));\n      expect(httpService.post).not.toHaveBeenCalled();\n    });\n\n    it('should return true for valid token from auth service', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null); // Cache miss\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      expect(cacheService.get).toHaveBeenCalled();\n      expect(httpService.post).toHaveBeenCalledWith(\n        'http://localhost:3001/auth/validate',\n        { token },\n        expect.objectContaining({\n          timeout: 5000,\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n        })\n      );\n      expect(cacheService.set).toHaveBeenCalledWith(\n        expect.stringMatching(/^auth:token:/),\n        user,\n        300 // 5 minutes par défaut\n      );\n    });\n\n    it('should inject user into request context', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(user);\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect((request as any).user).toEqual(user);\n      expect((request as any).user).toHaveProperty('id', user.id);\n      expect((request as any).user).toHaveProperty('email', user.email);\n      expect((request as any).user).toHaveProperty('roles', user.roles);\n    });\n\n    it('should handle user with multiple roles', async () => {\n      // Arrange\n      const token = createValidToken();\n      const adminUser: User = {\n        id: 'admin-456',\n        email: 'admin@example.com',\n        roles: ['user', 'admin', 'moderator'],\n      };\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(adminUser)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(adminUser);\n      expect((request as any).user.roles).toContain('user');\n      expect((request as any).user.roles).toContain('admin');\n      expect((request as any).user.roles).toContain('moderator');\n    });\n\n    it('should use cached user and not call auth service', async () => {\n      // Arrange\n      const token = createValidToken();\n      const cachedUser = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(cachedUser);\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect(httpService.post).not.toHaveBeenCalled();\n      expect(cacheService.set).not.toHaveBeenCalled(); // Pas de mise à jour du cache\n      expect((request as any).user).toEqual(cachedUser);\n    });\n  });\n\n  // ============================================================================\n  // TESTS UNITAIRES - GESTION DES ERREURS\n  // ============================================================================\n\n  describe('Error Handling', () => {\n    it('should throw UnauthorizedException when no authorization header', async () => {\n      // Arrange\n      const request = { headers: {} };\n      const context = createMockExecutionContext(request);\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n      await expect(authGuard.canActivate(context)).rejects.toThrow('No token provided');\n\n      expect(cacheService.get).not.toHaveBeenCalled();\n      expect(httpService.post).not.toHaveBeenCalled();\n    });\n\n    it('should throw UnauthorizedException when authorization header is malformed', async () => {\n      // Arrange\n      const malformedHeaders = [\n        'InvalidToken',\n        'Bearer',\n        'Bearer ',\n        'Basic dXNlcjpwYXNz',\n        'Token abc123',\n      ];\n\n      for (const auth of malformedHeaders) {\n        const request = { headers: { authorization: auth } };\n        const context = createMockExecutionContext(request);\n\n        // Act & Assert\n        await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n        await expect(authGuard.canActivate(context)).rejects.toThrow('Invalid token format');\n      }\n    });\n\n    it('should throw UnauthorizedException when token is invalid', async () => {\n      // Arrange\n      const invalidToken = 'invalid.token.signature';\n      const request = { headers: { authorization: `Bearer ${invalidToken}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(throwError(() => new AxiosError('Invalid token', '401')));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n      await expect(authGuard.canActivate(context)).rejects.toThrow('Authentication failed');\n\n      expect(cacheService.get).toHaveBeenCalled();\n      expect(httpService.post).toHaveBeenCalled();\n      expect(cacheService.set).not.toHaveBeenCalled();\n    });\n\n    it('should throw UnauthorizedException when token is expired', async () => {\n      // Arrange\n      const expiredToken = createValidToken();\n      const request = { headers: { authorization: `Bearer ${expiredToken}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(throwError(() => new AxiosError('Token expired', '401')));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n\n      expect(cacheService.get).toHaveBeenCalled();\n      expect(httpService.post).toHaveBeenCalled();\n    });\n\n    it('should throw ServiceUnavailableException when auth service is down', async () => {\n      // Arrange\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(throwError(() => new Error('connect ECONNREFUSED')));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(ServiceUnavailableException);\n      await expect(authGuard.canActivate(context)).rejects.toThrow('Authentication service unavailable');\n    });\n\n    it('should throw ServiceUnavailableException on timeout', async () => {\n      // Arrange\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(throwError(() => new Error('timeout of 5000ms exceeded')));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(ServiceUnavailableException);\n    });\n\n    it('should handle auth service returning invalid response', async () => {\n      // Arrange\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of({\n        data: { valid: false },\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: {} as any,\n      }));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n      await expect(authGuard.canActivate(context)).rejects.toThrow('Authentication failed');\n    });\n\n    it('should handle auth service returning malformed response', async () => {\n      // Arrange\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of({\n        data: { invalid: 'response' },\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: {} as any,\n      }));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n    });\n  });\n\n  // ============================================================================\n  // TESTS UNITAIRES - GESTION DU CACHE\n  // ============================================================================\n\n  describe('Cache Management', () => {\n    it('should set user in cache after successful authentication', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n      cacheService.set.mockResolvedValue();\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect(cacheService.set).toHaveBeenCalledWith(\n        expect.stringMatching(/^auth:token:[a-f0-9]{64}$/),\n        user,\n        300\n      );\n    });\n\n    it('should continue execution even if cache set fails', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n      cacheService.set.mockRejectedValue(new Error('Redis connection failed'));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      expect(cacheService.set).toHaveBeenCalled();\n    });\n\n    it('should continue execution if cache get fails', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockRejectedValue(new Error('Redis connection failed'));\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(user);\n      expect(httpService.post).toHaveBeenCalled(); // Fallback to auth service\n    });\n\n    it('should use correct cache key format', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect(cacheService.get).toHaveBeenCalledWith(\n        expect.stringMatching(/^auth:token:[a-f0-9]{64}$/)\n      );\n      expect(cacheService.set).toHaveBeenCalledWith(\n        expect.stringMatching(/^auth:token:[a-f0-9]{64}$/),\n        user,\n        300\n      );\n\n      // Vérifier que les clés get et set sont identiques\n      const getKey = cacheService.get.mock.calls[0][0];\n      const setKey = cacheService.set.mock.calls[0][0];\n      expect(getKey).toBe(setKey);\n    });\n\n    it('should handle cache returning null gracefully', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect(httpService.post).toHaveBeenCalled();\n      expect(cacheService.set).toHaveBeenCalled();\n    });\n\n    it('should handle cache returning undefined gracefully', async () => {\n      // Arrange\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(undefined);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect(httpService.post).toHaveBeenCalled();\n    });\n  });\n\n  // ============================================================================\n  // TESTS UNITAIRES - CONFIGURATION\n  // ============================================================================\n\n  describe('Configuration', () => {\n    it('should use configured auth service URL', async () => {\n      // Arrange\n      const customUrl = 'https://custom-auth.example.com';\n      configService.get.mockImplementation((key: string) => {\n        if (key === 'AUTH_SERVICE_URL') return customUrl;\n        if (key === 'AUTH_SERVICE_TIMEOUT') return '3000';\n        return undefined;\n      });\n\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect(httpService.post).toHaveBeenCalledWith(\n        `${customUrl}/auth/validate`,\n        { token },\n        expect.any(Object)\n      );\n    });\n\n    it('should use configured timeout', async () => {\n      // Arrange\n      const customTimeout = '10000';\n      configService.get.mockImplementation((key: string) => {\n        if (key === 'AUTH_SERVICE_URL') return 'http://localhost:3001';\n        if (key === 'AUTH_SERVICE_TIMEOUT') return customTimeout;\n        return undefined;\n      });\n\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect(httpService.post).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.any(Object),\n        expect.objectContaining({\n          timeout: 10000,\n        })\n      );\n    });\n\n    it('should use default values when configuration is missing', async () => {\n      // Arrange\n      configService.get.mockReturnValue(undefined);\n      process.env.AUTH_SERVICE_URL = 'http://fallback-auth.local';\n      process.env.AUTH_SERVICE_TIMEOUT = '7500';\n\n      const token = createValidToken();\n      const user = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(user)));\n\n      // Act\n      await authGuard.canActivate(context);\n\n      // Assert\n      expect(httpService.post).toHaveBeenCalledWith(\n        'http://fallback-auth.local/auth/validate',\n        { token },\n        expect.objectContaining({\n          timeout: 7500,\n        })\n      );\n    });\n\n    it('should handle missing environment variables gracefully', async () => {\n      // Arrange\n      configService.get.mockReturnValue(undefined);\n      delete process.env.AUTH_SERVICE_URL;\n      delete process.env.AUTH_SERVICE_TIMEOUT;\n\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow();\n    });\n  });\n\n  // ============================================================================\n  // TESTS UNITAIRES - VALIDATION DES DONNÉES\n  // ============================================================================\n\n  describe('Data Validation', () => {\n    it('should validate user object structure from auth service', async () => {\n      // Arrange\n      const token = createValidToken();\n      const validUser = createValidUser();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(validUser)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      const injectedUser = (request as any).user;\n      expect(injectedUser).toHaveProperty('id');\n      expect(injectedUser).toHaveProperty('email');\n      expect(injectedUser).toHaveProperty('roles');\n      expect(Array.isArray(injectedUser.roles)).toBe(true);\n    });\n\n    it('should handle user with empty roles array', async () => {\n      // Arrange\n      const token = createValidToken();\n      const userWithoutRoles: User = {\n        id: 'user-789',\n        email: 'noroles@example.com',\n        roles: [],\n      };\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of(createValidAuthResponse(userWithoutRoles)));\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(userWithoutRoles);\n      expect((request as any).user.roles).toEqual([]);\n    });\n\n    it('should handle user with special characters in email', async () => {\n      // Arrange\n      const token = createValidToken();\n      const userWithSpecialEmail: User = {\n        id: 'user-special',\n        email: 'user+tag@example-domain.co.uk',\n        roles: ['user'],\n      };\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(userWithSpecialEmail);\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user).toEqual(userWithSpecialEmail);\n    });\n\n    it('should handle user with long ID', async () => {\n      // Arrange\n      const token = createValidToken();\n      const userWithLongId: User = {\n        id: 'user-' + 'a'.repeat(100),\n        email: 'longid@example.com',\n        roles: ['user'],\n      };\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(userWithLongId);\n\n      // Act\n      const result = await authGuard.canActivate(context);\n\n      // Assert\n      expect(result).toBe(true);\n      expect((request as any).user.id).toBe(userWithLongId.id);\n    });\n\n    it('should reject auth response missing user data', async () => {\n      // Arrange\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of({\n        data: {\n          valid: true,\n          // user missing\n          expiresAt: new Date(Date.now() + 3600000).toISOString(),\n        },\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: {} as any,\n      }));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('should reject user missing required fields', async () => {\n      // Arrange\n      const token = createValidToken();\n      const request = { headers: { authorization: `Bearer ${token}` } };\n      const context = createMockExecutionContext(request);\n\n      cacheService.get.mockResolvedValue(null);\n      httpService.post.mockReturnValue(of({\n        data: {\n          valid: true,\n          user: {\n            // id missing\n            email: 'incomplete@example.com',\n            roles: ['user'],\n          },\n          expiresAt: new Date(Date.now() + 3600000).toISOString(),\n        },\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: {} as any,\n      }));\n\n      // Act & Assert\n      await expect(authGuard.canActivate(context)).rejects.toThrow(UnauthorizedException);\n    });\n  });\n});"],"version":3}