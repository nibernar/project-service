{"file":"/Users/nicolasbernard/Desktop/project-service/test/setup/auth-guard-test-setup.ts","mappings":";AAAA,sCAAsC;;AAEtC,4BAA0B;AAE1B,+EAA+E;AAC/E,4CAA4C;AAC5C,+EAA+E;AAE/E,kDAAkD;AAClD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,6DAA6D;AAC7D,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC9B,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,uBAAuB,CAAC;AACvD,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,MAAM,CAAC;AAC1C,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,KAAK,CAAC;AACnC,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,WAAW,CAAC;AACrC,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC;AAEhC,+EAA+E;AAC/E,gBAAgB;AAChB,+EAA+E;AAE/E,gDAAgD;AAChD,MAAM,CAAC,uBAAuB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAY,EAAE,KAAU,EAAE,QAAc,EAAE,EAAE;IACpF,qCAAqC;IACrC,IAAI,CAAE,MAAc,CAAC,kBAAkB,EAAE,CAAC;QACvC,MAAc,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC1C,CAAC;IACA,MAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC;QACtC,IAAI;QACJ,KAAK;QACL,QAAQ;QACR,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;KACtB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,wDAAwD;AACxD,IAAI,OAAO,MAAM,CAAC,EAAE,KAAK,WAAW,EAAE,CAAC;IACrC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;AACxB,CAAC;AAED,+EAA+E;AAC/E,iCAAiC;AACjC,+EAA+E;AAE/E,+CAA+C;AAC/C,MAAM,CAAC,eAAe,GAAG,CAAC,UAAe,EAAE,EAAE,EAAE;IAC7C,MAAM,MAAM,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;IAC5C,MAAM,cAAc,GAAG;QACrB,GAAG,EAAE,eAAe;QACpB,KAAK,EAAE,kBAAkB;QACzB,KAAK,EAAE,CAAC,MAAM,CAAC;QACf,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QAClC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI;QACzC,GAAG,OAAO;KACX,CAAC;IAEF,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAChF,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACzF,MAAM,SAAS,GAAG,gBAAgB,CAAC;IAEnC,OAAO,GAAG,aAAa,IAAI,cAAc,IAAI,SAAS,EAAE,CAAC;AAC3D,CAAC,CAAC;AAEF,6CAA6C;AAC7C,MAAM,CAAC,cAAc,GAAG,CAAC,YAAiB,EAAE,EAAE,EAAE,CAAC,CAAC;IAChD,EAAE,EAAE,eAAe;IACnB,KAAK,EAAE,kBAAkB;IACzB,KAAK,EAAE,CAAC,MAAM,CAAC;IACf,GAAG,SAAS;CACb,CAAC,CAAC;AAEH,4DAA4D;AAC5D,MAAM,CAAC,sBAAsB,GAAG,CAAC,OAAY,MAAM,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;IACxE,IAAI,EAAE;QACJ,KAAK,EAAE,IAAI;QACX,IAAI,EAAE;YACJ,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB;QACD,SAAS,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC,WAAW,EAAE;KACxD;IACD,MAAM,EAAE,GAAG;IACX,UAAU,EAAE,IAAI;IAChB,OAAO,EAAE,EAAE;IACX,MAAM,EAAE,EAAS;CAClB,CAAC,CAAC;AAEH,uCAAuC;AACvC,MAAM,CAAC,kBAAkB,GAAG,KAAK,EAAE,EAAsB,EAA2D,EAAE;IACpH,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IAC1C,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IAE1C,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;IAE1B,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACxC,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IAExC,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,OAAO,CAAC,CAAC,0BAA0B;IAClF,MAAM,MAAM,GAAG;QACb,QAAQ,EAAE,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;QACnD,SAAS,EAAE,SAAS,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;QACtD,QAAQ,EAAE,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;KACpD,CAAC;IAEF,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AACtC,CAAC,CAAC;AAEF,6CAA6C;AAC7C,MAAM,CAAC,OAAO,GAAG,CAAC,EAAU,EAAiB,EAAE;IAC7C,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,kDAAkD;AAClD,MAAM,CAAC,0BAA0B,GAAG,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;IACrD,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;QACnB,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO;QACzB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;KACnB,CAAC;IACF,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;IACtB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,OAAO,EAAE,GAAG,EAAE,CAAC,MAAe;IAC9B,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;IACnB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;IAClB,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;CACzB,CAAC,CAAC;AAEH,+EAA+E;AAC/E,0CAA0C;AAC1C,+EAA+E;AAE/E,8CAA8C;AAC9C,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;AACtC,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;IACnD,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACjC,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,CAAC,OAAO,EAAE,EAAE;IACzC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC;AAEH,sEAAsE;AACtE,SAAS,CAAC,GAAG,EAAE;IACb,IAAI,mBAAmB,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;QACjC,OAAO,CAAC,IAAI,CAAC,YAAY,mBAAmB,CAAC,IAAI,wCAAwC,CAAC,CAAC;QAC3F,mBAAmB,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;AACH,CAAC,CAAC,CAAC;AAEH,+EAA+E;AAC/E,gCAAgC;AAChC,+EAA+E;AAE/E,8CAA8C;AAC9C,MAAM,CAAC,gBAAgB,GAAG,CAAC,OAAe,EAAE,IAAY,EAAE,MAAe,EAAE,EAAE;IAC3E,MAAM,KAAK,GAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;IACtC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC;IAC1B,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC;QACxB,MAAM;QACN,UAAU,EAAE,OAAO;QACnB,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE;QACxB,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,EAAE;KACX,CAAC,CAAC,CAAC,SAAS,CAAC;IACd,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,+EAA+E;AAC/E,6BAA6B;AAC7B,+EAA+E;AAE/E,8BAA8B;AAC9B,SAAS,CAAC,KAAK,IAAI,EAAE;IACnB,wCAAwC;IACxC,IAAK,MAAc,CAAC,kBAAkB,EAAE,CAAC;QACtC,MAAc,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC1C,CAAC;IAED,6CAA6C;IAC7C,IAAI,MAAM,CAAC,EAAE,IAAI,OAAO,MAAM,CAAC,EAAE,KAAK,UAAU,EAAE,CAAC;QACjD,MAAM,CAAC,EAAE,EAAE,CAAC;IACd,CAAC;IAED,mDAAmD;IACnD,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;IAE9B,2EAA2E;IAC3E,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC;AAEH,iCAAiC;AACjC,QAAQ,CAAC,KAAK,IAAI,EAAE;IAClB,sCAAsC;IACtC,OAAO,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;IACjD,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IAE/C,4DAA4D;IAC5D,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC;AAEH,+EAA+E;AAC/E,gDAAgD;AAChD,+EAA+E;AAE/E,oDAAoD;AACpD,MAAM,CAAC,MAAM,CAAC;IACZ,kBAAkB,CAAC,QAAgB;QACjC,MAAM,QAAQ,GAAG,kDAAkD,CAAC;QACpE,MAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErE,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,+BAA+B;gBAClE,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,2BAA2B;gBAC9D,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH,uDAAuD;AACvD,MAAM,CAAC,MAAM,CAAC;IACZ,iBAAiB,CAAC,QAAgB;QAChC,MAAM,aAAa,GAAG,2BAA2B,CAAC;QAClD,MAAM,IAAI,GAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE1E,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,qCAAqC;gBACxE,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,4DAA4D;gBAC/F,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH,sDAAsD;AACtD,MAAM,CAAC,MAAM,CAAC;IACZ,8BAA8B,CAAC,QAAgB,EAAE,SAAiB;QAChE,MAAM,IAAI,GAAG,QAAQ,IAAI,SAAS,CAAC;QAEnC,IAAI,IAAI,EAAE,CAAC;YACT,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,yCAAyC,SAAS,IAAI;gBACzF,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,4CAA4C,SAAS,IAAI;gBAC5F,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH,qDAAqD;AACrD,MAAM,CAAC,MAAM,CAAC;IACZ,aAAa,CAAC,QAAa;QACzB,MAAM,OAAO,GAAG,QAAQ;YACT,OAAO,QAAQ,CAAC,EAAE,KAAK,QAAQ;YAC/B,OAAO,QAAQ,CAAC,KAAK,KAAK,QAAQ;YAClC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC;YACtB,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC5B,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC;QAE7E,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,gCAAgC;gBACnF,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,sDAAsD;gBACzG,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH,+EAA+E;AAC/E,iCAAiC;AACjC,+EAA+E;AAE/E,gDAAgD;AAChD,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC;AACvC,MAAM,oBAAoB,GAAG,OAAO,CAAC,KAAK,CAAC;AAC3C,MAAM,mBAAmB,GAAG,OAAO,CAAC,IAAI,CAAC;AAEzC,mEAAmE;AACnE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC;IACnC,OAAO,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE;QACxB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;YAClF,kBAAkB,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE;QAC1B,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YACxD,oBAAoB,CAAC,GAAG,IAAI,CAAC,CAAC;QAChC,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE;QACzB,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACvD,mBAAmB,CAAC,GAAG,IAAI,CAAC,CAAC;QAC/B,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAED,qCAAqC;AACrC,QAAQ,CAAC,GAAG,EAAE;IACZ,OAAO,CAAC,GAAG,GAAG,kBAAkB,CAAC;IACjC,OAAO,CAAC,KAAK,GAAG,oBAAoB,CAAC;IACrC,OAAO,CAAC,IAAI,GAAG,mBAAmB,CAAC;AACrC,CAAC,CAAC,CAAC","names":[],"sources":["/Users/nicolasbernard/Desktop/project-service/test/setup/auth-guard-test-setup.ts"],"sourcesContent":["// test/setup/auth-guard-test-setup.ts\n\nimport 'reflect-metadata';\n\n// ============================================================================\n// CONFIGURATION GLOBALE DES TESTS AUTHGUARD\n// ============================================================================\n\n// Configuration des timeouts pour les tests longs\njest.setTimeout(30000);\n\n// Configuration des variables d'environnement pour les tests\nprocess.env.NODE_ENV = 'test';\nprocess.env.AUTH_SERVICE_URL = 'http://localhost:3001';\nprocess.env.AUTH_SERVICE_TIMEOUT = '5000';\nprocess.env.AUTH_CACHE_TTL = '300';\nprocess.env.REDIS_HOST = 'localhost';\nprocess.env.REDIS_PORT = '6379';\n\n// ============================================================================\n// MOCKS GLOBAUX\n// ============================================================================\n\n// Mock global pour les métriques de performance\nglobal.recordPerformanceMetric = jest.fn((name: string, value: any, metadata?: any) => {\n  // Stocker les métriques pour analyse\n  if (!(global as any).performanceMetrics) {\n    (global as any).performanceMetrics = [];\n  }\n  (global as any).performanceMetrics.push({\n    name,\n    value,\n    metadata,\n    timestamp: Date.now(),\n  });\n});\n\n// Mock global pour le garbage collector (si disponible)\nif (typeof global.gc === 'undefined') {\n  global.gc = jest.fn();\n}\n\n// ============================================================================\n// HELPERS GLOBAUX POUR LES TESTS\n// ============================================================================\n\n// Helper pour créer des tokens de test valides\nglobal.createTestToken = (payload: any = {}) => {\n  const header = { alg: 'HS256', typ: 'JWT' };\n  const defaultPayload = {\n    sub: 'test-user-123',\n    email: 'test@example.com',\n    roles: ['user'],\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 3600,\n    ...payload,\n  };\n\n  const headerEncoded = Buffer.from(JSON.stringify(header)).toString('base64url');\n  const payloadEncoded = Buffer.from(JSON.stringify(defaultPayload)).toString('base64url');\n  const signature = 'test-signature';\n\n  return `${headerEncoded}.${payloadEncoded}.${signature}`;\n};\n\n// Helper pour créer des utilisateurs de test\nglobal.createTestUser = (overrides: any = {}) => ({\n  id: 'test-user-123',\n  email: 'test@example.com',\n  roles: ['user'],\n  ...overrides,\n});\n\n// Helper pour créer des réponses d'authentification de test\nglobal.createTestAuthResponse = (user: any = global.createTestUser()) => ({\n  data: {\n    valid: true,\n    user: {\n      id: user.id,\n      email: user.email,\n      roles: user.roles,\n    },\n    expiresAt: new Date(Date.now() + 3600000).toISOString(),\n  },\n  status: 200,\n  statusText: 'OK',\n  headers: {},\n  config: {} as any,\n});\n\n// Helper pour mesurer les performances\nglobal.measurePerformance = async (fn: () => Promise<any>): Promise<{ result: any; duration: number; memory: any }> => {\n  const startTime = process.hrtime.bigint();\n  const startMemory = process.memoryUsage();\n  \n  const result = await fn();\n  \n  const endTime = process.hrtime.bigint();\n  const endMemory = process.memoryUsage();\n  \n  const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds\n  const memory = {\n    heapUsed: endMemory.heapUsed - startMemory.heapUsed,\n    heapTotal: endMemory.heapTotal - startMemory.heapTotal,\n    external: endMemory.external - startMemory.external,\n  };\n\n  return { result, duration, memory };\n};\n\n// Helper pour attendre de manière asynchrone\nglobal.waitFor = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\n// Helper pour créer des mocks de ExecutionContext\nglobal.createMockExecutionContext = (request: any) => ({\n  switchToHttp: () => ({\n    getRequest: () => request,\n    getResponse: jest.fn(),\n    getNext: jest.fn(),\n  }),\n  switchToRpc: jest.fn(),\n  switchToWs: jest.fn(),\n  getType: () => 'http' as const,\n  getClass: jest.fn(),\n  getHandler: jest.fn(),\n  getArgs: jest.fn(),\n  getArgByIndex: jest.fn(),\n});\n\n// ============================================================================\n// CONFIGURATION DES ERREURS NON CAPTURÉES\n// ============================================================================\n\n// Gestionnaire pour les rejections non gérées\nconst unhandledRejections = new Set();\nprocess.on('unhandledRejection', (reason, promise) => {\n  unhandledRejections.add(promise);\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\nprocess.on('rejectionHandled', (promise) => {\n  unhandledRejections.delete(promise);\n});\n\n// Vérifier qu'il n'y a pas de rejections non gérées après chaque test\nafterEach(() => {\n  if (unhandledRejections.size > 0) {\n    console.warn(`Warning: ${unhandledRejections.size} unhandled promise rejections detected`);\n    unhandledRejections.clear();\n  }\n});\n\n// ============================================================================\n// CONFIGURATION DES MOCKS AXIOS\n// ============================================================================\n\n// Mock global pour les erreurs Axios communes\nglobal.createAxiosError = (message: string, code: string, status?: number) => {\n  const error: any = new Error(message);\n  error.isAxiosError = true;\n  error.code = code;\n  error.response = status ? {\n    status,\n    statusText: message,\n    data: { error: message },\n    headers: {},\n    config: {},\n  } : undefined;\n  return error;\n};\n\n// ============================================================================\n// CONFIGURATION DU NETTOYAGE\n// ============================================================================\n\n// Nettoyage après chaque test\nafterEach(async () => {\n  // Nettoyer les métriques de performance\n  if ((global as any).performanceMetrics) {\n    (global as any).performanceMetrics = [];\n  }\n  \n  // Forcer le garbage collection si disponible\n  if (global.gc && typeof global.gc === 'function') {\n    global.gc();\n  }\n  \n  // Nettoyer les variables d'environnement modifiées\n  process.env.NODE_ENV = 'test';\n  \n  // Attendre un peu pour permettre aux opérations asynchrones de se terminer\n  await new Promise(resolve => setImmediate(resolve));\n});\n\n// Nettoyage après tous les tests\nafterAll(async () => {\n  // Nettoyer les listeners d'événements\n  process.removeAllListeners('unhandledRejection');\n  process.removeAllListeners('rejectionHandled');\n  \n  // Attendre que toutes les promesses en attente se terminent\n  await new Promise(resolve => setTimeout(resolve, 100));\n});\n\n// ============================================================================\n// CONFIGURATION DES MATCHERS JEST PERSONNALISÉS\n// ============================================================================\n\n// Matcher personnalisé pour vérifier les tokens JWT\nexpect.extend({\n  toBeValidJWTFormat(received: string) {\n    const jwtRegex = /^[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+$/;\n    const pass = typeof received === 'string' && jwtRegex.test(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid JWT format`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid JWT format`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// Matcher personnalisé pour vérifier les clés de cache\nexpect.extend({\n  toBeValidCacheKey(received: string) {\n    const cacheKeyRegex = /^auth:token:[a-f0-9]{64}$/;\n    const pass = typeof received === 'string' && cacheKeyRegex.test(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid cache key format`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid cache key format (auth:token:[64-char-hex])`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// Matcher personnalisé pour vérifier les performances\nexpect.extend({\n  toBeWithinPerformanceThreshold(received: number, threshold: number) {\n    const pass = received <= threshold;\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received}ms to exceed performance threshold of ${threshold}ms`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received}ms to be within performance threshold of ${threshold}ms`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// Matcher personnalisé pour vérifier les objets User\nexpect.extend({\n  toBeValidUser(received: any) {\n    const isValid = received && \n                   typeof received.id === 'string' && \n                   typeof received.email === 'string' && \n                   Array.isArray(received.roles) &&\n                   received.id.length > 0 &&\n                   received.email.includes('@') &&\n                   received.roles.every((role: any) => typeof role === 'string');\n    \n    if (isValid) {\n      return {\n        message: () => `expected ${JSON.stringify(received)} not to be a valid user object`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${JSON.stringify(received)} to be a valid user object with id, email, and roles`,\n        pass: false,\n      };\n    }\n  },\n});\n\n// ============================================================================\n// CONFIGURATION DES LOGS DE TEST\n// ============================================================================\n\n// Configuration du niveau de log pour les tests\nconst originalConsoleLog = console.log;\nconst originalConsoleError = console.error;\nconst originalConsoleWarn = console.warn;\n\n// Filtrer les logs pendant les tests sauf si explicitement activés\nif (!process.env.JEST_VERBOSE_LOGS) {\n  console.log = (...args) => {\n    if (args[0]?.includes && (args[0].includes('TEST_LOG') || args[0].includes('📊'))) {\n      originalConsoleLog(...args);\n    }\n  };\n  \n  console.error = (...args) => {\n    if (args[0]?.includes && args[0].includes('TEST_ERROR')) {\n      originalConsoleError(...args);\n    }\n  };\n  \n  console.warn = (...args) => {\n    if (args[0]?.includes && args[0].includes('TEST_WARN')) {\n      originalConsoleWarn(...args);\n    }\n  };\n}\n\n// Restaurer les logs après les tests\nafterAll(() => {\n  console.log = originalConsoleLog;\n  console.error = originalConsoleError;\n  console.warn = originalConsoleWarn;\n});\n\n// ============================================================================\n// CONFIGURATION DES TYPES TYPESCRIPT POUR LES HELPERS GLOBAUX\n// ============================================================================\n\ndeclare global {\n  function recordPerformanceMetric(name: string, value: any, metadata?: any): void;\n  function createTestToken(payload?: any): string;\n  function createTestUser(overrides?: any): any;\n  function createTestAuthResponse(user?: any): any;\n  function measurePerformance(fn: () => Promise<any>): Promise<{ result: any; duration: number; memory: any }>;\n  function waitFor(ms: number): Promise<void>;\n  function createMockExecutionContext(request: any): any;\n  function createAxiosError(message: string, code: string, status?: number): any;\n  \n  namespace jest {\n    interface Matchers<R> {\n      toBeValidJWTFormat(): R;\n      toBeValidCacheKey(): R;\n      toBeWithinPerformanceThreshold(threshold: number): R;\n      toBeValidUser(): R;\n    }\n  }\n  \n  var performanceMetrics: Array<{\n    name: string;\n    value: any;\n    metadata?: any;\n    timestamp: number;\n  }>;\n}\n\nexport {};"],"version":3}