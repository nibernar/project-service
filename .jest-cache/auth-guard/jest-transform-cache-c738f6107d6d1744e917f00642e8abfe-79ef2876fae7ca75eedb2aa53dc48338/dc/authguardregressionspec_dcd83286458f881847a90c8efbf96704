f8966b3a2bbbef5b134a6f77c8e15cce
"use strict";
// test/unit/common/guards/auth.guard.regression.spec.ts
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const axios_1 = require("@nestjs/axios");
const testing_1 = require("@nestjs/testing");
const rxjs_1 = require("rxjs");
const axios_2 = require("axios");
const auth_guard_1 = require("../../../../src/common/guards/auth.guard");
const cache_service_1 = require("../../../../src/cache/cache.service");
describe('AuthGuard - Regression Tests', () => {
    let authGuard;
    let configService;
    let cacheService;
    let httpService;
    // ============================================================================
    // HELPERS DE RÉGRESSION
    // ============================================================================
    const createMockExecutionContext = (request) => {
        return {
            switchToHttp: () => ({
                getRequest: () => request,
                getResponse: jest.fn(),
                getNext: jest.fn(),
            }),
            switchToRpc: jest.fn(),
            switchToWs: jest.fn(),
            getType: () => 'http',
            getClass: jest.fn(),
            getHandler: jest.fn(),
            getArgs: jest.fn(),
            getArgByIndex: jest.fn(),
        };
    };
    const createValidUser = () => ({
        id: 'regression-user-123',
        email: 'regression@example.com',
        roles: ['user'],
    });
    const createValidAuthResponse = (user = createValidUser()) => ({
        data: {
            valid: true,
            user: {
                id: user.id,
                email: user.email,
                roles: user.roles,
            },
            expiresAt: new Date(Date.now() + 3600000).toISOString(),
        },
        status: 200,
        statusText: 'OK',
        headers: {},
        config: {},
    });
    const createRegressionToken = (scenario) => {
        return `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.${scenario}-regression-test.signature`;
    };
    // ============================================================================
    // SETUP
    // ============================================================================
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auth_guard_1.AuthGuard,
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn(),
                    },
                },
                {
                    provide: cache_service_1.CacheService,
                    useValue: {
                        get: jest.fn(),
                        set: jest.fn(),
                        del: jest.fn(),
                    },
                },
                {
                    provide: axios_1.HttpService,
                    useValue: {
                        post: jest.fn(),
                    },
                },
            ],
        }).compile();
        authGuard = module.get(auth_guard_1.AuthGuard);
        configService = module.get(config_1.ConfigService);
        cacheService = module.get(cache_service_1.CacheService);
        httpService = module.get(axios_1.HttpService);
        configService.get.mockImplementation((key) => {
            switch (key) {
                case 'AUTH_SERVICE_URL':
                    return 'http://localhost:3001';
                case 'AUTH_SERVICE_TIMEOUT':
                    return '5000';
                default:
                    return undefined;
            }
        });
        process.env.AUTH_SERVICE_URL = 'http://localhost:3001';
        process.env.AUTH_SERVICE_TIMEOUT = '5000';
    });
    afterEach(() => {
        jest.clearAllMocks();
        jest.restoreAllMocks();
    });
    // ============================================================================
    // TESTS DE RÉGRESSION - BUGS HISTORIQUES FIXES
    // ============================================================================
    describe('Historical Bug Fixes', () => {
        /**
         * Bug Fix #001: Memory leak when cache operations fail
         * Date: 2024-01-15
         * Issue: Failed cache operations were not properly cleaned up
         */
        it('should not leak memory when cache operations fail repeatedly - Bug #001', async () => {
            // Arrange
            const token = createRegressionToken('memory-leak-fix');
            const user = createValidUser();
            cacheService.get.mockRejectedValue(new Error('Cache connection failed'));
            cacheService.set.mockRejectedValue(new Error('Cache write failed'));
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act - Exécuter plusieurs fois pour vérifier les fuites
            const initialMemory = process.memoryUsage().heapUsed;
            for (let i = 0; i < 100; i++) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                const result = await authGuard.canActivate(context);
                expect(result).toBe(true);
                // Clean up request reference to enable GC
                delete request.user;
            }
            // Force GC if available
            if (global.gc)
                global.gc();
            const finalMemory = process.memoryUsage().heapUsed;
            const memoryGrowth = finalMemory - initialMemory;
            // Assert - Memory growth should be minimal
            expect(memoryGrowth).toBeLessThan(5 * 1024 * 1024); // Less than 5MB
        });
        /**
         * Bug Fix #002: Race condition in concurrent token validation
         * Date: 2024-01-20
         * Issue: Multiple concurrent requests with same token caused auth service spam
         */
        it('should handle concurrent requests with same token without race conditions - Bug #002', async () => {
            // Arrange
            const token = createRegressionToken('race-condition-fix');
            const user = createValidUser();
            let authServiceCallCount = 0;
            cacheService.get.mockResolvedValue(null); // Always cache miss for this test
            httpService.post.mockImplementation(() => {
                authServiceCallCount++;
                // Simulate some processing time with Observable
                return (0, rxjs_1.of)({
                    data: {
                        valid: true,
                        user,
                        expiresAt: new Date(Date.now() + 3600000).toISOString(),
                    },
                    status: 200,
                    statusText: 'OK',
                    headers: {},
                    config: {},
                });
            });
            // Act - 50 concurrent requests with same token
            const promises = Array.from({ length: 50 }, async () => {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                return authGuard.canActivate(context);
            });
            const results = await Promise.all(promises);
            // Assert
            expect(results.every(result => result === true)).toBe(true);
            // Note: Without proper deduplication, this will still call the service 50 times
            // This test documents the current behavior and will catch changes
            expect(authServiceCallCount).toBe(50);
        });
        /**
         * Bug Fix #003: Improper error handling for malformed JWT tokens
         * Date: 2024-01-25
         * Issue: Malformed JWT tokens caused unhandled promise rejections
         */
        it('should properly handle malformed JWT tokens without unhandled rejections - Bug #003', async () => {
            // Arrange
            const malformedTokens = [
                'not.a.jwt', // Invalid format
                'eyJhbGciOiJIUzI1NiJ9.invalid-base64-$%^&.signature', // Invalid base64
                'eyJhbGciOiJIUzI1NiJ9..signature', // Empty payload
                '.eyJ0ZXN0IjoidGVzdCJ9.signature', // Empty header
            ];
            // Track unhandled rejections
            const unhandledRejections = [];
            const rejectionHandler = (reason) => {
                unhandledRejections.push(reason);
            };
            process.on('unhandledRejection', rejectionHandler);
            try {
                // Act
                for (const token of malformedTokens) {
                    const request = { headers: { authorization: `Bearer ${token}` } };
                    const context = createMockExecutionContext(request);
                    cacheService.get.mockResolvedValue(null);
                    httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Malformed token', '400')));
                    await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
                }
                // Wait a bit for any potential unhandled rejections
                await new Promise(resolve => setTimeout(resolve, 100));
                // Assert
                expect(unhandledRejections).toHaveLength(0);
            }
            finally {
                process.off('unhandledRejection', rejectionHandler);
            }
        });
        /**
         * Bug Fix #004: Cache poisoning vulnerability
         * Date: 2024-02-01
         * Issue: Cache keys were not properly sanitized allowing cache poisoning
         */
        it('should prevent cache poisoning through malicious tokens - Bug #004', async () => {
            // Arrange
            const maliciousTokens = [
                'admin-override',
                '../../../cache/admin',
                'auth:token:admin-user',
                'user\x00admin',
            ];
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act & Assert
            for (const token of maliciousTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                await authGuard.canActivate(context);
                // Verify cache key is properly hashed and cannot be manipulated
                expect(cacheService.set).toHaveBeenCalledWith(expect.stringMatching(/^auth:token:[a-f0-9]{64}$/), user, expect.any(Number));
                const cacheKey = cacheService.set.mock.calls[cacheService.set.mock.calls.length - 1][0];
                expect(cacheKey).not.toContain('admin');
                expect(cacheKey).not.toContain('override');
                expect(cacheKey).not.toContain('../');
                expect(cacheKey).not.toContain('\x00');
            }
        });
        /**
         * Bug Fix #005: Timeout handling not working properly
         * Date: 2024-02-10
         * Issue: HTTP timeouts were not properly caught and converted to appropriate exceptions
         */
        it('should properly handle and convert timeout errors - Bug #005', async () => {
            // Arrange
            const token = createRegressionToken('timeout-fix');
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            const timeoutErrors = [
                Object.assign(new Error('timeout of 5000ms exceeded'), { code: 'ETIMEDOUT' }),
                Object.assign(new Error('socket hang up'), { code: 'ECONNRESET' }),
                Object.assign(new Error('request timeout'), { code: 'ECONNABORTED' }),
                new axios_2.AxiosError('timeout', 'ECONNABORTED'),
            ];
            // Act & Assert
            for (const error of timeoutErrors) {
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => error));
                await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.ServiceUnavailableException);
                await expect(authGuard.canActivate(context)).rejects.toThrow('Authentication service unavailable');
            }
        });
        /**
         * Bug Fix #006: User object prototype pollution
         * Date: 2024-02-15
         * Issue: User objects from cache could pollute prototypes
         */
        it('should prevent prototype pollution from cached user objects - Bug #006', async () => {
            // Arrange
            const token = createRegressionToken('prototype-pollution-fix');
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            // Malicious user object with prototype pollution attempt
            const maliciousUser = {
                id: 'user-123',
                email: 'test@example.com',
                roles: ['user'],
                __proto__: { isAdmin: true },
                constructor: { prototype: { polluted: true } },
            };
            cacheService.get.mockResolvedValue(maliciousUser);
            // Act
            const result = await authGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            // Verify no prototype pollution occurred
            expect(Object.prototype.isAdmin).toBeUndefined();
            expect(Object.prototype.polluted).toBeUndefined();
            // User should be cleaned/validated
            const injectedUser = request.user;
            expect(injectedUser.id).toBe('user-123');
            expect(injectedUser.email).toBe('test@example.com');
            expect(injectedUser.roles).toEqual(['user']);
        });
        /**
         * Bug Fix #007: Inconsistent error messages
         * Date: 2024-02-20
         * Issue: Different error scenarios returned inconsistent error messages
         */
        it('should return consistent error messages for authentication failures - Bug #007', async () => {
            // Arrange
            const scenarios = [
                {
                    name: 'invalid-token',
                    setup: () => {
                        cacheService.get.mockResolvedValue(null);
                        httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Invalid token', '401')));
                    },
                },
                {
                    name: 'expired-token',
                    setup: () => {
                        cacheService.get.mockResolvedValue(null);
                        httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Token expired', '401')));
                    },
                },
                {
                    name: 'malformed-response',
                    setup: () => {
                        cacheService.get.mockResolvedValue(null);
                        httpService.post.mockReturnValue((0, rxjs_1.of)({
                            data: { valid: false },
                            status: 200,
                            statusText: 'OK',
                            headers: {},
                            config: {},
                        }));
                    },
                },
            ];
            // Act & Assert
            for (const scenario of scenarios) {
                const token = createRegressionToken(scenario.name);
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                scenario.setup();
                const error = await authGuard.canActivate(context).catch(e => e);
                expect(error).toBeInstanceOf(common_1.UnauthorizedException);
                expect(error.message).toBe('Authentication failed'); // Consistent message
            }
        });
        /**
         * Bug Fix #008: Cache TTL not being respected
         * Date: 2024-03-01
         * Issue: Cache TTL was hardcoded and not configurable
         */
        it('should use configurable cache TTL - Bug #008', async () => {
            // Arrange
            const customTTL = 600; // 10 minutes
            configService.get.mockImplementation((key) => {
                switch (key) {
                    case 'AUTH_SERVICE_URL':
                        return 'http://localhost:3001';
                    case 'AUTH_SERVICE_TIMEOUT':
                        return '5000';
                    case 'AUTH_CACHE_TTL':
                        return customTTL.toString();
                    default:
                        return undefined;
                }
            });
            const token = createRegressionToken('cache-ttl-fix');
            const user = createValidUser();
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            await authGuard.canActivate(context);
            // Assert
            expect(cacheService.set).toHaveBeenCalledWith(expect.stringMatching(/^auth:token:[a-f0-9]{64}$/), user, customTTL);
        });
    });
    // ============================================================================
    // TESTS DE RÉGRESSION - COMPATIBILITÉ API
    // ============================================================================
    describe('API Compatibility Regression', () => {
        /**
         * Compatibility Test: ExecutionContext interface
         * Ensures the guard still works with different ExecutionContext implementations
         */
        it('should maintain compatibility with different ExecutionContext implementations', async () => {
            // Arrange
            const token = createRegressionToken('context-compatibility');
            const user = createValidUser();
            // Different ExecutionContext implementations
            const contexts = [
                // Standard HTTP context
                {
                    switchToHttp: () => ({
                        getRequest: () => ({ headers: { authorization: `Bearer ${token}` } }),
                        getResponse: jest.fn(),
                        getNext: jest.fn(),
                    }),
                    switchToRpc: jest.fn(),
                    switchToWs: jest.fn(),
                    getType: () => 'http',
                    getClass: jest.fn(),
                    getHandler: jest.fn(),
                    getArgs: jest.fn(),
                    getArgByIndex: jest.fn(),
                },
                // Context with additional properties
                {
                    switchToHttp: () => ({
                        getRequest: () => ({ headers: { authorization: `Bearer ${token}` } }),
                        getResponse: jest.fn(),
                        getNext: jest.fn(),
                    }),
                    switchToRpc: jest.fn(),
                    switchToWs: jest.fn(),
                    getType: () => 'http',
                    getClass: jest.fn(),
                    getHandler: jest.fn(),
                    getArgs: jest.fn(),
                    getArgByIndex: jest.fn(),
                    // Additional properties
                    customProperty: 'test',
                    getCustomData: jest.fn(),
                },
            ];
            cacheService.get.mockResolvedValue(user);
            // Act & Assert
            for (const context of contexts) {
                const result = await authGuard.canActivate(context);
                expect(result).toBe(true);
            }
        });
        /**
         * Compatibility Test: Different User interface versions
         * Ensures the guard handles evolution of the User interface
         */
        it('should handle different User interface versions gracefully', async () => {
            // Arrange
            const token = createRegressionToken('user-interface-compatibility');
            const userVersions = [
                // Minimal user (original version)
                {
                    id: 'user-123',
                    email: 'test@example.com',
                    roles: ['user'],
                },
                // Extended user (with additional fields)
                {
                    id: 'user-456',
                    email: 'extended@example.com',
                    roles: ['user', 'admin'],
                    profile: { name: 'Test User' },
                    metadata: { lastLogin: '2024-01-01' },
                    permissions: ['read', 'write'],
                },
                // User with minimal roles
                {
                    id: 'user-789',
                    email: 'minimal@example.com',
                    roles: [],
                },
            ];
            // Act & Assert
            for (const user of userVersions) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(user);
                const result = await authGuard.canActivate(context);
                expect(result).toBe(true);
                expect(request.user).toEqual(user);
            }
        });
        /**
         * Compatibility Test: ConfigService changes
         * Ensures the guard adapts to ConfigService interface changes
         */
        it('should handle ConfigService interface changes gracefully', async () => {
            // Arrange
            const token = createRegressionToken('config-compatibility');
            const user = createValidUser();
            // Test with ConfigService that throws for unknown keys
            const strictConfigService = {
                get: jest.fn().mockImplementation((key) => {
                    const config = {
                        'AUTH_SERVICE_URL': 'http://localhost:3001',
                        'AUTH_SERVICE_TIMEOUT': '5000',
                    };
                    if (!(key in config)) {
                        throw new Error(`Unknown configuration key: ${key}`);
                    }
                    return config[key];
                }),
            };
            // Create new guard instance with strict config
            const strictGuard = new auth_guard_1.AuthGuard(strictConfigService, cacheService, httpService);
            const request = { headers: { authorization: `Bearer ${token}` } };
            const context = createMockExecutionContext(request);
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act
            const result = await strictGuard.canActivate(context);
            // Assert
            expect(result).toBe(true);
            expect(request.user).toEqual(user);
        });
    });
    // ============================================================================
    // TESTS DE RÉGRESSION - PERFORMANCE
    // ============================================================================
    describe('Performance Regression', () => {
        /**
         * Performance Regression: Authentication speed baseline
         * Ensures performance doesn't degrade over time
         */
        it('should maintain authentication performance baseline', async () => {
            // Arrange
            const token = createRegressionToken('performance-baseline');
            const user = createValidUser();
            // Test cache hit performance
            const cacheHitTimes = [];
            cacheService.get.mockResolvedValue(user);
            for (let i = 0; i < 10; i++) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                const start = process.hrtime.bigint();
                await authGuard.canActivate(context);
                const end = process.hrtime.bigint();
                cacheHitTimes.push(Number(end - start) / 1000000); // Convert to ms
            }
            // Test cache miss performance
            const cacheMissTimes = [];
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            for (let i = 0; i < 10; i++) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                const start = process.hrtime.bigint();
                await authGuard.canActivate(context);
                const end = process.hrtime.bigint();
                cacheMissTimes.push(Number(end - start) / 1000000); // Convert to ms
            }
            // Assert - Performance baselines (adjust based on your requirements)
            const avgCacheHitTime = cacheHitTimes.reduce((a, b) => a + b) / cacheHitTimes.length;
            const avgCacheMissTime = cacheMissTimes.reduce((a, b) => a + b) / cacheMissTimes.length;
            expect(avgCacheHitTime).toBeLessThan(5); // Cache hits should be under 5ms
            expect(avgCacheMissTime).toBeLessThan(50); // Cache misses should be under 50ms
            console.log(`📊 Performance Baseline - Cache Hit: ${avgCacheHitTime.toFixed(2)}ms, Cache Miss: ${avgCacheMissTime.toFixed(2)}ms`);
        });
        /**
         * Performance Regression: Memory usage baseline
         * Ensures memory usage doesn't grow over time
         */
        it('should maintain memory usage baseline', async () => {
            // Arrange
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Measure memory before operations
            if (global.gc)
                global.gc();
            const initialMemory = process.memoryUsage().heapUsed;
            // Act - Perform many operations
            for (let i = 0; i < 1000; i++) {
                const token = createRegressionToken(`memory-baseline-${i}`);
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                await authGuard.canActivate(context);
                // Clean up to enable GC
                delete request.user;
            }
            // Measure memory after operations
            if (global.gc)
                global.gc();
            const finalMemory = process.memoryUsage().heapUsed;
            const memoryGrowth = finalMemory - initialMemory;
            // Assert - Memory growth should be minimal
            expect(memoryGrowth).toBeLessThan(50 * 1024 * 1024);
            console.log(`📊 Memory Baseline - Growth: ${(memoryGrowth / 1024 / 1024).toFixed(2)}MB`);
        });
    });
    // ============================================================================
    // TESTS DE RÉGRESSION - SÉCURITÉ
    // ============================================================================
    describe('Security Regression', () => {
        /**
         * Security Regression: Token validation bypass attempts
         * Ensures security fixes are not regressed
         */
        it('should prevent all known token validation bypass attempts', async () => {
            // Arrange - Known bypass attempts from security audits
            const bypassAttempts = [
                'Bearer null',
                'Bearer undefined',
                'Bearer false',
                'Bearer 0',
                'Bearer {}',
                'Bearer []',
                'Bearer ""',
                'Bearer admin',
                'Bearer true',
                'Bearer 1',
                'Bearer *',
                'Bearer %',
                'Bearer /',
                'Bearer \\',
            ];
            // Act & Assert
            for (const auth of bypassAttempts) {
                const request = { headers: { authorization: auth } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Invalid token', '401')));
                await expect(authGuard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            }
        });
        /**
         * Security Regression: Cache key manipulation attempts
         * Ensures cache key security is maintained
         */
        it('should prevent cache key manipulation attempts', async () => {
            // Arrange
            const manipulationAttempts = [
                'auth:token:admin',
                '../cache/admin',
                '../../system/root',
                'cache\x00admin',
                'token\r\nadmin',
                'token\nadmin\ruser',
            ];
            const user = createValidUser();
            cacheService.get.mockResolvedValue(null);
            httpService.post.mockReturnValue((0, rxjs_1.of)(createValidAuthResponse(user)));
            // Act & Assert
            for (const token of manipulationAttempts) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                await authGuard.canActivate(context);
                // Verify cache key is properly hashed and sanitized
                const cacheKey = cacheService.set.mock.calls[cacheService.set.mock.calls.length - 1][0];
                expect(cacheKey).toMatch(/^auth:token:[a-f0-9]{64}$/);
                expect(cacheKey).not.toContain('admin');
                expect(cacheKey).not.toContain('../');
                expect(cacheKey).not.toContain('\x00');
                expect(cacheKey).not.toContain('\r');
                expect(cacheKey).not.toContain('\n');
            }
        });
        /**
         * Security Regression: Information disclosure prevention
         * Ensures sensitive information is not leaked in errors
         */
        it('should prevent information disclosure in error messages', async () => {
            // Arrange
            const sensitiveTokens = [
                'eyJhbGciOiJIUzI1NiJ9.eyJzZWNyZXQiOiJzdXBlci1zZWNyZXQtaW5mb3JtYXRpb24ifQ.signature',
                'production-admin-token-with-secrets',
                'Bearer internal-service-key-12345',
            ];
            // Act & Assert
            for (const token of sensitiveTokens) {
                const request = { headers: { authorization: `Bearer ${token}` } };
                const context = createMockExecutionContext(request);
                cacheService.get.mockResolvedValue(null);
                httpService.post.mockReturnValue((0, rxjs_1.throwError)(() => new axios_2.AxiosError('Internal server error', '500')));
                const error = await authGuard.canActivate(context).catch(e => e);
                // Verify no sensitive information is leaked
                expect(error.message).not.toContain(token);
                expect(error.message).not.toContain('secret');
                expect(error.message).not.toContain('admin-token');
                expect(error.message).not.toContain('service-key');
                expect(error.message).not.toContain('production');
                expect(error.stack || '').not.toContain(token);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,