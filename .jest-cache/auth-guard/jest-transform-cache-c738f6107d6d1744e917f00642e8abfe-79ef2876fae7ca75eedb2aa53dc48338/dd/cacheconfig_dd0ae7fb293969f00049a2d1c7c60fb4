b49f55beb558194a8eb3eea37daf5fdc
"use strict";
// src/config/cache.config.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheTimeToLive = exports.CacheKeyPatterns = exports.CacheEnvironmentMappings = exports.CacheConnectionLimits = exports.CacheValidator = exports.CacheConfigurationFactory = exports.cacheConfig = exports.CacheConfigFactory = exports.CacheConfigValidator = exports.ENVIRONMENT_MAPPINGS = exports.SERIALIZATION_MODES = exports.CACHE_TTL = exports.CACHE_KEYS = exports.CACHE_LIMITS = exports.CacheConnectionError = exports.CacheValidationError = exports.CacheConfigurationError = void 0;
exports.getCacheConfig = getCacheConfig;
exports.calculateOptimalPoolSize = calculateOptimalPoolSize;
const config_1 = require("@nestjs/config");
// ============================================================================
// ERREURS PERSONNALISÉES
// ============================================================================
class CacheConfigurationError extends Error {
    variable;
    value;
    constructor(message, variable, value) {
        super(message);
        this.variable = variable;
        this.value = value;
        this.name = 'CacheConfigurationError';
    }
}
exports.CacheConfigurationError = CacheConfigurationError;
class CacheValidationError extends CacheConfigurationError {
    suggestion;
    constructor(message, variable, value, suggestion) {
        super(message, variable, value);
        this.suggestion = suggestion;
        this.name = 'CacheValidationError';
    }
}
exports.CacheValidationError = CacheValidationError;
class CacheConnectionError extends CacheConfigurationError {
    originalError;
    constructor(message, originalError) {
        super(message);
        this.originalError = originalError;
        this.name = 'CacheConnectionError';
    }
}
exports.CacheConnectionError = CacheConnectionError;
// ============================================================================
// CONSTANTES ET VALEURS PAR DÉFAUT
// ============================================================================
exports.CACHE_LIMITS = {
    development: {
        minConnections: 1,
        maxConnections: 10,
        recommendedConnections: 3,
        defaultTtl: 300,
        maxTtl: 3600
    },
    test: {
        minConnections: 1,
        maxConnections: 3,
        recommendedConnections: 1,
        defaultTtl: 30,
        maxTtl: 300
    },
    staging: {
        minConnections: 5,
        maxConnections: 25,
        recommendedConnections: 10,
        defaultTtl: 600,
        maxTtl: 7200
    },
    production: {
        minConnections: 10,
        maxConnections: 100,
        recommendedConnections: 25,
        defaultTtl: 900,
        maxTtl: 14400
    }
};
exports.CacheConnectionLimits = exports.CACHE_LIMITS;
exports.CACHE_KEYS = {
    PROJECT: (id) => `project:${id}`,
    PROJECT_LIST: (userId, page, limit) => `projects:${userId}:${page}:${limit}`,
    PROJECT_STATISTICS: (projectId) => `stats:${projectId}`,
    USER_PROJECTS_COUNT: (userId) => `count:projects:${userId}`,
    PROJECT_SEARCH: (userId, query) => `search:${userId}:${query}`,
    EXPORT_STATUS: (exportId) => `export:status:${exportId}`,
    RATE_LIMIT: (userId, action) => `ratelimit:${userId}:${action}`,
};
exports.CacheKeyPatterns = exports.CACHE_KEYS;
exports.CACHE_TTL = {
    PROJECT: 300, // 5 minutes
    PROJECT_LIST: 60, // 1 minute
    PROJECT_STATISTICS: 600, // 10 minutes
    USER_PROJECTS_COUNT: 120, // 2 minutes
    PROJECT_SEARCH: 180, // 3 minutes
    EXPORT_STATUS: 1800, // 30 minutes
    RATE_LIMIT: 3600, // 1 hour
};
exports.CacheTimeToLive = exports.CACHE_TTL;
exports.SERIALIZATION_MODES = ['json', 'msgpack', 'buffer'];
exports.ENVIRONMENT_MAPPINGS = {
    REDIS_HOST: 'connection.host',
    REDIS_PORT: 'connection.port',
    REDIS_PASSWORD: 'connection.password',
    REDIS_USERNAME: 'connection.username',
    REDIS_DB: 'connection.db',
    REDIS_CONNECT_TIMEOUT: 'connection.connectTimeout',
    CACHE_TTL: 'performance.defaultTtl',
    REDIS_MAX_CONNECTIONS: 'performance.maxConnections',
    REDIS_MIN_CONNECTIONS: 'performance.minConnections',
    REDIS_RESPONSE_TIMEOUT: 'performance.responseTimeout',
    REDIS_RETRY_DELAY: 'retry.retryDelayOnFailover',
    REDIS_MAX_RETRIES: 'retry.maxRetriesPerRequest',
    REDIS_KEY_PREFIX: 'serialization.keyPrefix',
    REDIS_COMPRESSION: 'serialization.compression',
    REDIS_ENABLE_METRICS: 'monitoring.enabled',
    REDIS_HEALTH_CHECK_INTERVAL: 'monitoring.healthCheckInterval',
    REDIS_ENABLE_TLS: 'security.enableTLS',
    REDIS_TLS_REJECT_UNAUTHORIZED: 'security.tlsRejectUnauthorized',
    REDIS_CLUSTER_ENABLED: 'cluster.enabled',
};
exports.CacheEnvironmentMappings = exports.ENVIRONMENT_MAPPINGS;
// ============================================================================
// CLASSES DE VALIDATION
// ============================================================================
class CacheConfigValidator {
    /**
     * Valide la configuration de connexion Redis
     */
    static validateConnectionConfig(config) {
        if (!config.host) {
            throw new CacheValidationError('Redis host is required', 'REDIS_HOST', config.host, 'Use localhost for development or a valid hostname/IP');
        }
        if (config.port < 1 || config.port > 65535) {
            throw new CacheValidationError('Redis port must be between 1 and 65535', 'REDIS_PORT', config.port, 'Use 6379 for default Redis port');
        }
        if (config.db < 0 || config.db > 15) {
            throw new CacheValidationError('Redis database number must be between 0 and 15', 'REDIS_DB', config.db, 'Use 0 for default database');
        }
        if (config.connectTimeout <= 0) {
            throw new CacheValidationError('Connection timeout must be greater than 0', 'REDIS_CONNECT_TIMEOUT', config.connectTimeout, 'Use a positive number in milliseconds like 10000');
        }
    }
    /**
     * Valide la configuration de performance
     */
    static validatePerformanceConfig(config) {
        if (config.maxConnections <= 0) {
            throw new CacheValidationError('Maximum connections must be greater than 0', 'REDIS_MAX_CONNECTIONS', config.maxConnections, 'Use a positive number like 10');
        }
        if (config.minConnections >= config.maxConnections) {
            throw new CacheValidationError('Minimum connections must be less than maximum connections', 'REDIS_MIN_CONNECTIONS', config.minConnections, `Set REDIS_MIN_CONNECTIONS < ${config.maxConnections}`);
        }
        if (config.defaultTtl <= 0) {
            throw new CacheValidationError('Default TTL must be greater than 0', 'CACHE_TTL', config.defaultTtl, 'Use a positive number in seconds like 300');
        }
        if (config.responseTimeout <= 0) {
            throw new CacheValidationError('Response timeout must be greater than 0', 'REDIS_RESPONSE_TIMEOUT', config.responseTimeout, 'Use a positive number in milliseconds like 5000');
        }
    }
    /**
     * Valide les variables d'environnement requises
     */
    static validateEnvironmentVariables() {
        // Aucune variable n'est absolument requise car Redis peut fonctionner avec des défauts
        // Mais on avertit sur les importantes
        const nodeEnv = process.env.NODE_ENV || 'development';
        if (nodeEnv === 'production') {
            const productionImportantVars = [
                'REDIS_HOST',
                'REDIS_PASSWORD',
                'REDIS_MAX_CONNECTIONS'
            ];
            productionImportantVars.forEach(varName => {
                if (!process.env[varName]) {
                    console.warn(`⚠️  Production environment variable not set: ${varName}`);
                }
            });
        }
        // Validation de l'URL Redis si fournie
        if (process.env.REDIS_URL) {
            try {
                new URL(process.env.REDIS_URL);
            }
            catch (error) {
                throw new CacheValidationError('Invalid Redis URL format', 'REDIS_URL', process.env.REDIS_URL, 'Format: redis://[:password@]host[:port][/database]');
            }
        }
    }
    /**
     * Valide la cohérence de la configuration complète
     */
    static validateCompleteConfig(config) {
        this.validateConnectionConfig(config.connection);
        this.validatePerformanceConfig(config.performance);
        // Validation de cohérence entre composants
        if (config.cluster.enabled && config.cluster.nodes.length === 0) {
            throw new CacheConfigurationError('Cluster mode enabled but no nodes configured');
        }
        if (config.security.enableTLS && !config.security.tlsRejectUnauthorized &&
            process.env.NODE_ENV === 'production') {
            console.warn('⚠️  TLS enabled but certificate verification disabled in production');
        }
        if (config.serialization.compression && config.serialization.compressionThreshold <= 0) {
            throw new CacheValidationError('Compression threshold must be greater than 0 when compression is enabled', 'REDIS_COMPRESSION_THRESHOLD', config.serialization.compressionThreshold, 'Use a positive number in bytes like 1024');
        }
    }
}
exports.CacheConfigValidator = CacheConfigValidator;
exports.CacheValidator = CacheConfigValidator;
// ============================================================================
// FACTORY DE CONFIGURATION
// ============================================================================
class CacheConfigFactory {
    /**
     * Point d'entrée principal pour créer la configuration complète
     */
    static create(options = {}) {
        try {
            // Mode debug en développement
            if (process.env.NODE_ENV === 'development' && process.env.DEBUG_CONFIG === 'true') {
                this.debugEnvironmentVariables();
            }
            // Validation préliminaire
            CacheConfigValidator.validateEnvironmentVariables();
            const nodeEnv = process.env.NODE_ENV || 'development';
            const config = this.createForEnvironment(nodeEnv);
            // Validation complète si mode strict
            if (options.strict !== false) {
                CacheConfigValidator.validateCompleteConfig(config);
            }
            return config;
        }
        catch (error) {
            console.error('❌ Cache Configuration Error:', error.message);
            throw error;
        }
    }
    /**
     * Crée une configuration spécifique à l'environnement
     */
    static createForEnvironment(env) {
        const actualEnv = env || process.env.NODE_ENV || 'development';
        switch (actualEnv) {
            case 'development':
                return this.createDevelopmentConfig();
            case 'test':
                return this.createTestConfig();
            case 'staging':
                return this.createStagingConfig();
            case 'production':
                return this.createProductionConfig();
            default:
                console.warn(`⚠️  Unknown environment "${actualEnv}", using development config`);
                return this.createDevelopmentConfig();
        }
    }
    /**
     * Configuration optimisée pour le développement
     */
    static createDevelopmentConfig() {
        const limits = exports.CACHE_LIMITS.development;
        return {
            connection: this.createConnectionConfig('development'),
            performance: this.createPerformanceConfig('development', limits),
            retry: this.createRetryConfig('development'),
            serialization: this.createSerializationConfig('development'),
            monitoring: this.createMonitoringConfig('development'),
            security: this.createSecurityConfig('development'),
            cluster: this.createClusterConfig('development'),
            features: this.createFeaturesConfig('development')
        };
    }
    /**
     * Configuration optimisée pour les tests
     */
    static createTestConfig() {
        const limits = exports.CACHE_LIMITS.test;
        return {
            connection: this.createConnectionConfig('test'),
            performance: this.createPerformanceConfig('test', limits),
            retry: this.createRetryConfig('test'),
            serialization: this.createSerializationConfig('test'),
            monitoring: this.createMonitoringConfig('test'),
            security: this.createSecurityConfig('test'),
            cluster: this.createClusterConfig('test'),
            features: this.createFeaturesConfig('test')
        };
    }
    /**
     * Configuration optimisée pour le staging
     */
    static createStagingConfig() {
        const limits = exports.CACHE_LIMITS.staging;
        return {
            connection: this.createConnectionConfig('staging'),
            performance: this.createPerformanceConfig('staging', limits),
            retry: this.createRetryConfig('staging'),
            serialization: this.createSerializationConfig('staging'),
            monitoring: this.createMonitoringConfig('staging'),
            security: this.createSecurityConfig('staging'),
            cluster: this.createClusterConfig('staging'),
            features: this.createFeaturesConfig('staging')
        };
    }
    /**
     * Configuration optimisée pour la production
     */
    static createProductionConfig() {
        const limits = exports.CACHE_LIMITS.production;
        return {
            connection: this.createConnectionConfig('production'),
            performance: this.createPerformanceConfig('production', limits),
            retry: this.createRetryConfig('production'),
            serialization: this.createSerializationConfig('production'),
            monitoring: this.createMonitoringConfig('production'),
            security: this.createSecurityConfig('production'),
            cluster: this.createClusterConfig('production'),
            features: this.createFeaturesConfig('production')
        };
    }
    /**
     * Crée la configuration de connexion
     */
    static createConnectionConfig(env) {
        // Parse Redis URL si fournie
        const redisUrl = process.env.REDIS_URL;
        if (redisUrl) {
            return this.parseRedisUrl(redisUrl, env);
        }
        return {
            host: process.env.REDIS_HOST || 'localhost',
            port: this.parseInt(process.env.REDIS_PORT, 6379),
            password: process.env.REDIS_PASSWORD,
            username: process.env.REDIS_USERNAME,
            db: this.parseInt(process.env.REDIS_DB, env === 'test' ? 1 : 0),
            family: this.parseInt(process.env.REDIS_FAMILY, 4),
            connectTimeout: this.parseInt(process.env.REDIS_CONNECT_TIMEOUT, env === 'production' ? 10000 : 5000),
            lazyConnect: this.parseBoolean(process.env.REDIS_LAZY_CONNECT, true),
            keepAlive: this.parseInt(process.env.REDIS_KEEP_ALIVE, 30000)
        };
    }
    /**
     * Crée la configuration de performance
     */
    static createPerformanceConfig(env, limits) {
        return {
            defaultTtl: this.parseInt(process.env.CACHE_TTL, limits.defaultTtl),
            maxConnections: this.parseInt(process.env.REDIS_MAX_CONNECTIONS, limits.recommendedConnections),
            minConnections: this.parseInt(process.env.REDIS_MIN_CONNECTIONS, limits.minConnections),
            connectionTimeout: this.parseInt(process.env.REDIS_CONNECTION_TIMEOUT, env === 'production' ? 15000 : 10000),
            responseTimeout: this.parseInt(process.env.REDIS_RESPONSE_TIMEOUT, env === 'production' ? 10000 : 5000),
            commandTimeout: this.parseInt(process.env.REDIS_COMMAND_TIMEOUT, env === 'production' ? 5000 : 3000),
            acquireTimeout: this.parseInt(process.env.REDIS_ACQUIRE_TIMEOUT, 10000),
            maxWaitingClients: this.parseInt(process.env.REDIS_MAX_WAITING_CLIENTS, env === 'production' ? 100 : 50)
        };
    }
    /**
     * Crée la configuration de retry
     */
    static createRetryConfig(env) {
        return {
            enabled: this.parseBoolean(process.env.REDIS_RETRIES_ENABLED, env !== 'test'),
            retryDelayOnFailover: this.parseInt(process.env.REDIS_RETRY_DELAY, 100),
            maxRetriesPerRequest: this.parseInt(process.env.REDIS_MAX_RETRIES, env === 'production' ? 5 : 3),
            retryDelayOnClusterDown: this.parseInt(process.env.REDIS_CLUSTER_RETRY_DELAY, 300),
            maxRetriesPerRequestOnFailover: this.parseInt(process.env.REDIS_MAX_RETRIES_FAILOVER, 2),
            enableReadyCheck: this.parseBoolean(process.env.REDIS_ENABLE_READY_CHECK, true),
            maxRetriesPerRequestOnReadyCheck: this.parseInt(process.env.REDIS_MAX_RETRIES_READY, 1)
        };
    }
    /**
     * Crée la configuration de sérialisation
     */
    static createSerializationConfig(env) {
        const mode = process.env.REDIS_SERIALIZATION || 'json';
        const validModes = exports.SERIALIZATION_MODES;
        return {
            mode: validModes.includes(mode) ? mode : 'json',
            compression: this.parseBoolean(process.env.REDIS_COMPRESSION, env === 'production'),
            compressionThreshold: this.parseInt(process.env.REDIS_COMPRESSION_THRESHOLD, 1024),
            keyPrefix: process.env.REDIS_KEY_PREFIX ||
                `coders:project-service:${env}:`,
            keyExpiration: this.parseBoolean(process.env.REDIS_KEY_EXPIRATION, true),
            valueMaxSize: this.parseInt(process.env.REDIS_VALUE_MAX_SIZE, env === 'production' ? 10485760 : 1048576), // 10MB prod, 1MB autres
        };
    }
    /**
     * Crée la configuration de monitoring
     */
    static createMonitoringConfig(env) {
        return {
            enabled: this.parseBoolean(process.env.REDIS_ENABLE_METRICS, env !== 'test'),
            collectCommandStats: this.parseBoolean(process.env.REDIS_COLLECT_COMMAND_STATS, env === 'development' || env === 'staging'),
            slowCommandThreshold: this.parseInt(process.env.REDIS_SLOW_COMMAND_THRESHOLD, env === 'production' ? 1000 : 500),
            healthCheckInterval: this.parseInt(process.env.REDIS_HEALTH_CHECK_INTERVAL, env === 'production' ? 30000 : 60000),
            healthCheckTimeout: this.parseInt(process.env.REDIS_HEALTH_CHECK_TIMEOUT, 5000),
            enableMetrics: this.parseBoolean(process.env.REDIS_ENABLE_METRICS, env !== 'test'),
            metricsInterval: this.parseInt(process.env.REDIS_METRICS_INTERVAL, 60000)
        };
    }
    /**
     * Crée la configuration de sécurité
     */
    static createSecurityConfig(env) {
        return {
            enableAuth: this.parseBoolean(process.env.REDIS_ENABLE_AUTH, env === 'production' || env === 'staging'),
            enableTLS: this.parseBoolean(process.env.REDIS_ENABLE_TLS, env === 'production'),
            tlsRejectUnauthorized: this.parseBoolean(process.env.REDIS_TLS_REJECT_UNAUTHORIZED, env === 'production'),
            tlsCa: process.env.REDIS_TLS_CA,
            tlsCert: process.env.REDIS_TLS_CERT,
            tlsKey: process.env.REDIS_TLS_KEY,
            enableIPWhitelist: this.parseBoolean(process.env.REDIS_ENABLE_IP_WHITELIST, false),
            allowedIPs: this.parseArray(process.env.REDIS_ALLOWED_IPS)
        };
    }
    /**
     * Crée la configuration de cluster
     */
    static createClusterConfig(env) {
        const clusterEnabled = this.parseBoolean(process.env.REDIS_CLUSTER_ENABLED, false);
        let nodes = [];
        if (clusterEnabled) {
            const nodesStr = process.env.REDIS_CLUSTER_NODES;
            if (nodesStr) {
                nodes = nodesStr.split(',').map(node => {
                    const [host, portStr] = node.trim().split(':');
                    return { host, port: parseInt(portStr) || 6379 };
                });
            }
        }
        return {
            enabled: clusterEnabled,
            nodes,
            enableOfflineQueue: this.parseBoolean(process.env.REDIS_ENABLE_OFFLINE_QUEUE, false),
            redisOptions: {
                password: process.env.REDIS_PASSWORD,
                connectTimeout: this.parseInt(process.env.REDIS_CONNECT_TIMEOUT, 10000)
            },
            scaleReads: process.env.REDIS_SCALE_READS || 'slave',
            maxRedirections: this.parseInt(process.env.REDIS_MAX_REDIRECTIONS, 16)
        };
    }
    /**
     * Crée la configuration des fonctionnalités
     */
    static createFeaturesConfig(env) {
        return {
            enablePipelining: this.parseBoolean(process.env.REDIS_ENABLE_PIPELINING, env === 'production'),
            enableTransactions: this.parseBoolean(process.env.REDIS_ENABLE_TRANSACTIONS, true),
            enableStreams: this.parseBoolean(process.env.REDIS_ENABLE_STREAMS, false),
            enablePubSub: this.parseBoolean(process.env.REDIS_ENABLE_PUBSUB, env !== 'test'),
            enableScripting: this.parseBoolean(process.env.REDIS_ENABLE_SCRIPTING, true),
            enableCaching: this.parseBoolean(process.env.REDIS_ENABLE_CACHING, env !== 'test'),
            enableDistributedLock: this.parseBoolean(process.env.REDIS_ENABLE_DISTRIBUTED_LOCK, env === 'production' || env === 'staging')
        };
    }
    // ============================================================================
    // MÉTHODES UTILITAIRES
    // ============================================================================
    /**
     * Parse une URL Redis complète
     */
    static parseRedisUrl(url, env) {
        try {
            const urlObj = new URL(url);
            return {
                host: urlObj.hostname || 'localhost',
                port: urlObj.port ? parseInt(urlObj.port) : 6379,
                password: urlObj.password || undefined,
                username: urlObj.username || undefined,
                db: urlObj.pathname ? parseInt(urlObj.pathname.slice(1)) || 0 : 0,
                family: 4,
                connectTimeout: env === 'production' ? 10000 : 5000,
                lazyConnect: true,
                keepAlive: 30000
            };
        }
        catch (error) {
            throw new CacheValidationError('Invalid Redis URL format', 'REDIS_URL', url, 'Format: redis://[:password@]host[:port][/database]');
        }
    }
    /**
     * Méthode de debug pour comprendre les valeurs d'environnement
     */
    static debugEnvironmentVariables() {
        console.log('🔍 Cache Environment Variables Debug:');
        console.log('NODE_ENV:', process.env.NODE_ENV);
        console.log('REDIS_HOST:', process.env.REDIS_HOST || '[DEFAULT: localhost]');
        console.log('REDIS_PORT:', process.env.REDIS_PORT || '[DEFAULT: 6379]');
        console.log('REDIS_URL:', process.env.REDIS_URL ? '[SET]' : '[NOT SET]');
        console.log('REDIS_PASSWORD:', process.env.REDIS_PASSWORD ? '[SET]' : '[NOT SET]');
        console.log('CACHE_TTL:', process.env.CACHE_TTL || '[DEFAULT: varies by env]');
        console.log('REDIS_MAX_CONNECTIONS:', process.env.REDIS_MAX_CONNECTIONS || '[DEFAULT: varies by env]');
        console.log('REDIS_ENABLE_METRICS:', process.env.REDIS_ENABLE_METRICS || '[DEFAULT: varies by env]');
    }
    /**
     * Parse une variable d'environnement booléenne
     */
    static parseBoolean(value, defaultValue) {
        if (value === undefined || value === null) {
            return defaultValue;
        }
        const trimmedValue = value.toString().trim();
        if (trimmedValue === '') {
            return defaultValue;
        }
        const lowerValue = trimmedValue.toLowerCase();
        if (['true', '1', 'yes', 'on'].includes(lowerValue))
            return true;
        if (['false', '0', 'no', 'off'].includes(lowerValue))
            return false;
        console.warn(`⚠️  Invalid boolean value "${value}", using default: ${defaultValue}`);
        return defaultValue;
    }
    /**
     * Parse une variable d'environnement numérique
     */
    static parseInt(value, defaultValue) {
        if (value === undefined || value === null) {
            return defaultValue;
        }
        const trimmedValue = value.toString().trim();
        if (trimmedValue === '') {
            return defaultValue;
        }
        const parsed = parseInt(trimmedValue, 10);
        if (isNaN(parsed) || parsed < 0) {
            console.warn(`⚠️  Invalid number value "${value}", using default: ${defaultValue}`);
            return defaultValue;
        }
        return parsed;
    }
    /**
     * Parse une variable d'environnement en tableau
     */
    static parseArray(value, delimiter = ',') {
        if (!value)
            return [];
        return value
            .split(delimiter)
            .map(item => item.trim())
            .filter(item => item.length > 0);
    }
}
exports.CacheConfigFactory = CacheConfigFactory;
exports.CacheConfigurationFactory = CacheConfigFactory;
// ============================================================================
// UTILITAIRES D'INTÉGRATION
// ============================================================================
/**
 * Helper pour récupérer la config depuis ConfigService
 */
function getCacheConfig(configService) {
    return configService.get('cache');
}
/**
 * Calcule la taille optimale du pool de connexions
 */
function calculateOptimalPoolSize(environment, availableMemory) {
    const limits = exports.CACHE_LIMITS[environment] || exports.CACHE_LIMITS.development;
    let baseSize = limits.recommendedConnections;
    if (availableMemory) {
        // Estimation : ~128MB par connexion Redis (approximatif)
        const memoryFactor = Math.floor(availableMemory / 128);
        baseSize = Math.min(limits.maxConnections, baseSize + memoryFactor);
    }
    return Math.max(limits.minConnections, Math.min(limits.maxConnections, baseSize));
}
// ============================================================================
// EXPORT DE LA CONFIGURATION
// ============================================================================
/**
 * Configuration principale du cache Redis
 * Utilisable avec @Inject(cacheConfig.KEY) dans les services
 */
exports.cacheConfig = (0, config_1.registerAs)('cache', () => {
    try {
        return CacheConfigFactory.create();
    }
    catch (error) {
        console.error('Failed to create cache configuration:', error.message);
        throw error;
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,