15fcf9538b366d4a4df9dd3e7fbeefc5
"use strict";
/**
 * Guard d'authentification JWT pour le Service de Gestion des Projets (C04)
 *
 * Ce guard assure la validation des tokens JWT pour toutes les routes protégées,
 * intègre un cache Redis pour optimiser les performances, et maintient un audit
 * trail complet des tentatives d'accès.
 *
 * Responsabilités :
 * - Validation des tokens JWT via le Service d'Authentification (C03)
 * - Cache intelligent des validations pour améliorer les performances
 * - Injection des informations utilisateur dans le contexte de requête
 * - Audit de sécurité et logging structuré
 * - Gestion gracieuse des erreurs et timeouts
 *
 * @fileoverview Guard principal d'authentification JWT
 * @version 1.0.0
 * @since 2025-01-28
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuthGuard_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthGuard = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const axios_1 = require("@nestjs/axios");
const crypto_1 = require("crypto");
const rxjs_1 = require("rxjs");
const user_interface_1 = require("../interfaces/user.interface");
const cache_service_1 = require("../../cache/cache.service");
/**
 * Configuration par défaut du guard
 */
const DEFAULT_CONFIG = {
    cachePrefix: 'auth:token:',
    cacheTTL: 300, // 5 minutes
    validationTimeout: 5000, // 5 secondes
    retryAttempts: 3,
    retryDelay: 1000, // 1 seconde
    logLevel: 'info',
};
/**
 * Guard d'authentification JWT
 *
 * Implémente la validation sécurisée des tokens JWT avec cache Redis
 * pour optimiser les performances et audit complet des accès.
 */
let AuthGuard = AuthGuard_1 = class AuthGuard {
    configService;
    cacheService;
    httpService;
    logger = new common_1.Logger(AuthGuard_1.name);
    AUTH_SERVICE_URL;
    CACHE_TTL;
    VALIDATION_TIMEOUT;
    constructor(configService, cacheService, httpService) {
        this.configService = configService;
        this.cacheService = cacheService;
        this.httpService = httpService;
        // Utiliser ConfigService avec fallback sur process.env
        this.AUTH_SERVICE_URL = this.configService.get('AUTH_SERVICE_URL') ||
            process.env.AUTH_SERVICE_URL ||
            'http://localhost:3001';
        this.VALIDATION_TIMEOUT = parseInt(this.configService.get('AUTH_SERVICE_TIMEOUT') ||
            process.env.AUTH_SERVICE_TIMEOUT ||
            '5000', 10);
        this.CACHE_TTL = parseInt(this.configService.get('CACHE_TTL') ||
            process.env.CACHE_TTL ||
            '300', 10);
        this.logger.log(`AuthGuard initialized with service URL: ${this.AUTH_SERVICE_URL}`);
    }
    /**
     * Point d'entrée principal du guard NestJS
     *
     * @param context - Contexte d'exécution de la requête
     * @returns Promise<boolean> - true si authentification réussie
     */
    async canActivate(context) {
        const startTime = Date.now();
        let user;
        let tokenHash = '';
        let cacheHit = false;
        try {
            // Extraction de la requête selon le contexte (HTTP, WebSocket, etc.)
            const request = this.getRequest(context);
            // Extraction du token JWT
            const token = this.extractTokenFromRequest(request);
            if (!token) {
                await this.auditAccessAttempt('', false, undefined, new Error('Token missing'), false, Date.now() - startTime);
                throw new common_1.UnauthorizedException('No token provided');
            }
            // Génération du hash pour le cache et l'audit
            tokenHash = this.hashToken(token);
            // Vérification du cache
            user = await this.getCachedValidation(token);
            if (user) {
                cacheHit = true;
                this.logger.debug(`Cache hit for token ${tokenHash.substring(0, 8)}...`);
            }
            else {
                // Validation via le service d'authentification
                user = await this.validateTokenWithAuthService(token);
                // Mise en cache de la validation réussie
                await this.cacheValidation(token, user, new Date(Date.now() + this.CACHE_TTL * 1000));
                this.logger.debug(`Token validated and cached for ${user.email}`);
            }
            // Injection de l'utilisateur dans le contexte
            this.injectUserIntoContext(context, user);
            // Audit de la tentative réussie
            await this.auditAccessAttempt(tokenHash, true, user, undefined, cacheHit, Date.now() - startTime);
            return true;
        }
        catch (error) {
            // Audit de la tentative échouée
            await this.auditAccessAttempt(tokenHash, false, user, error, cacheHit, Date.now() - startTime);
            // Gestion des erreurs
            this.handleAuthError(error, 'canActivate');
            return false;
        }
    }
    /**
     * Extraction de l'objet request selon le type de contexte
     *
     * @param context - Contexte d'exécution
     * @returns L'objet request
     */
    getRequest(context) {
        const contextType = context.getType();
        switch (contextType) {
            case 'http':
                return context.switchToHttp().getRequest();
            case 'ws':
                // Support WebSocket si nécessaire dans le futur
                return context.switchToWs().getClient().handshake;
            default:
                throw new common_1.InternalServerErrorException('Unsupported context type');
        }
    }
    /**
     * Extraction du token JWT depuis les headers de requête
     *
     * @param request - Requête Fastify
     * @returns Token JWT ou null si absent/invalide
     */
    extractTokenFromRequest(request) {
        try {
            const authHeader = request.headers.authorization;
            if (!authHeader) {
                return null;
            }
            // Vérification du format "Bearer <token>"
            const parts = authHeader.split(' ');
            if (parts.length !== 2 || parts[0] !== 'Bearer') {
                this.logger.warn('Invalid authorization header format');
                throw new Error('Invalid token format');
            }
            const token = parts[1];
            // Validation basique du token (non vide, longueur minimale)
            if (!token || token.length < 10) {
                this.logger.warn('Token too short or empty');
                throw new Error('Invalid token format');
            }
            return token;
        }
        catch (error) {
            if (error.message === 'Invalid token format') {
                throw error; // Propager l'erreur pour que canActivate puisse la capturer
            }
            this.logger.error('Error extracting token from request', error);
            return null;
        }
    }
    /**
     * Recherche d'une validation en cache
     *
     * @param token - Token JWT à vérifier
     * @returns Utilisateur si trouvé en cache, undefined sinon
     */
    async getCachedValidation(token) {
        try {
            const cacheKey = this.buildCacheKey(token);
            const cachedData = await this.cacheService.get(cacheKey);
            if (cachedData && (0, user_interface_1.isValidUser)(cachedData)) {
                return cachedData;
            }
            return undefined;
        }
        catch (error) {
            this.logger.warn('Cache retrieval failed, falling back to service validation', error);
            return undefined;
        }
    }
    /**
     * Validation du token via le Service d'Authentification (C03)
     *
     * @param token - Token JWT à valider
     * @returns Utilisateur validé
     */
    async validateTokenWithAuthService(token) {
        try {
            // URL corrigée pour correspondre aux tests
            const validationUrl = `${this.AUTH_SERVICE_URL}/auth/validate`;
            const response$ = this.httpService.post(validationUrl, { token }, {
                timeout: this.VALIDATION_TIMEOUT,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'project-service/1.0.0',
                },
            }).pipe((0, rxjs_1.timeout)(this.VALIDATION_TIMEOUT), (0, rxjs_1.catchError)((error) => {
                if (error.response?.status === 401) {
                    throw new common_1.UnauthorizedException('Invalid or expired token');
                }
                // Améliorer la détection des erreurs de connexion et timeout
                if (error.code === 'ECONNREFUSED' ||
                    error.code === 'ENOTFOUND' ||
                    error.message?.includes('timeout') ||
                    error.name === 'TimeoutError') {
                    throw new common_1.ServiceUnavailableException('Authentication service unavailable');
                }
                // Pour les erreurs 400 (malformed), garder UnauthorizedException
                if (error.response?.status === 400) {
                    throw new common_1.UnauthorizedException('Invalid token format');
                }
                throw new common_1.InternalServerErrorException('Authentication service error');
            }));
            const response = await (0, rxjs_1.firstValueFrom)(response$);
            const data = response.data;
            // Validation de la réponse
            if (!data.valid || !data.user) {
                throw new common_1.UnauthorizedException('Token validation failed');
            }
            // Construction de l'objet User
            const user = {
                id: data.user.id,
                email: data.user.email,
                roles: data.user.roles || [],
            };
            // Validation finale de l'objet User - changer le type d'exception
            if (!(0, user_interface_1.isValidUser)(user)) {
                throw new common_1.UnauthorizedException('Invalid user data received from auth service');
            }
            return user;
        }
        catch (error) {
            if (error instanceof common_1.UnauthorizedException ||
                error instanceof common_1.ServiceUnavailableException ||
                error instanceof common_1.InternalServerErrorException) {
                throw error;
            }
            this.logger.error('Unexpected error during token validation', error);
            throw new common_1.UnauthorizedException('Authentication failed');
        }
    }
    /**
     * Mise en cache de la validation réussie
     *
     * @param token - Token JWT
     * @param user - Utilisateur validé
     * @param expiresAt - Date d'expiration du token
     */
    async cacheValidation(token, user, expiresAt) {
        try {
            const cacheKey = this.buildCacheKey(token);
            // Calcul du TTL intelligent basé sur l'expiration du token
            const timeUntilExpiry = Math.floor((expiresAt.getTime() - Date.now()) / 1000);
            const ttl = Math.min(this.CACHE_TTL, Math.max(timeUntilExpiry, 60)); // Min 1 minute
            await this.cacheService.set(cacheKey, user, ttl);
        }
        catch (error) {
            // Cache non critique - on log mais on ne bloque pas
            this.logger.warn('Failed to cache token validation', error);
        }
    }
    /**
     * Injection de l'utilisateur dans le contexte de requête
     *
     * @param context - Contexte d'exécution
     * @param user - Utilisateur à injecter
     */
    injectUserIntoContext(context, user) {
        try {
            const request = this.getRequest(context);
            // Injection pour utilisation par le décorateur @CurrentUser()
            request.user = user;
        }
        catch (error) {
            this.logger.error('Failed to inject user into context', error);
            throw new common_1.InternalServerErrorException('Context injection failed');
        }
    }
    /**
     * Audit des tentatives d'accès pour la sécurité et le monitoring
     *
     * @param tokenHash - Hash du token (pour la sécurité)
     * @param success - Succès ou échec de l'authentification
     * @param user - Utilisateur (si authentification réussie)
     * @param error - Erreur (si authentification échouée)
     * @param cacheHit - Indicateur de cache hit
     * @param duration - Durée de validation en ms
     */
    async auditAccessAttempt(tokenHash, success, user, error, cacheHit, duration) {
        try {
            const auditData = {
                event: 'auth_attempt',
                success,
                tokenHash: tokenHash.substring(0, 16), // Premiers 16 caractères pour l'audit
                timestamp: new Date().toISOString(),
                userId: user?.id,
                error: error?.message,
                cachehit: cacheHit,
                validationDuration: duration,
            };
            if (success) {
                this.logger.log(`✅ Authentication successful for user ${user?.email}`, auditData);
            }
            else {
                this.logger.warn(`❌ Authentication failed: ${error?.message}`, auditData);
            }
            // TODO: Optionnellement envoyer vers un service d'audit externe
            // await this.auditService.logSecurityEvent(auditData);
        }
        catch (auditError) {
            // L'audit ne doit jamais bloquer l'authentification
            this.logger.error('Audit logging failed', auditError);
        }
    }
    /**
     * Gestion centralisée des erreurs d'authentification
     *
     * @param error - Erreur à traiter
     * @param context - Contexte où l'erreur s'est produite
     */
    handleAuthError(error, context) {
        // Gestion spéciale pour les erreurs de format de token
        if (error.message === 'Invalid token format') {
            throw new common_1.UnauthorizedException('Invalid token format');
        }
        // Classification et transformation des erreurs
        if (error instanceof common_1.UnauthorizedException ||
            error instanceof common_1.ServiceUnavailableException ||
            error instanceof common_1.InternalServerErrorException) {
            throw error;
        }
        // Erreurs inattendues
        this.logger.error(`Unexpected authentication error in ${context}`, error);
        // Ne pas leak d'informations sensibles
        throw new common_1.UnauthorizedException('Authentication failed');
    }
    /**
     * Construction de la clé de cache sécurisée
     *
     * @param token - Token JWT
     * @returns Clé de cache hashée
     */
    buildCacheKey(token) {
        const hash = this.hashToken(token);
        return `${DEFAULT_CONFIG.cachePrefix}${hash}`;
    }
    /**
     * Génération d'un hash SHA-256 du token pour la sécurité
     *
     * @param token - Token à hasher
     * @returns Hash SHA-256 en hexadécimal
     */
    hashToken(token) {
        return (0, crypto_1.createHash)('sha256').update(token).digest('hex');
    }
};
exports.AuthGuard = AuthGuard;
exports.AuthGuard = AuthGuard = AuthGuard_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService,
        cache_service_1.CacheService,
        axios_1.HttpService])
], AuthGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,