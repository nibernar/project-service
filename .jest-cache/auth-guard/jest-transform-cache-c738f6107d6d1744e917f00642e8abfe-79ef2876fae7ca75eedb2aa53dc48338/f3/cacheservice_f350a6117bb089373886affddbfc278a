5bc0f32c0b42c96fb7e8e22e23a51f60
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheService = void 0;
// src/cache/cache.service.ts
const common_1 = require("@nestjs/common");
const ioredis_1 = require("@nestjs-modules/ioredis");
const config_1 = require("@nestjs/config");
const ioredis_2 = require("ioredis");
const cache_config_1 = require("../config/cache.config");
let CacheService = class CacheService {
    redis;
    configService;
    constructor(redis, configService) {
        this.redis = redis;
        this.configService = configService;
    }
    /**
     * Le module @nestjs-modules/ioredis applique automatiquement le préfixe configuré
     * Donc on retourne la clé telle quelle
     */
    getFullKey(key) {
        return key;
    }
    async get(key) {
        try {
            const fullKey = this.getFullKey(key);
            const value = await this.redis.get(fullKey);
            return value ? JSON.parse(value) : null;
        }
        catch (error) {
            console.error(`Cache get error for key ${key}:`, error);
            return null;
        }
    }
    async set(key, value, ttl) {
        try {
            const cacheConfig = (0, cache_config_1.getCacheConfig)(this.configService);
            const finalTtl = ttl !== undefined ? ttl : cacheConfig.performance.defaultTtl;
            const fullKey = this.getFullKey(key);
            await this.redis.setex(fullKey, finalTtl, JSON.stringify(value));
        }
        catch (error) {
            console.error(`Cache set error for key ${key}:`, error);
        }
    }
    async del(key) {
        try {
            if (Array.isArray(key)) {
                if (key.length > 0) {
                    const fullKeys = key.map(k => this.getFullKey(k));
                    await this.redis.del(...fullKeys);
                }
            }
            else {
                const fullKey = this.getFullKey(key);
                await this.redis.del(fullKey);
            }
        }
        catch (error) {
            console.error(`Cache delete error:`, error);
        }
    }
    async invalidateProjectCache(projectId, userId) {
        try {
            const keys = [
                cache_config_1.CACHE_KEYS.PROJECT(projectId),
                cache_config_1.CACHE_KEYS.PROJECT_STATISTICS(projectId),
                cache_config_1.CACHE_KEYS.USER_PROJECTS_COUNT(userId),
            ];
            // Invalider aussi les listes de projets de l'utilisateur
            // Pour keys(), nous devons inclure le préfixe manuellement
            const prefix = this.getKeyPrefix();
            const listPattern = `${prefix}projects:${userId}:*`;
            const listKeys = await this.redis.keys(listPattern);
            // Enlever le préfixe des clés trouvées car del() applique automatiquement le préfixe
            const listKeysWithoutPrefix = listKeys.map(key => key.replace(prefix, ''));
            const allKeysToDelete = [...keys, ...listKeysWithoutPrefix];
            await this.del(allKeysToDelete);
        }
        catch (error) {
            console.error(`Cache delete error:`, error);
        }
    }
    async invalidateUserProjectsCache(userId) {
        try {
            // Rechercher toutes les clés de liste pour cet utilisateur
            // Pour keys(), nous devons inclure le préfixe manuellement
            const prefix = this.getKeyPrefix();
            const listPattern = `${prefix}projects:${userId}:*`;
            const keys = await this.redis.keys(listPattern);
            // Enlever le préfixe des clés trouvées car del() applique automatiquement le préfixe
            const keysWithoutPrefix = keys.map(key => key.replace(prefix, ''));
            if (keysWithoutPrefix.length > 0) {
                await this.del(keysWithoutPrefix);
            }
        }
        catch (error) {
            console.error(`Cache delete error:`, error);
        }
    }
    /**
     * Méthodes utilitaires pour construire les clés de cache
     */
    getProjectKey(projectId) {
        return cache_config_1.CACHE_KEYS.PROJECT(projectId);
    }
    getProjectListKey(userId, page, limit) {
        return cache_config_1.CACHE_KEYS.PROJECT_LIST(userId, page, limit);
    }
    getProjectStatisticsKey(projectId) {
        return cache_config_1.CACHE_KEYS.PROJECT_STATISTICS(projectId);
    }
    getUserProjectsCountKey(userId) {
        return cache_config_1.CACHE_KEYS.USER_PROJECTS_COUNT(userId);
    }
    /**
     * Récupère le préfixe des clés depuis la configuration
     */
    getKeyPrefix() {
        const cacheConfig = (0, cache_config_1.getCacheConfig)(this.configService);
        return cacheConfig.serialization.keyPrefix;
    }
    /**
     * Vérifie si Redis est connecté
     */
    async isConnected() {
        try {
            const result = await this.redis.ping();
            return result === 'PONG';
        }
        catch (error) {
            console.error('Redis connection check failed:', error);
            return false;
        }
    }
    /**
     * Récupère des informations sur Redis
     */
    async getInfo() {
        try {
            return await this.redis.info();
        }
        catch (error) {
            console.error('Redis info failed:', error);
            return '';
        }
    }
    /**
     * Ferme la connexion Redis (utile pour les tests)
     */
    async disconnect() {
        try {
            await this.redis.quit();
        }
        catch (error) {
            console.error('Error closing Redis connection:', error);
        }
    }
};
exports.CacheService = CacheService;
exports.CacheService = CacheService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, ioredis_1.InjectRedis)()),
    __metadata("design:paramtypes", [typeof (_a = typeof ioredis_2.default !== "undefined" && ioredis_2.default) === "function" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _b : Object])
], CacheService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,