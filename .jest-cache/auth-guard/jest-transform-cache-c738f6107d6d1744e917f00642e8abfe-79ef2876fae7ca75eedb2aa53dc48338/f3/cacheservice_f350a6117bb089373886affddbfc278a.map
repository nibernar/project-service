{"file":"/Users/nicolasbernard/Desktop/project-service/src/cache/cache.service.ts","mappings":"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","names":[],"sources":["/Users/nicolasbernard/Desktop/project-service/src/cache/cache.service.ts"],"sourcesContent":["// src/cache/cache.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRedis } from '@nestjs-modules/ioredis';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\nimport { CACHE_KEYS, CACHE_TTL, getCacheConfig } from '../config/cache.config';\n\n@Injectable()\nexport class CacheService {\n  constructor(\n    @InjectRedis() private readonly redis: Redis,\n    private readonly configService: ConfigService,\n  ) {}\n\n  /**\n   * Le module @nestjs-modules/ioredis applique automatiquement le préfixe configuré\n   * Donc on retourne la clé telle quelle\n   */\n  private getFullKey(key: string): string {\n    return key;\n  }\n\n  async get<T>(key: string): Promise<T | null> {\n    try {\n      const fullKey = this.getFullKey(key);\n      const value = await this.redis.get(fullKey);\n      return value ? JSON.parse(value) : null;\n    } catch (error) {\n      console.error(`Cache get error for key ${key}:`, error);\n      return null;\n    }\n  }\n\n  async set<T>(key: string, value: T, ttl?: number): Promise<void> {\n    try {\n      const cacheConfig = getCacheConfig(this.configService);\n      const finalTtl = ttl !== undefined ? ttl : cacheConfig.performance.defaultTtl;\n      const fullKey = this.getFullKey(key);\n      \n      await this.redis.setex(fullKey, finalTtl, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Cache set error for key ${key}:`, error);\n    }\n  }\n\n  async del(key: string | string[]): Promise<void> {\n    try {\n      if (Array.isArray(key)) {\n        if (key.length > 0) {\n          const fullKeys = key.map(k => this.getFullKey(k));\n          await this.redis.del(...fullKeys);\n        }\n      } else {\n        const fullKey = this.getFullKey(key);\n        await this.redis.del(fullKey);\n      }\n    } catch (error) {\n      console.error(`Cache delete error:`, error);\n    }\n  }\n\n  async invalidateProjectCache(projectId: string, userId: string): Promise<void> {\n    try {\n      const keys = [\n        CACHE_KEYS.PROJECT(projectId),\n        CACHE_KEYS.PROJECT_STATISTICS(projectId),\n        CACHE_KEYS.USER_PROJECTS_COUNT(userId),\n      ];\n      \n      // Invalider aussi les listes de projets de l'utilisateur\n      // Pour keys(), nous devons inclure le préfixe manuellement\n      const prefix = this.getKeyPrefix();\n      const listPattern = `${prefix}projects:${userId}:*`;\n      \n      const listKeys = await this.redis.keys(listPattern);\n      \n      // Enlever le préfixe des clés trouvées car del() applique automatiquement le préfixe\n      const listKeysWithoutPrefix = listKeys.map(key => key.replace(prefix, ''));\n      \n      const allKeysToDelete = [...keys, ...listKeysWithoutPrefix];\n      \n      await this.del(allKeysToDelete);\n    } catch (error) {\n      console.error(`Cache delete error:`, error);\n    }\n  }\n\n  async invalidateUserProjectsCache(userId: string): Promise<void> {\n    try {\n      // Rechercher toutes les clés de liste pour cet utilisateur\n      // Pour keys(), nous devons inclure le préfixe manuellement\n      const prefix = this.getKeyPrefix();\n      const listPattern = `${prefix}projects:${userId}:*`;\n      const keys = await this.redis.keys(listPattern);\n      \n      // Enlever le préfixe des clés trouvées car del() applique automatiquement le préfixe\n      const keysWithoutPrefix = keys.map(key => key.replace(prefix, ''));\n      \n      if (keysWithoutPrefix.length > 0) {\n        await this.del(keysWithoutPrefix);\n      }\n    } catch (error) {\n      console.error(`Cache delete error:`, error);\n    }\n  }\n\n  /**\n   * Méthodes utilitaires pour construire les clés de cache\n   */\n  getProjectKey(projectId: string): string {\n    return CACHE_KEYS.PROJECT(projectId);\n  }\n\n  getProjectListKey(userId: string, page: number, limit: number): string {\n    return CACHE_KEYS.PROJECT_LIST(userId, page, limit);\n  }\n\n  getProjectStatisticsKey(projectId: string): string {\n    return CACHE_KEYS.PROJECT_STATISTICS(projectId);\n  }\n\n  getUserProjectsCountKey(userId: string): string {\n    return CACHE_KEYS.USER_PROJECTS_COUNT(userId);\n  }\n\n  /**\n   * Récupère le préfixe des clés depuis la configuration\n   */\n  getKeyPrefix(): string {\n    const cacheConfig = getCacheConfig(this.configService);\n    return cacheConfig.serialization.keyPrefix;\n  }\n\n  /**\n   * Vérifie si Redis est connecté\n   */\n  async isConnected(): Promise<boolean> {\n    try {\n      const result = await this.redis.ping();\n      return result === 'PONG';\n    } catch (error) {\n      console.error('Redis connection check failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Récupère des informations sur Redis\n   */\n  async getInfo(): Promise<string> {\n    try {\n      return await this.redis.info();\n    } catch (error) {\n      console.error('Redis info failed:', error);\n      return '';\n    }\n  }\n\n  /**\n   * Ferme la connexion Redis (utile pour les tests)\n   */\n  async disconnect(): Promise<void> {\n    try {\n      await this.redis.quit();\n    } catch (error) {\n      console.error('Error closing Redis connection:', error);\n    }\n  }\n}"],"version":3}