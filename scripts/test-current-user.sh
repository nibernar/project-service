#!/bin/bash

# scripts/test-current-user.sh
# Script de test pour le d√©corateur CurrentUser

set -e

# Configuration des couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TEST_RESULTS_DIR="$PROJECT_ROOT/test-results/current-user-decorator"
COVERAGE_DIR="$PROJECT_ROOT/coverage/current-user-decorator"

# Fonction d'affichage avec couleurs
print_header() {
    echo ""
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}  $1${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# Fonction de nettoyage
cleanup() {
    print_info "Nettoyage en cours..."
    # Killer d'√©ventuels processus Jest restants
    pkill -f "jest.*current-user" 2>/dev/null || true
    sleep 1
}

# Fonction de validation des pr√©requis
check_prerequisites() {
    print_header "V√©rification des pr√©requis"
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n'est pas install√©"
        exit 1
    fi
    print_success "Node.js: $(node --version)"
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n'est pas install√©"
        exit 1
    fi
    print_success "npm: $(npm --version)"
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [[ ! -f "$PROJECT_ROOT/package.json" ]]; then
        print_error "package.json non trouv√©. √ätes-vous dans le bon r√©pertoire?"
        exit 1
    fi
    
    # V√©rifier les d√©pendances
    if [[ ! -d "$PROJECT_ROOT/node_modules" ]]; then
        print_warning "node_modules non trouv√©, installation des d√©pendances..."
        cd "$PROJECT_ROOT"
        npm ci
    fi
    
    print_success "Pr√©requis valid√©s"
}

# Fonction de pr√©paration de l'environnement
setup_environment() {
    print_header "Pr√©paration de l'environnement de test"
    
    # Cr√©er les r√©pertoires de r√©sultats
    mkdir -p "$TEST_RESULTS_DIR"
    mkdir -p "$COVERAGE_DIR"
    
    # Variables d'environnement pour les tests
    export NODE_ENV=test
    export NODE_OPTIONS="--expose-gc --max-old-space-size=4096"
    export JEST_WORKERS="75%"
    
    # Configuration sp√©cifique pour les tests de performance
    export PERFORMANCE_TESTS=true
    export SECURITY_TESTS=true
    export MEMORY_LIMIT_MB=1024
    
    print_success "Environnement configur√©"
}

# Fonction de tests unitaires
run_unit_tests() {
    print_header "Ex√©cution des tests unitaires"
    
    cd "$PROJECT_ROOT"
    
    local jest_config="jest.current-user.config.js"
    local test_file="test/unit/common/decorators/current-user.decorator.spec.ts"
    
    if npm run test -- --config="$jest_config" "$test_file" --verbose; then
        print_success "Tests unitaires r√©ussis"
        return 0
    else
        print_error "√âchec des tests unitaires"
        return 1
    fi
}

# Fonction de tests edge cases
run_edge_case_tests() {
    print_header "Ex√©cution des tests edge cases"
    
    cd "$PROJECT_ROOT"
    
    local jest_config="jest.current-user.config.js"
    local test_file="test/unit/common/decorators/current-user.decorator.edge-cases.spec.ts"
    
    if npm run test -- --config="$jest_config" "$test_file" --verbose; then
        print_success "Tests edge cases r√©ussis"
        return 0
    else
        print_error "√âchec des tests edge cases"
        return 1
    fi
}

# Fonction de tests de s√©curit√©
run_security_tests() {
    print_header "Ex√©cution des tests de s√©curit√©"
    
    cd "$PROJECT_ROOT"
    
    local jest_config="jest.current-user.config.js"
    local test_file="test/unit/common/decorators/current-user.decorator.security.spec.ts"
    
    print_info "Tests de s√©curit√© incluant :"
    print_info "  - Protection contre les injections XSS"
    print_info "  - Protection contre les injections SQL"
    print_info "  - Protection contre les attaques temporelles"
    print_info "  - Validation de l'int√©grit√© des donn√©es"
    
    if npm run test -- --config="$jest_config" "$test_file" --verbose; then
        print_success "Tests de s√©curit√© r√©ussis"
        return 0
    else
        print_error "√âchec des tests de s√©curit√©"
        return 1
    fi
}

# Fonction de tests de performance
run_performance_tests() {
    print_header "Ex√©cution des tests de performance"
    
    cd "$PROJECT_ROOT"
    
    local jest_config="jest.current-user.config.js"
    local test_file="test/unit/common/decorators/current-user.decorator.performance.spec.ts"
    
    print_info "Tests de performance incluant :"
    print_info "  - Vitesse d'ex√©cution (< 1ms par appel)"
    print_info "  - Utilisation m√©moire (pas de fuites)"
    print_info "  - Tests de stress (10k+ appels)"
    print_info "  - Benchmarks de r√©gression"
    
    # Configuration sp√©ciale pour les tests de performance
    export NODE_OPTIONS="--expose-gc --max-old-space-size=8192"
    
    if npm run test -- --config="$jest_config" "$test_file" --verbose --runInBand; then
        print_success "Tests de performance r√©ussis"
        return 0
    else
        print_error "√âchec des tests de performance ou timeout (5min)"
        return 1
    fi
}

# Fonction de tests de r√©gression
run_regression_tests() {
    print_header "Ex√©cution des tests de r√©gression"
    
    cd "$PROJECT_ROOT"
    
    local jest_config="jest.current-user.config.js"
    local test_file="test/unit/common/decorators/current-user.decorator.regression.spec.ts"
    
    print_info "Tests de r√©gression incluant :"
    print_info "  - R√©gression de performance"
    print_info "  - R√©gression de compatibilit√©"
    print_info "  - R√©gression fonctionnelle"
    print_info "  - R√©gression de s√©curit√©"
    
    if npm run test -- --config="$jest_config" "$test_file" --verbose; then
        print_success "Tests de r√©gression r√©ussis"
        return 0
    else
        print_error "√âchec des tests de r√©gression"
        return 1
    fi
}

# Fonction de tests complets avec couverture
run_full_test_suite() {
    print_header "Ex√©cution de la suite compl√®te de tests"
    
    cd "$PROJECT_ROOT"
    
    local jest_config="jest.current-user.config.js"
    
    print_info "Suite compl√®te incluant tous les types de tests avec couverture"
    
    if npm run test -- --config="$jest_config" --coverage --verbose; then
        print_success "Suite compl√®te de tests r√©ussie"
        return 0
    else
        print_error "√âchec de la suite compl√®te de tests"
        return 1
    fi
}

# Fonction de g√©n√©ration de rapport
generate_report() {
    print_header "G√©n√©ration du rapport de tests"
    
    local report_file="$TEST_RESULTS_DIR/current-user-test-report.html"
    local coverage_file="$COVERAGE_DIR/lcov-report/index.html"
    
    if [[ -f "$report_file" ]]; then
        print_success "Rapport de tests g√©n√©r√© : $report_file"
    else
        print_warning "Rapport de tests non trouv√©"
    fi
    
    if [[ -f "$coverage_file" ]]; then
        print_success "Rapport de couverture g√©n√©r√© : $coverage_file"
        
        # Extraire le pourcentage de couverture
        if command -v lcov &> /dev/null && [[ -f "$COVERAGE_DIR/lcov.info" ]]; then
            local coverage_summary
            coverage_summary=$(lcov --summary "$COVERAGE_DIR/lcov.info" 2>/dev/null | grep "lines" | awk '{print $2}')
            if [[ -n "$coverage_summary" ]]; then
                print_info "Couverture des lignes : $coverage_summary"
            fi
        fi
    else
        print_warning "Rapport de couverture non trouv√©"
    fi
    
    # G√©n√©rer un r√©sum√©
    echo ""
    print_info "=== R√âSUM√â DES TESTS ==="
    echo "üìÇ R√©pertoire des r√©sultats : $TEST_RESULTS_DIR"
    echo "üìä R√©pertoire de couverture : $COVERAGE_DIR"
    echo "üè∑Ô∏è  Configuration Jest : jest.current-user.config.js"
    echo ""
}

# Fonction de validation de la couverture
validate_coverage() {
    print_header "Validation de la couverture de code"
    
    local coverage_json="$COVERAGE_DIR/coverage-final.json"
    
    if [[ ! -f "$coverage_json" ]]; then
        print_warning "Fichier de couverture non trouv√©, validation ignor√©e"
        return 0
    fi
    
    # Utiliser jq si disponible pour analyser la couverture
    if command -v jq &> /dev/null; then
        local coverage_percent
        coverage_percent=$(jq -r '.total.lines.pct // 0' "$coverage_json" 2>/dev/null)
        
        if (( $(echo "$coverage_percent >= 95" | bc -l) )); then
            print_success "Couverture des lignes : ${coverage_percent}% (‚úÖ ‚â• 95%)"
        else
            print_warning "Couverture des lignes : ${coverage_percent}% (‚ö†Ô∏è < 95%)"
        fi
    else
        print_info "jq non disponible, validation de couverture ignor√©e"
    fi
}

# Fonction de nettoyage des artefacts
clean_artifacts() {
    print_header "Nettoyage des anciens artefacts"
    
    # Supprimer les anciens r√©sultats
    if [[ -d "$TEST_RESULTS_DIR" ]]; then
        rm -rf "$TEST_RESULTS_DIR"
        print_success "Anciens r√©sultats supprim√©s"
    fi
    
    if [[ -d "$COVERAGE_DIR" ]]; then
        rm -rf "$COVERAGE_DIR"
        print_success "Ancienne couverture supprim√©e"
    fi
    
    # Nettoyer le cache Jest
    cd "$PROJECT_ROOT"
    npx jest --clearCache --config=jest.current-user.config.js &>/dev/null || true
    print_success "Cache Jest nettoy√©"
}

# Fonction d'aide
show_help() {
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Tests pour le d√©corateur CurrentUser du Project Service"
    echo ""
    echo "Options:"
    echo "  unit            Ex√©cuter seulement les tests unitaires"
    echo "  edge-cases      Ex√©cuter seulement les tests edge cases"
    echo "  security        Ex√©cuter seulement les tests de s√©curit√©"
    echo "  performance     Ex√©cuter seulement les tests de performance"
    echo "  regression      Ex√©cuter seulement les tests de r√©gression"
    echo "  full            Ex√©cuter la suite compl√®te avec couverture (d√©faut)"
    echo "  clean           Nettoyer les artefacts de test"
    echo "  report          G√©n√©rer seulement le rapport (si tests d√©j√† ex√©cut√©s)"
    echo "  help            Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0                    # Suite compl√®te"
    echo "  $0 unit              # Tests unitaires seulement"
    echo "  $0 performance       # Tests de performance seulement"
    echo "  $0 clean && $0 full  # Nettoyage puis suite compl√®te"
    echo ""
}

# Fonction principale
main() {
    local test_type="${1:-full}"
    local exit_code=0
    
    # Traitement des arguments
    case "$test_type" in
        "help"|"-h"|"--help")
            show_help
            exit 0
            ;;
        "clean")
            clean_artifacts
            exit 0
            ;;
        "report")
            generate_report
            validate_coverage
            exit 0
            ;;
    esac
    
    # Trap pour nettoyage en cas d'interruption
    trap cleanup EXIT INT TERM
    
    # √âtapes communes
    check_prerequisites
    setup_environment
    
    # Ex√©cution selon le type demand√©
    case "$test_type" in
        "unit")
            run_unit_tests || exit_code=$?
            ;;
        "edge-cases")
            run_edge_case_tests || exit_code=$?
            ;;
        "security")
            run_security_tests || exit_code=$?
            ;;
        "performance")
            run_performance_tests || exit_code=$?
            ;;
        "regression")
            run_regression_tests || exit_code=$?
            ;;
        "full")
            # Suite compl√®te avec tous les types de tests
            run_unit_tests || exit_code=$?
            if [[ $exit_code -eq 0 ]]; then
                run_edge_case_tests || exit_code=$?
            fi
            if [[ $exit_code -eq 0 ]]; then
                run_security_tests || exit_code=$?
            fi
            if [[ $exit_code -eq 0 ]]; then
                run_performance_tests || exit_code=$?
            fi
            if [[ $exit_code -eq 0 ]]; then
                run_regression_tests || exit_code=$?
            fi
            if [[ $exit_code -eq 0 ]]; then
                run_full_test_suite || exit_code=$?
            fi
            ;;
        *)
            print_error "Type de test non reconnu: $test_type"
            show_help
            exit 1
            ;;
    esac
    
    # G√©n√©ration du rapport
    generate_report
    validate_coverage
    
    # R√©sultat final
    echo ""
    if [[ $exit_code -eq 0 ]]; then
        print_success "üéâ TOUS LES TESTS SONT PASS√âS !"
        print_info "Les tests du d√©corateur CurrentUser sont valid√©s."
    else
        print_error "üí• √âCHEC DES TESTS"
        print_info "V√©rifiez les logs ci-dessus pour plus de d√©tails."
    fi
    
    exit $exit_code
}

# Point d'entr√©e
main "$@"