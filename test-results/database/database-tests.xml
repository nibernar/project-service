<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="98" failures="3" errors="0" time="102.763">
  <testsuite name="DatabaseService - Lifecycle Tests" errors="0" failures="3" skipped="0" timestamp="2025-07-26T15:14:26" time="91.439" tests="18">
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ✅ Successful Connection Scenarios" name="should connect successfully on first attempt" time="0.349">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ✅ Successful Connection Scenarios" name="should set health status to healthy after successful connection" time="0.004">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ✅ Successful Connection Scenarios" name="should update health metrics after connection" time="0.003">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ✅ Successful Connection Scenarios" name="should start health monitoring in production" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ❌ Connection Retry Scenarios" name="should retry connection with exponential backoff" time="30.008">
      <failure>Error: thrown: &quot;Exceeded timeout of 30000 ms for a test.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:111:7
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:94:5
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:35:3
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at Object.&lt;anonymous&gt; (/Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:11:1)
    at Runtime._execModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:1439:24)
    at Runtime._loadModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:1022:12)
    at Runtime.requireModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:882:12)
    at jestAdapter (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)
    at runTestInternal (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ❌ Connection Retry Scenarios" name="should fail after max retries exceeded" time="30.01">
      <failure>Error: thrown: &quot;Exceeded timeout of 30000 ms for a test.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:149:7
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:94:5
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:35:3
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at Object.&lt;anonymous&gt; (/Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:11:1)
    at Runtime._execModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:1439:24)
    at Runtime._loadModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:1022:12)
    at Runtime.requireModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:882:12)
    at jestAdapter (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)
    at runTestInternal (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ❌ Connection Retry Scenarios" name="should handle different connection error types" time="30.023">
      <failure>Error: thrown: &quot;Exceeded timeout of 30000 ms for a test.
Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.&quot;
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:176:7
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:94:5
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at /Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:35:3
    at _dispatchDescribe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:91:26)
    at describe (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/index.js:55:5)
    at Object.&lt;anonymous&gt; (/Users/nicolasbernard/Desktop/project-service/test/unit/common/database/database.service.lifecycle.spec.ts:11:1)
    at Runtime._execModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:1439:24)
    at Runtime._loadModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:1022:12)
    at Runtime.requireModule (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runtime/build/index.js:882:12)
    at jestAdapter (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)
    at runTestInternal (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/nicolasbernard/Desktop/project-service/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ❌ Connection Retry Scenarios" name="should not start monitoring in development/test" time="0.04">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ❌ Edge Cases - onModuleInit" name="should handle connection success but query failure" time="0.03">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleInit() › ❌ Edge Cases - onModuleInit" name="should handle partial connection state" time="0.017">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleDestroy() › ✅ Successful Disconnection" name="should disconnect cleanly" time="0.015">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleDestroy() › ✅ Successful Disconnection" name="should handle multiple destroy calls gracefully" time="0.013">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleDestroy() › ❌ Disconnection Errors" name="should handle disconnect errors gracefully" time="0.019">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleDestroy() › ❌ Disconnection Errors" name="should handle timeout during disconnect" time="0.018">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › onModuleDestroy() › ❌ Disconnection Errors" name="should handle disconnect when never connected" time="0.066">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › Lifecycle Integration" name="should handle full lifecycle correctly" time="0.069">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › Lifecycle Integration" name="should handle init failure followed by destroy" time="0.041">
    </testcase>
    <testcase classname="DatabaseService - Lifecycle Tests › Lifecycle Integration" name="should handle sequential init/destroy calls" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="DatabaseService - Unit Tests" errors="0" failures="0" skipped="0" timestamp="2025-07-26T15:15:57" time="7.44" tests="29">
    <testcase classname="DatabaseService - Unit Tests › Construction and Configuration" name="should be defined" time="0.018">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Construction and Configuration" name="should throw error when DATABASE_URL is missing" time="0.109">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Construction and Configuration" name="should configure different log levels per environment" time="0.036">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Construction and Configuration" name="should set correct transaction options from config" time="0.037">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Construction and Configuration" name="should handle malformed DATABASE_URL gracefully" time="0.023">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Construction and Configuration" name="should use default values when config values are missing" time="0.03">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › isHealthy()" name="should return true for fast response" time="0.062">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › isHealthy()" name="should return false for slow response" time="6.056">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › isHealthy()" name="should return false on query failure" time="0.016">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › isHealthy()" name="should update responseTime metric" time="0.033">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › isHealthy()" name="should update lastSuccessfulQuery timestamp" time="0.009">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › isHealthy()" name="should increment error count on failure" time="0.019">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › getConnectionStatus()" name="should return connection details on success" time="0.037">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › getConnectionStatus()" name="should return failure details on error" time="0.031">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › getHealthMetrics()" name="should return current health metrics" time="0.018">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Health Check Methods › getHealthMetrics()" name="should return a copy of metrics (not reference)" time="0.019">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should execute callback within transaction" time="0.031">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should return callback result" time="0.015">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should use default transaction options" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should use custom transaction options" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should rollback on callback exception" time="0.019">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should increment error count on transaction failure" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should handle transaction timeout" time="0.018">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Transaction Management › withTransaction()" name="should handle invalid isolation level" time="0.035">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Error Handling" name="should handle database connection errors" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Error Handling" name="should handle timeout errors" time="0.017">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Error Handling" name="should handle authentication errors" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Logging and Monitoring" name="should log debug messages for transactions" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Unit Tests › Logging and Monitoring" name="should log errors appropriately" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="DatabaseService - Security Tests" errors="0" failures="0" skipped="0" timestamp="2025-07-26T15:16:05" time="2.74" tests="22">
    <testcase classname="DatabaseService - Security Tests › 🔒 Configuration Security" name="should not log sensitive information" time="0.096">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔒 Configuration Security" name="should validate connection string format securely" time="0.437">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔒 Configuration Security" name="should handle invalid credentials without exposure" time="0.036">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔒 Configuration Security" name="should use secure connection settings in production" time="0.015">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🛡️ SQL Injection Protection" name="should protect against SQL injection in raw queries" time="0.012">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🛡️ SQL Injection Protection" name="should handle special characters safely" time="0.033">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🛡️ SQL Injection Protection" name="should prevent query manipulation through parameters" time="0.022">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔐 Access Control and Authorization" name="should enforce environment-based operation restrictions" time="0.074">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔐 Access Control and Authorization" name="should validate user permissions for operations" time="0.1">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔐 Access Control and Authorization" name="should prevent unauthorized database schema access" time="0.021">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🚫 Data Validation and Sanitization" name="should validate input data types and formats" time="0.018">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🚫 Data Validation and Sanitization" name="should sanitize potentially dangerous input" time="0.018">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🚫 Data Validation and Sanitization" name="should handle very long inputs safely" time="0.021">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔍 Information Disclosure Prevention" name="should not expose database structure in errors" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔍 Information Disclosure Prevention" name="should not leak sensitive configuration in health metrics" time="0.016">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔍 Information Disclosure Prevention" name="should sanitize error messages for external consumption" time="0.015">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › ⚡ Resource Exhaustion Protection" name="should prevent connection pool exhaustion" time="0.185">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › ⚡ Resource Exhaustion Protection" name="should handle memory exhaustion gracefully" time="0.013">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › ⚡ Resource Exhaustion Protection" name="should enforce query timeouts" time="1.014">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔒 Audit and Monitoring Security" name="should log security-relevant events appropriately" time="0.015">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔒 Audit and Monitoring Security" name="should not log sensitive data in audit trails" time="0.092">
    </testcase>
    <testcase classname="DatabaseService - Security Tests › 🔒 Audit and Monitoring Security" name="should track failed authentication attempts" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="DatabaseService - Utilities Tests" errors="0" failures="0" skipped="0" timestamp="2025-07-26T15:16:07" time="0.88" tests="29">
    <testcase classname="DatabaseService - Utilities Tests › Basic functionality" name="should be defined" time="0.021">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Basic functionality" name="should have utility methods" time="0.016">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ✅ Test Environment - Allowed Operations" name="should reset database in test environment" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ✅ Test Environment - Allowed Operations" name="should delete data in correct order (foreign key constraints)" time="0.019">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ✅ Test Environment - Allowed Operations" name="should handle empty database during reset" time="0.015">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Production Environment - Forbidden Operations" name="should throw error in production environment" time="0.051">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Production Environment - Forbidden Operations" name="should not execute any database operations in production" time="0.013">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Development Environment - Forbidden Operations" name="should throw error in development environment" time="0.012">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Edge Cases - resetDatabase" name="should handle foreign key constraint errors" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Edge Cases - resetDatabase" name="should handle database errors during reset" time="0.013">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Edge Cases - resetDatabase" name="should handle transaction timeout during reset" time="0.021">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › resetDatabase() › ❌ Edge Cases - resetDatabase" name="should handle undefined NODE_ENV as non-test" time="0.016">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ✅ Development Environment - Allowed Operations" name="should seed database in development" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ✅ Development Environment - Allowed Operations" name="should skip duplicates during seeding" time="0.009">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ✅ Development Environment - Allowed Operations" name="should return count of seeded records" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ✅ Test Environment - Allowed Operations" name="should seed database in test environment" time="0.01">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Production Environment - Forbidden Operations" name="should throw error in production" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Production Environment - Forbidden Operations" name="should not execute any database operations in production" time="0.011">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Edge Cases - seedDatabase" name="should handle constraint violations during seed" time="0.019">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Edge Cases - seedDatabase" name="should handle database errors during seed" time="0.012">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Edge Cases - seedDatabase" name="should handle zero records created" time="0.008">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Edge Cases - seedDatabase" name="should handle malformed seed data" time="0.009">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › seedDatabase() › ❌ Edge Cases - seedDatabase" name="should handle partial seed success" time="0.009">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Environment Detection Edge Cases" name="should handle undefined NODE_ENV" time="0.01">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Environment Detection Edge Cases" name="should handle empty string NODE_ENV" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Environment Detection Edge Cases" name="should handle case-sensitive environment names" time="0.014">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Environment Detection Edge Cases" name="should handle invalid environment names" time="0.022">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Utilities Integration" name="should handle reset followed by seed" time="0.017">
    </testcase>
    <testcase classname="DatabaseService - Utilities Tests › Utilities Integration" name="should handle concurrent utility operations" time="0.013">
    </testcase>
  </testsuite>
</testsuites>